/*
 stats Thursday, March 17th, 2016, 11:56:16 AM 
*/

/*global $, angular, console */
var appName = "stats";
var stats = angular.module("stats", ["ngRoute", "ngCookies", "ui.bootstrap", "ui.slider"]);
stats.config(["$tooltipProvider", function($tooltipProvider) {
    $tooltipProvider.options({
        // If the screen is smaller than 480px, move tooltips to the right.
        placement: window.innerWidth <= 480 ? "right" : "top",
        animation: true,
        popupDelay: 0,
        appendToBody: true
    })
}]);
stats.run(["$document", "$modal", function($document, $modal) {
    $document.on("click", 'span[rel="modal"]', function(e) {
        var $this = angular.element(this);
        var type = $this.attr("type");
        var title = $this.attr("title");
        var href = $this.attr("href");
        var modalInstance = $modal.open({
            templateUrl: "/templates/overlay/modal.html",
            controller: "ModalInstanceCtrl",
            size: "lg",
            windowClass: type,
            resolve: {
                url: function() {
                    return href
                },
                title: function() {
                    return title
                },
                type: function() {
                    return type
                }
            }
        })
    })
}]);
stats.run(["$location", "$filter", "$modal", function($location, $filter, $modal) {
    var searchObject = $location.search();
    if (searchObject.mtype) {
        var type = searchObject.mtype;
        var title = searchObject.mtitle;
        searchObject.mtype = "";
        searchObject.mtitle = "";
        var search = $filter("param")(searchObject);
        var modalurl = "";
        switch (type) {
            case "shotchart":
                modalurl = "/shotchart/#!/?" + search;
                break;
            case "cvp":
                modalurl = "http://stats.nba.com/cvp.html?" + search;
                break;
            case "tracking":
                modalurl = "/playlist/#!/movement?" + search;
                break;
            case "movement":
                modalurl = "/playlist/#!/movement?" + search;
                break;
            case "pbpmovement":
                modalurl = "/movement/#!/?" + search;
                break;
            default:
                return
        }
        var modalInstance = $modal.open({
            templateUrl: "/templates/overlay/modal.html",
            controller: "ModalInstanceCtrl",
            size: "lg",
            windowClass: type,
            resolve: {
                url: function() {
                    return modalurl
                },
                title: function() {
                    return title
                },
                type: function() {
                    return type
                }
            }
        })
    }
}]);
stats.run(["$rootScope", "$location", function($rootScope, $location) {
    window.IS_MOBILE = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    // Hover states on page navigation
    $(".nav-buttons").on("mouseenter", ".button", function() {
        $(this).find(".drop").show()
    }).on("mouseleave", ".button", function() {
        $(this).find(".drop").hide()
    }); /* SAP Sponser click thorough */
    //Common pages
    $(".sap-header").click(function() {
        var URL = $("#sapSponserClickThroughURL").attr("href");
        var data = {
            focus: "sapheader"
        };
        _nba.analytics.click(data);
        if (URL) window.open(URL, "_blank")
    });
    //Team pages
    $("#stats-team-summary .sap-sponsor").click(function() {
        var URL = $("#sapSponserClickThroughURL").attr("href");
        if (URL) window.open(URL, "_blank")
    });
    //Player pages
    $("#stats-player-summary .sap-sponsor").click(function() {
        var URL = $("#sapSponserClickThroughURL").attr("href");
        if (URL) window.open(URL, "_blank")
    });
    //Beyond the numbers
    $(".stats-beyond-the-numbers .sap-logo").click(function() {
        var URL = $("#sapBeyondClickThroughURL").attr("href");
        var data = {
            focus: "sapbeyondthenumbers"
        };
        _nba.analytics.click(data);
        if (URL) window.open(URL, "_blank")
    });
    // tracking
    var callCount = 0;
    $rootScope.$on("$routeChangeSuccess", function(scope, route) {
        var path = route.$$route.originalPath;
        // angular will automaticlally reload the page
        // with a trailing / if it isn't there,
        // so don't make a route change call if its missing
        if (path.substr(-1) != "/") {
            return
        }
        if (typeof callOmniture != "undefined" && callCount > 0) {
            callOmniture()
        }
        if (typeof ga != "undefined") {
            ga("send", "event", "route-change", route.$$route.originalPath, JSON.stringify(route.params))
        }
        callCount++
    })
}]);
var setOmnitureHierarchy = function(splits, filters) {
    var player_id = "";
    var team_id = "";
    // var fltr = filters;
    // var splt = splits;
    // var filterSplit = "";
    //Set Omniture Object Params
    var obj = {
        splitsFilters: "",
        playerid: "PlayerID=none",
        teamid: "TeamID=none",
        hier: ""
    };
    // Check for scores content
    if (window.location.href.indexOf("/scores") > -1) {
        var scores_date = window.location.href.split("#!/")[1];
        if (scores_date === undefined) {
            obj.hier = ""
        } else {
            obj.hier = scores_date
        }
    }
    // Check for games content
    if (window.location.href.indexOf("game") > -1) {
        var game_hash_remove = window.location.href.split("#!/")[1];
        if (!game_hash_remove) {
            return
        }
        var sections = game_hash_remove.match(/([^\/]*)\/*$/);
        obj.heir = sections.length > 0 ? sections[1] : ""
    }
    //Check for league content
    if (window.location.href.indexOf("/league") > -1) {
        var remove_hash = window.location.href.split("#")[0];
        var league_section = remove_hash.match(/([^\/]*)\/*$/)[1];
        if (league_section == "team") {
            if (window.location.href.indexOf("clutch") > -1) {
                if (window.location.href.match(/([^\/]*)\/*$/)[1] == "clutch") {
                    obj.hier = "clutch"
                } else {
                    obj.hier = "clutch|" + window.location.href.match(/([^\/]*)\/*$/)[1]
                }
            } else {
                obj.hier = window.location.href.match(/([^\/]*)\/*$/)[1]
            }
        }
        if (league_section == "player") {
            if (window.location.href.indexOf("clutch") > -1) {
                if (window.location.href.match(/([^\/]*)\/*$/)[1] == "clutch") {
                    obj.hier = "clutch"
                } else {
                    obj.hier = "clutch|" + window.location.href.match(/([^\/]*)\/*$/)[1]
                }
            } else {
                obj.hier = window.location.href.split("#!")[1].match(/([^\/]*)\/*$/)[1]
            }
        }
        if (league_section == "lineups") {
            var lineups_hash_remove = window.location.href.split("#!/")[1];
            var lineups_section = lineups_hash_remove.match(/([^\/]*)\/*$/)[1];
            obj.hier = lineups_section
        }
    }
    //Check for team content
    if (window.location.href.indexOf("/team/") > -1 && window.location.href.indexOf("/league/") == -1) {
        var team_remove_hash = window.location.href.split("#!/")[1];
        if (window.location.href.match(/([^\/]*)\/*$/)[1].length == 10 && window.location.href.match(/([^\/]*)\/*$/)[1] != "onoffcourt") {
            obj.hier = window.location.href.match(/([^\/]*)\/*$/)[1] + "|landing";
            obj.teamid = "TeamID=" + window.location.href.match(/([^\/]*)\/*$/)[1]
        }
        if (team_remove_hash.length > 11) {
            obj.hier = team_remove_hash.split("/")[0] + "|" + team_remove_hash.split("/")[1] + "|" + team_remove_hash.split("/")[2];
            obj.teamid = "TeamID=" + team_remove_hash.split("/")[0]
        }
    }
    //Check for player index content
    if (window.location.href.match(/([^\/]*)\/*$/)[1] == "players" && window.location.href.indexOf("/team/") == -1) {
        obj.hier = "landing"
    }
    //Check for player content
    if (window.location.href.indexOf("/player/") > -1 && window.location.href.indexOf("/league/") == -1) {
        var player_remove_hash = window.location.href.split("#!/")[1];
        obj.hier = player_remove_hash.split("/")[0] + "|" + player_remove_hash.split("/")[1] + "|" + player_remove_hash.split("/")[2];
        obj.playerid = "PlayerID=" + player_remove_hash.split("/")[0]
    }
    //Check for tracking index content
    if (window.location.href.indexOf("/league/") == -1 && window.location.href.indexOf("/tracking/") > -1) {
        if (window.location.href.split("#!/")[1].length < 8) {
            obj.hier = "landing"
        }
    }
    //Check for tracking page content
    if (window.location.href.indexOf("/league/") == -1 && window.location.href.indexOf("/tracking/") > -1) {
        if (window.location.href.split("#!/")[1].length > 7) {
            var tracking_remove_hash = window.location.href.split("#!/")[1];
            obj.hier = tracking_remove_hash.split("/")[0] + "|" + tracking_remove_hash.split("/")[1] + "|" + tracking_remove_hash.split("/")[2]
        }
    }
    //Check for play type index content
    if (window.location.href.indexOf("/playtype/") > -1 && window.location.href.split("#!/")[1].length < 8) {
        obj.hier = "landing"
    }
    //Check for play type page content
    if (window.location.href.indexOf("/playtype/") > -1 && window.location.href.split("#!/")[1].length > 7) {
        var tracking_remove_hash = window.location.href.split("#!/")[1];
        obj.hier = tracking_remove_hash.split("/")[0] + "|" + tracking_remove_hash.split("/")[1] + "|" + tracking_remove_hash.split("/")[2]
    }
    //Check for History content
    if (window.location.href.indexOf("/history/") > -1) {
        obj.hier = "franchisehistory"
    }
    //Check for Draft Combine index content
    if (window.location.href.indexOf("/draftcombine/") > -1 && window.location.href.match(/([^\/]*)\/*$/)[1] == "#!") {
        var combine_remove_hash = window.location.href.split("#!/")[1];
        obj.hier = combine_remove_hash.split("/")[0] + "|" + combine_remove_hash.split("/")[1] + "|" + combine_remove_hash.split("/")[2]
    }
    //Check for Comparison index content
    if (window.location.href.indexOf("/vs/") > -1) {
        if (window.location.href.match(/([^\/]*)\/*$/)[1] == "#!") {
            obj.hier = "landing"
        } else {
            obj.hier = window.location.href.split("#!/")[1]
        }
    }
    //Check for Draft Combine page content
    if (window.location.href.indexOf("/draftcombine/") > -1 && window.location.href.match(/([^\/]*)\/*$/)[1] != "#!") {
        var combine_remove_hash = window.location.href.split("#!/")[1];
        obj.hier = combine_remove_hash.split("/")[0] + "|" + combine_remove_hash.split("/")[1] + "|" + combine_remove_hash.split("/")[2]
    }
    //Check for Video Status page content
    if (window.location.href.indexOf("/videostatus/") > -1) {
        obj.hier = window.location.href.split("#!/")[1]
    }
    //Check for Video Modal window
    if (window.location.href.indexOf("cvp") > -1) {
        obj.hier = "statsvideo|videopopup|" + window.location.href.split("?")[1]
    }
    //Check for Movements modal window content
    if (window.location.href.indexOf("playlist") > -1) {
        obj.hier = "statsmovements|movementspopup|" + window.location.href.split("?")[1]
    }
    //Check for Shotchart modal window content
    if (window.location.href.indexOf("shotchart") > -1) {
        obj.hier = "statsshotchart|shotchartpopup|" + window.location.href.split("?")[1]
    }
    //Check for Featured Article Content
    if (window.location.href.indexOf("featured") > -1) {
        obj.hier = window.location.href.match(/([^\/]*)\/*$/)[1]
    }
    //Check for Natural Language Content
    if (window.location.href.indexOf("thelab") > -1) {
        if (window.location.href.match(/([^\/]*)\/*$/)[1] === "statsqa") {
            obj.hier = "main"
        } else {
            obj.hier = "questionasked|" + splits
        }
    }
    // //Filters and Splits
    // if (fltr == "" && splt === undefined){
    // 	filterSplit = "notapplicable";
    // }
    // if (fltr == "" && splt == ""){
    // 	filterSplit = "notapplicable";
    // }
    // if (fltr === undefined && splt == ""){
    // 	filterSplit = "notapplicable";
    // }
    // if (fltr && splt === undefined){
    // 	filterSplit = "Filter=Yes";
    // }
    // if (splt && fltr === undefined){
    // 	filterSplit = "Splits=Yes";
    // }
    // if (splt && fltr == ""){
    // 	filterSplit = "Splits=Yes";
    // }
    // if (fltr && splt == ""){
    // 	filterSplit = "Filter=Yes";
    // }
    // if (splt && fltr){
    // 	filterSplit = "Splits=Yes|Filter=Yes";
    // }
    // if (splt === undefined && fltr === undefined){
    // 	filterSplit = "notapplicable";
    // }
    return obj
};
nbaOmCurrentLeague = "nba";
nbaOmAccountIds = "nbag-n-league";
//Init Omniture on initial page load
var initOmniture = function() {
    var hier = document.location.pathname.replace(/^\/(.*)\/$/, "$1").replace(/\//g, "|");
    if (hier == "|" || hier == "") {
        hier = "home"
    }
    if (hier.indexOf("|") == 0) {
        hier = hier.substr(1)
    }
    hier = hier.replace(".html", "");
    nbaOmCurrentLeague = "nba";
    if (window.location.hostname == "dev.stats.nba.com" || window.location.hostname == "stats-dev.nba.com" || window.location.hostname == "linuxpubstats.nba.com") {
        nbaOmAccountIds = "nbag-n-league-dev"
    } else {
        nbaOmAccountIds = "nbag-n-league"
    }
    nbaOmChannel = hier;
    nbaOmChannelPrefix = "stats.nba.com";
    nbaOmHier = "nba|nba.com|nba.com|stats";
    // Omniture Measure & Group Hierarchy
    var obj = setOmnitureHierarchy();
    if (obj) {
        if (obj.hier) {
            hier += "|" + obj.hier
        }
        if (obj.playerid) {
            nbaOmStatsCustom1 = obj.playerid;
            _nba.analytics.setOverride("statsCustom1", nbaOmStatsCustom1)
        }
        if (obj.teamid) {
            nbaOmStatsCustom2 = obj.teamid;
            _nba.analytics.setOverride("statsCustom2", nbaOmStatsCustom2)
        }
    }
    nbaOmAppendHier = hier;
    nbaOmTeamCustom1 = window.location + "";
    _nba.analytics.setGlobal("experience", "responsive");
    _nba.analytics.setOverride("league", nbaOmCurrentLeague);
    _nba.analytics.setOverride("accountIds", nbaOmAccountIds);
    _nba.analytics.setOverride("hier", nbaOmHier);
    _nba.analytics.setOverride("appendHier", nbaOmAppendHier);
    //_nba.analytics.setOverride("statsCustom3",nbaOmStatsCustom3);
    _nba.analytics.setOverride("teamCustom1", nbaOmTeamCustom1);
    _nba.analytics.page()
};
//Call Omniture Function
//Called on pages using Angular Routing
var callOmniture = function(question) {
    var hier = document.location.pathname.replace(/^\/(.*)\/$/, "$1").replace(/\//g, "|");
    if (hier == "|" || hier == "") {
        hier = "home"
    }
    if (hier.indexOf("|") == 0) {
        hier = hier.substr(1)
    }
    hier = hier.replace(".html", "");
    nbaOmCurrentLeague = "nba";
    if (window.location.hostname == "dev.stats.nba.com" || window.location.hostname == "stats-dev.nba.com" || window.location.hostname == "linuxpubstats.nba.com") {
        nbaOmAccountIds = "nbag-n-league-dev"
    } else {
        nbaOmAccountIds = "nbag-n-league"
    }
    nbaOmChannel = hier;
    nbaOmChannelPrefix = "stats.nba.com";
    nbaOmHier = "nba|nba.com|nba.com|stats";
    // Omniture Measure & Group Hierarchy
    var obj = setOmnitureHierarchy(question);
    if (obj) {
        if (obj.hier) {
            hier += "|" + obj.hier
        }
        if (obj.playerid) {
            nbaOmStatsCustom1 = obj.playerid;
            _nba.analytics.setOverride("statsCustom1", nbaOmStatsCustom1)
        }
        if (obj.teamid) {
            nbaOmStatsCustom2 = obj.teamid;
            _nba.analytics.setOverride("statsCustom2", nbaOmStatsCustom2)
        }
    }
    nbaOmAppendHier = hier;
    nbaOmTeamCustom1 = window.location + "";
    _nba.analytics.setGlobal("experience", "responsive");
    _nba.analytics.setOverride("league", nbaOmCurrentLeague);
    _nba.analytics.setOverride("accountIds", nbaOmAccountIds);
    _nba.analytics.setOverride("hier", nbaOmHier);
    _nba.analytics.setOverride("appendHier", nbaOmAppendHier);
    // _nba.analytics.setOverride("statsCustom3",nbaOmStatsCustom3);
    _nba.analytics.setOverride("teamCustom1", nbaOmTeamCustom1);
    _nba.analytics.page()
};
stats.constant("BOXSCORE_PERIODS", [
    /**
     * 55800 is default end of OT9.
     * Used if no end range is specificed in the controller.
     */
    // index 0
    {
        text: "All Periods",
        StartRange: "0000",
        EndRange: "55800",
        RangeType: 2,
        id: 0
    }, {
        text: "1st Period",
        StartRange: "0000",
        EndRange: "7200",
        RangeType: 2,
        id: 1
    }, {
        text: "2nd Period",
        StartRange: "7200",
        EndRange: "14400",
        RangeType: 2,
        id: 2
    }, {
        text: "3rd Period",
        StartRange: "14400",
        EndRange: "21600",
        RangeType: 2,
        id: 3
    }, {
        text: "4th Period",
        StartRange: "21600",
        EndRange: "28800",
        RangeType: 2,
        id: 4
    }, {
        text: "1st Half",
        StartRange: "0000",
        EndRange: "14400",
        RangeType: 2,
        id: 5
    }, {
        text: "2nd - 3rd",
        StartRange: "7200",
        EndRange: "21600",
        RangeType: 2,
        id: 6
    }, {
        text: "2nd Half",
        StartRange: "14400",
        EndRange: "28800",
        RangeType: 2,
        id: 7
    },
    // index 8
    {
        text: "All Overtime",
        StartRange: "28800",
        EndRange: "55800",
        RangeType: 2,
        id: 8
    }, {
        text: "OT1",
        StartRange: "28800",
        EndRange: "31800",
        RangeType: 2,
        id: 9
    }, {
        text: "OT2",
        StartRange: "31800",
        EndRange: "34800",
        RangeType: 2,
        id: 10
    }, {
        text: "OT3",
        StartRange: "34800",
        EndRange: "37800",
        RangeType: 2,
        id: 11
    }, {
        text: "OT4",
        StartRange: "37800",
        EndRange: "40800",
        RangeType: 2,
        id: 12
    }, {
        text: "OT5",
        StartRange: "40800",
        EndRange: "43800",
        RangeType: 2,
        id: 13
    }, {
        text: "OT6",
        StartRange: "43800",
        EndRange: "46800",
        RangeType: 2,
        id: 14
    }, {
        text: "OT7",
        StartRange: "46800",
        EndRange: "49800",
        RangeType: 2,
        id: 15
    }, {
        text: "OT8",
        StartRange: "49800",
        EndRange: "52800",
        RangeType: 2,
        id: 16
    }, {
        text: "OT9",
        StartRange: "52800",
        EndRange: "55800",
        RangeType: 2,
        id: 17
    }
]); /* global $, angular, console */
stats.constant("FEEDS_CONFIG", {
    prefix: "/stats/",
    debug: false,
    liveGameTrackerFeedUpdateInterval: 1e4,
    liveFeedUpdateInterval: 2e4,
    staticFeedUpdateInterval: 3e5,
    requestMethod: "get",
    //Endpoints for each feed, in central location for easy changing
    allstarGamePredictor: "allstarballotpredictor",
    assistLeaders: "assistleaders",
    assistTracker: "assisttracker",
    boxscore: "boxscore",
    boxscoreBase: "boxscore",
    boxscorePlayerTracking: "boxscore",
    boxscorePlayByPlay: "playbyplay",
    boxscoreAdvanced: "boxscoreadvanced",
    boxscoreMisc: "boxscoremisc",
    boxscoreScoring: "boxscorescoring",
    boxscoreUsage: "boxscoreusage",
    boxscoreFourFactors: "boxscorefourfactors",
    boxscorePlayoffSeries: "commonplayoffseries",
    boxscoreFanduelStats: "infographicfanduelplayer",
    boxscoreSummary: "boxscoresummaryv2",
    boxscoreTraditional_2: "boxscoretraditionalv2",
    boxscoreAdvanced_2: "boxscoreadvancedv2",
    boxscoreMisc_2: "boxscoremiscv2",
    boxscoreScoring_2: "boxscorescoringv2",
    boxscoreUsage_2: "boxscoreusagev2",
    boxscoreFourFactors_2: "boxscorefourfactorsv2",
    boxscorePlayerTracker_2: "boxscoreplayertrackv2",
    boxscorePlayByPlay_2: "playbyplayv2",
    boxscoreWinProbability: "winprobabilitypbp",
    draftCombineAgility: "draftcombinedrillresults",
    draftCombineAnthro: "draftcombineplayeranthro",
    draftCombineNonstationary: "draftcombinenonstationaryshooting",
    draftCombineSpotup: "draftcombinespotshooting",
    draftCombineSummary: "draftcombinestats",
    draftHistory: "drafthistory",
    franchiseHistory: "franchisehistory",
    fantasyWidget: "fantasywidget",
    homepageLeaders: "homepageleaders",
    homepageLeaders2: "homepagev2",
    leagueGameLog: "leaguegamelog",
    leagueLeaders: "leagueleaders",
    leagueLeadersAllTiles: "leaderstilesallstats",
    leagueLeadersTiles: "leaderstiles",
    leagueLineups: "leaguedashlineups",
    leaguePlayerBioStats: "leaguedashplayerbiostats",
    leaguePlayerClutch: "leaguedashplayerclutch",
    leaguePlayerShotLocations: "leaguedashplayershotlocations",
    leaguePlayerStats: "leaguedashplayerstats",
    leaguePlayerTrackingDefense: "leaguedashptdefend",
    leaguePlayerTrackingShots: "leaguedashplayerptshot",
    leagueTeamClutch: "leaguedashteamclutch",
    leagueTeamShotLocations: "leaguedashteamshotlocations",
    leagueTeamStats: "leaguedashteamstats",
    leagueTeamTrackingDefense: "leaguedashptteamdefend",
    leagueTeamTrackingShots: "leaguedashteamptshot",
    leagueTrackingStats: "leaguedashptstats",
    playoffPicture: "playoffpicture",
    playerCompare: "playercompare",
    playerList: "commonallplayers",
    playerSummary: "commonplayerinfo",
    playerProfile: "playerprofile",
    playerProfile2: "playerprofilev2",
    playerGeneralSplits: "playerdashboardbygeneralsplits",
    playerOpponentSplits: "playerdashboardbyopponent",
    playerLastNGamesSplits: "playerdashboardbylastngames",
    playerInGameSplits: "playerdashboardbygamesplits",
    playerClutchSplits: "playerdashboardbyclutch",
    playerFantasySplits: "playerfantasyprofile",
    playerFantasyBarGraph: "playerfantasyprofilebargraph",
    playerShooting: "playerdashboardbyshootingsplits",
    playerTeamPerformance: "playerdashboardbyteamperformance",
    playerYearOverYear: "playerdashboardbyyearoveryear",
    playerCareer: "playercareerstats",
    playerGameLogs: "playergamelog",
    playerTrackingShots: "playerdashptshots",
    playerTrackingRebounds: "playerdashptreb",
    playerTrackingPasses: "playerdashptpass",
    playerTrackingDefense: "playerdashptshotdefend",
    playerTrackingLogShots: "playerdashptshotlog",
    playerTrackingLogRebounds: "playerdashptreboundlogs",
    playerUpcomingGames: "playernextngames",
    playerVsPlayer: "playervsplayer",
    playersVsPlayers: "playersvsplayers",
    scoreboard: "scoreboard",
    scoreboard2: "scoreboardV2",
    shotchart: "shotchartdetail",
    shotchartLineup: "shotchartlineupdetail",
    teamList: "commonTeamYears",
    teamSummary: "teaminfocommon",
    teamCommonRoster: "commonteamroster",
    teamGeneralSplits: "teamdashboardbygeneralsplits",
    teamOpponentSplits: "teamdashboardbyopponent",
    teamLastNGamesSplits: "teamdashboardbylastngames",
    teamInGameSplits: "teamdashboardbygamesplits",
    teamClutchSplits: "teamdashboardbyclutch",
    teamShootingSplits: "teamdashboardbyshootingsplits",
    teamPerformanceSplits: "teamdashboardbyteamperformance",
    teamYearOverYearSplits: "teamdashboardbyyearoveryear",
    teamLineups: "teamdashlineups",
    teamPlayers: "teamplayerdashboard",
    teamPlayerOnOffDetails: "teamplayeronoffdetails",
    teamPlayerOnOffSummary: "teamplayeronoffsummary",
    teamGameLogs: "teamgamelog",
    teamSeason: "teamyearbyyearstats",
    teamTrackingDashShots: "teamdashptshots",
    teamTrackingDashRebounds: "teamdashptreb",
    teamTrackingDashPasses: "teamdashptpass",
    teamVsPlayer: "teamvsplayer",
    videoStatus: "videoStatus"
});
(function() {
    stats.constant("SEASONS", getSeasons());

    function getSeasons() {
        var s = {
            reg: "Regular Season",
            pre: "Pre Season",
            pos: "Playoffs",
            ast: "All Star"
        };
        var gs = {
            s: "Season",
            n: null
        };
        var toSeasonFormat = function(y) {
            return y + "-" + (y + 1).toString().slice(-2)
        };
        var array = [
            ["00", 2015, s.reg, gs.n, 1996, "site"],
            ["00", 2015, s.ast, gs.n, 1950, "allstarRoster"],
            ["00", 2015, s.ast, gs.n, 1996, "allstar"],
            ["00", 2015, s.ast, gs.n, 1996, "leagueAllstar"],
            ["00", 2015, s.reg, gs.n, 2015, "boxscoreCharts"],
            ["00", 2015, s.reg, gs.n, 2014, "boxscoreTracking"],
            ["00", 2015, s.reg, gs.n, 1996, "boxscorePlayByPlay"],
            ["00", 2015, s.reg, gs.n, 2e3, "DraftCombineAgility"],
            ["00", 2015, s.reg, gs.n, 2e3, "DraftCombineAnthro"],
            ["00", 2015, s.reg, gs.n, 2e3, "DraftCombineSummary"],
            ["00", 2015, s.reg, gs.n, 2014, "DraftCombineNonstationary"],
            ["00", 2015, s.reg, gs.n, 2014, "DraftCombineSpotUp"],
            ["00", 2015, s.reg, gs.n, 1947, "DraftHistory"],
            ["00", 2015, s.reg, gs.n, 1946, "leagueGameLogs"],
            ["00", 2015, s.reg, gs.n, 2007, "leagueLineups"],
            ["00", 2015, s.reg, gs.n, 1996, "leaguePlayerStats"],
            ["00", 2015, s.reg, gs.n, 1996, "leagueTeamStats"],
            ["00", 2015, s.reg, gs.n, 2013, "leagueTrackingStats"],
            ["00", 2015, s.reg, gs.s, 1996, "homepageLeaders"],
            ["00", 2015, s.reg, gs.s, 1996, "leaderTiles"],
            ["00", 2015, s.reg, gs.n, 1996, "leadersCurrent"],
            ["00", 2015, s.reg, gs.n, 1951, "leadersAllTime"],
            ["00", 2015, s.reg, gs.n, 1996, "playerGamelogs"],
            ["00", 2015, s.reg, gs.n, 2014, "playerFantasy"],
            ["00", 2015, s.reg, gs.n, 1951, "playerProfile"],
            ["00", 2015, s.reg, gs.n, 1996, "playerStats"],
            ["00", 2015, s.reg, gs.n, 2013, "playerTracking"],
            ["00", 2015, s.reg, gs.n, 2015, "playerUpcomingGames"],
            ["00", 2015, s.reg, gs.n, 1996, "teamGameLogs"],
            ["00", 2015, s.reg, gs.n, 2007, "teamLineups"],
            ["00", 2015, s.reg, gs.n, 1996, "teamOnOffCourt"],
            ["00", 2015, s.reg, gs.n, 1996, "teamPlayer"],
            ["00", 2015, s.reg, gs.n, 1951, "teamProfile"],
            ["00", 2015, s.reg, gs.n, 1951, "teamRoster"],
            ["00", 2015, s.reg, gs.n, 1996, "teamStats"],
            ["00", 2015, s.reg, gs.n, 2013, "teamTracking"],
            ["00", 2015, s.reg, gs.n, 2001, "playerVsPlayerStats"],
            ["00", 2015, s.reg, gs.n, 2001, "teamVsPlayerStats"],
            ["00", 2015, s.reg, gs.n, 2014, "playtypeStats"],
            ["00", 2015, s.reg, gs.n, 2015, "transactions"],
            ["00", 2015, s.reg, gs.n, 2013, "trackingStats"]
        ];
        var seasonsObject = {};
        for (var i in array) {
            var row = array[i];
            var obj = {
                LeagueID: row[0],
                Season: toSeasonFormat(row[1]),
                SeasonYear: row[1],
                SeasonType: row[2],
                GameScope: row[3],
                SeasonFrom: toSeasonFormat(row[4]),
                SeasonYearFrom: row[4],
                Section: row[5]
            };
            var thissection = obj.Section;
            seasonsObject[thissection] = obj
        }
        return seasonsObject
    }
})();
stats.constant("SPLITS", {
    LeagueID: {
        name: "LeagueID",
        label: "League",
        "default": "00",
        desc: "",
        type: "select",
        options: [{
            val: "00",
            text: "NBA"
        }, {
            val: "10",
            text: "WNBA"
        }, {
            val: "20",
            text: "D-League"
        }]
    },
    Season: {
        name: "Season",
        label: "Season",
        "default": "2014-15",
        desc: "",
        type: "select",
        options: [{
            val: "2015-16",
            text: "2015-16"
        }, {
            val: "2014-15",
            text: "2014-15"
        }, {
            val: "2013-14",
            text: "2013-14"
        }, {
            val: "2012-13",
            text: "2012-13"
        }, {
            val: "2011-12",
            text: "2011-12"
        }, {
            val: "2010-11",
            text: "2010-11"
        }, {
            val: "2009-10",
            text: "2009-10"
        }, {
            val: "2008-09",
            text: "2008-09"
        }, {
            val: "2007-08",
            text: "2007-08"
        }]
    },
    SeasonType: {
        name: "SeasonType",
        label: "Season Type",
        "default": "Regular Season",
        type: "select",
        desc: "",
        options: [{
            val: "Pre Season",
            text: "Preseason"
        }, {
            val: "Regular Season",
            text: "Regular Season"
        }, {
            val: "Playoffs",
            text: "Playoffs"
        }, {
            val: "All Star",
            text: "All Star"
        }]
    },
    PerMode: {
        name: "PerMode",
        label: "Per Mode",
        "default": "PerGame",
        type: "select",
        desc: "",
        options: [{
            val: "Totals",
            text: "Totals"
        }, {
            val: "PerGame",
            text: "Per Game"
        }]
    },
    StatCategory: {
        name: "StatCategory",
        label: "Stat Category",
        "default": "PTS",
        type: "select",
        desc: "",
        options: [{
            val: "MIN",
            text: "MIN"
        }, {
            val: "FGM",
            text: "FGM"
        }, {
            val: "FGA",
            text: "FGA"
        }, {
            val: "FG_PCT",
            text: "FG%"
        }, {
            val: "FG3M",
            text: "3PM"
        }, {
            val: "FG3A",
            text: "3PA"
        }, {
            val: "FG3_PCT",
            text: "3P%"
        }, {
            val: "FTM",
            text: "FTM"
        }, {
            val: "FTA",
            text: "FTA"
        }, {
            val: "FT_PCT",
            text: "FT%"
        }, {
            val: "OREB",
            text: "OREB"
        }, {
            val: "DREB",
            text: "DREB"
        }, {
            val: "REB",
            text: "REB"
        }, {
            val: "AST",
            text: "AST"
        }, {
            val: "STL",
            text: "STL"
        }, {
            val: "BLK",
            text: "BLK"
        }, {
            val: "TOV",
            text: "TOV"
        }, {
            val: "EFF",
            text: "EFF"
        }, {
            val: "PTS",
            text: "PTS"
        }, {
            val: "AST_TOV",
            text: "AST/TO"
        }, {
            val: "STL_TOV",
            text: "STL/TOV"
        }, {
            val: "PF",
            text: "PF"
        }]
    },
    GameScope: {
        name: "Game Scope",
        label: "Game Scope",
        type: "select",
        description: "",
        "default": "",
        options: [{
            val: "",
            text: "Season"
        }, {
            val: "Yesterday",
            text: "Yesterday"
        }, {
            val: "Last10",
            text: "Last 10 Games"
        }]
    },
    GameSegment: {
        name: "GameSegment",
        label: "By Half",
        type: "select",
        description: "The option to view a player or team's stats in either the first half or the second half of a game.",
        "default": "",
        options: [{
            val: "",
            text: "Entire Game"
        }, {
            val: "First Half",
            text: "First Half"
        }, {
            val: "Second Half",
            text: "Second Half"
        }, {
            val: "Overtime",
            text: "Overtime"
        }]
    },
    PaceAdjust: {
        name: "PaceAdjust",
        label: "Pace Adjust",
        "default": "N",
        type: "select",
        desc: "",
        options: [{
            val: "Y",
            text: "Pace Adjust On"
        }, {
            val: "N",
            text: "Pace Adjust Off"
        }]
    },
    Period: {
        name: "Period",
        label: "Quarter",
        "default": "0",
        type: "select",
        desc: "",
        options: [{
            val: "0",
            text: "All Quarters"
        }, {
            val: "1",
            text: "1st Quarter"
        }, {
            val: "2",
            text: "2nd Quarter"
        }, {
            val: "3",
            text: "3rd Quarter"
        }, {
            val: "4",
            text: "4th Quarter"
        }, {
            val: "5",
            text: "OT 1"
        }, {
            val: "6",
            text: "OT 2"
        }, {
            val: "7",
            text: "OT 3"
        }, {
            val: "8",
            text: "OT 4"
        }, {
            val: "9",
            text: "OT 5"
        }, {
            val: "10",
            text: "OT 6"
        }, {
            val: "11",
            text: "OT 7"
        }, {
            val: "12",
            text: "OT 8"
        }, {
            val: "13",
            text: "OT 9"
        }, {
            val: "14",
            text: "OT 10"
        }]
    },
    PlusMinus: {
        name: "PlusMinus",
        label: "Differentials",
        "default": "N",
        type: "select",
        desc: "",
        options: [{
            val: "Y",
            text: "Differentials On"
        }, {
            val: "N",
            text: "Differentials Off"
        }]
    },
    Rank: {
        name: "Rank",
        label: "Rank",
        "default": "N",
        type: "select",
        desc: "",
        options: [{
            val: "Y",
            text: "Rank On"
        }, {
            val: "N",
            text: "Rank Off"
        }]
    },
    Scope: {
        name: "Scope",
        label: "Scope",
        "default": "S",
        type: "select",
        desc: "",
        options: [{
            val: "S",
            text: "All Players"
        }, {
            val: "Rookies",
            text: "Rookies"
        }]
    },
    VsConference: {
        name: "VsConference",
        label: "VS Conference",
        "default": "",
        type: "select",
        desc: "",
        options: [{
            val: "",
            text: "VS All Conferences"
        }, {
            val: "East",
            text: "East"
        }, {
            val: "West",
            text: "West"
        }]
    },
    VsDivision: {
        name: "VsDivision",
        label: "VS Division",
        "default": "",
        type: "select",
        desc: "Stats for team or player against a selected division",
        options: [{
            val: "",
            text: "VS All Divisions"
        }, {
            val: "Atlantic",
            text: "Atlantic"
        }, {
            val: "Central",
            text: "Central"
        }, {
            val: "Northwest",
            text: "Northwest"
        }, {
            val: "Pacific",
            text: "Pacific"
        }, {
            val: "Southeast",
            text: "Southeast"
        }, {
            val: "Southwest",
            text: "Southwest"
        }]
    },
    Conference: {
        name: "Conference",
        label: "Conference",
        "default": "",
        type: "select",
        desc: "",
        options: [{
            val: "",
            text: "All Conferences"
        }, {
            val: "East",
            text: "East"
        }, {
            val: "West",
            text: "West"
        }]
    },
    Division: {
        name: "Division",
        label: "Division",
        "default": "",
        type: "select",
        desc: "Stats for team or player against a selected division",
        options: [{
            val: "",
            text: "All Divisions"
        }, {
            val: "Atlantic",
            text: "Atlantic"
        }, {
            val: "Central",
            text: "Central"
        }, {
            val: "Northwest",
            text: "Northwest"
        }, {
            val: "Pacific",
            text: "Pacific"
        }, {
            val: "Southeast",
            text: "Southeast"
        }, {
            val: "Southwest",
            text: "Southwest"
        }]
    },
    Outcome: {
        name: "Outcome",
        label: "Outcome",
        "default": "",
        type: "select",
        desc: "",
        options: [{
            val: "",
            text: "All Outcomes"
        }, {
            val: "W",
            text: "Wins"
        }, {
            val: "L",
            text: "Losses"
        }]
    },
    Location: {
        name: "Location",
        label: "Location",
        "default": "",
        type: "select",
        desc: "",
        options: [{
            val: "",
            text: "All Locations"
        }, {
            val: "Home",
            text: "Home"
        }, {
            val: "Road",
            text: "Road"
        }]
    },
    SeasonSegment: {
        name: "SeasonSegment",
        label: "Season Segment",
        "default": "",
        type: "select",
        desc: "",
        options: [{
            val: "",
            text: "Entire Season"
        }, {
            val: "Pre All-Star",
            text: "Pre All-Star"
        }, {
            val: "Post All-Star",
            text: "Post All-Star"
        }]
    },
    LastNGames: {
        name: "LastNGames",
        label: "Last N Games",
        "default": "0",
        type: "select",
        desc: "",
        options: [{
            val: "0",
            text: "All Games"
        }, {
            val: "1",
            text: "Last Game"
        }, {
            val: "2",
            text: "Last 2 Games"
        }, {
            val: "3",
            text: "Last 3 Games"
        }, {
            val: "4",
            text: "Last 4 Games"
        }, {
            val: "5",
            text: "Last 5 Games"
        }, {
            val: "6",
            text: "Last 6 Games"
        }, {
            val: "7",
            text: "Last 7 Games"
        }, {
            val: "8",
            text: "Last 8 Games"
        }, {
            val: "9",
            text: "Last 9 Games"
        }, {
            val: "10",
            text: "Last 10 Games"
        }, {
            val: "11",
            text: "Last 11 Games"
        }, {
            val: "12",
            text: "Last 12 Games"
        }, {
            val: "13",
            text: "Last 13 Games"
        }, {
            val: "14",
            text: "Last 14 Games"
        }, {
            val: "15",
            text: "Last 15 Games"
        }]
    },
    OpponentTeamID: {
        name: "OpponentTeamID",
        label: "VS Opponent",
        "default": "0",
        type: "select",
        desc: "",
        options: [{
            val: "0",
            text: "Vs All Teams"
        }, {
            val: "1610612737",
            text: "Atlanta Hawks"
        }, {
            val: "1610612738",
            text: "Boston Celtics"
        }, {
            val: "1610612751",
            text: "Brooklyn Nets"
        }, {
            val: "1610612766",
            text: "Charlotte Hornets"
        }, {
            val: "1610612741",
            text: "Chicago Bulls"
        }, {
            val: "1610612739",
            text: "Cleveland Cavaliers"
        }, {
            val: "1610612742",
            text: "Dallas Mavericks"
        }, {
            val: "1610612743",
            text: "Denver Nuggets"
        }, {
            val: "1610612765",
            text: "Detroit Pistons"
        }, {
            val: "1610612744",
            text: "Golden State Warriors"
        }, {
            val: "1610612745",
            text: "Houston Rockets"
        }, {
            val: "1610612754",
            text: "Indiana Pacers"
        }, {
            val: "1610612746",
            text: "Los Angeles Clippers"
        }, {
            val: "1610612747",
            text: "Los Angeles Lakers"
        }, {
            val: "1610612763",
            text: "Memphis Grizzlies"
        }, {
            val: "1610612748",
            text: "Miami Heat"
        }, {
            val: "1610612749",
            text: "Milwaukee Bucks"
        }, {
            val: "1610612750",
            text: "Minnesota Timberwolves"
        }, {
            val: "1610612740",
            text: "New Orleans Pelicans"
        }, {
            val: "1610612752",
            text: "New York Knicks"
        }, {
            val: "1610612760",
            text: "Oklahoma City Thunder"
        }, {
            val: "1610612753",
            text: "Orlando Magic"
        }, {
            val: "1610612755",
            text: "Philadelphia 76ers"
        }, {
            val: "1610612756",
            text: "Phoenix Suns"
        }, {
            val: "1610612757",
            text: "Portland Trail Blazers"
        }, {
            val: "1610612758",
            text: "Sacramento Kings"
        }, {
            val: "1610612759",
            text: "San Antonio Spurs"
        }, {
            val: "1610612761",
            text: "Toronto Raptors"
        }, {
            val: "1610612762",
            text: "Utah Jazz"
        }, {
            val: "1610612764",
            text: "Washington Wizards"
        }]
    },
    TeamID: {
        name: "TeamID",
        label: "Team",
        "default": "0",
        type: "select",
        desc: "",
        options: [{
            val: "0",
            text: "All Teams"
        }, {
            val: "1610612737",
            text: "Atlanta Hawks"
        }, {
            val: "1610612738",
            text: "Boston Celtics"
        }, {
            val: "1610612751",
            text: "Brooklyn Nets"
        }, {
            val: "1610612766",
            text: "Charlotte Hornets"
        }, {
            val: "1610612741",
            text: "Chicago Bulls"
        }, {
            val: "1610612739",
            text: "Cleveland Cavaliers"
        }, {
            val: "1610612742",
            text: "Dallas Mavericks"
        }, {
            val: "1610612743",
            text: "Denver Nuggets"
        }, {
            val: "1610612765",
            text: "Detroit Pistons"
        }, {
            val: "1610612744",
            text: "Golden State Warriors"
        }, {
            val: "1610612745",
            text: "Houston Rockets"
        }, {
            val: "1610612754",
            text: "Indiana Pacers"
        }, {
            val: "1610612746",
            text: "Los Angeles Clippers"
        }, {
            val: "1610612747",
            text: "Los Angeles Lakers"
        }, {
            val: "1610612763",
            text: "Memphis Grizzlies"
        }, {
            val: "1610612748",
            text: "Miami Heat"
        }, {
            val: "1610612749",
            text: "Milwaukee Bucks"
        }, {
            val: "1610612750",
            text: "Minnesota Timberwolves"
        }, {
            val: "1610612740",
            text: "New Orleans Pelicans"
        }, {
            val: "1610612752",
            text: "New York Knicks"
        }, {
            val: "1610612760",
            text: "Oklahoma City Thunder"
        }, {
            val: "1610612753",
            text: "Orlando Magic"
        }, {
            val: "1610612755",
            text: "Philadelphia 76ers"
        }, {
            val: "1610612756",
            text: "Phoenix Suns"
        }, {
            val: "1610612757",
            text: "Portland Trail Blazers"
        }, {
            val: "1610612758",
            text: "Sacramento Kings"
        }, {
            val: "1610612759",
            text: "San Antonio Spurs"
        }, {
            val: "1610612761",
            text: "Toronto Raptors"
        }, {
            val: "1610612762",
            text: "Utah Jazz"
        }, {
            val: "1610612764",
            text: "Washington Wizards"
        }]
    },
    Month: {
        name: "Month",
        label: "Month",
        "default": "0",
        type: "select",
        desc: "",
        options: [{
            val: "0",
            text: "All Months"
        }, {
            val: "4",
            text: "January"
        }, {
            val: "5",
            text: "February"
        }, {
            val: "6",
            text: "March"
        }, {
            val: "7",
            text: "April"
        }, {
            val: "8",
            text: "May"
        }, {
            val: "9",
            text: "June"
        }, {
            val: "10",
            text: "July"
        }, {
            val: "11",
            text: "August"
        }, {
            val: "12",
            text: "September"
        }, {
            val: "1",
            text: "October"
        }, {
            val: "2",
            text: "November"
        }, {
            val: "3",
            text: "December"
        }]
    },
    PlayerPosition: {
        name: "PlayerPosition",
        label: "Position",
        "default": "",
        type: "select",
        desc: "Filter out players by position to view either only Guards, Forwards, or Centers.",
        options: [{
            val: "",
            text: "All Positions"
        }, {
            val: "F",
            text: "Forward"
        }, {
            val: "C",
            text: "Center"
        }, {
            val: "G",
            text: "Guard"
        }]
    },
    StarterBench: {
        name: "StarterBench",
        label: "Starter Bench",
        "default": "",
        type: "select",
        description: "The option to view stats by either the starters or the bench of a team.",
        options: [{
            val: "",
            text: "All Players"
        }, {
            val: "Starters",
            text: "Starters"
        }, {
            val: "Bench",
            text: "Bench"
        }]
    },
    PlayerExperience: {
        name: "PlayerExperience",
        label: "Experience",
        "default": "",
        type: "select",
        description: "The option to view either only rookies, or to exclude rookies from the data set.",
        options: [{
            val: "",
            text: "All Experience"
        }, {
            val: "Rookie",
            text: "Rookie"
        }, {
            val: "Sophomore",
            text: "Sophomore"
        }, {
            val: "Veteran",
            text: "Veteran"
        }]
    },
    GroupQuantity: {
        name: "GroupQuantity",
        label: "Line Ups",
        "default": "5",
        type: "select",
        description: "",
        options: [{
            val: "5",
            text: "5 Man Lineups"
        }, {
            val: "4",
            text: "4 Man Lineups"
        }, {
            val: "3",
            text: "3 Man Lineups"
        }, {
            val: "2",
            text: "2 Man Lineups"
        }]
    },
    ClutchTime: {
        name: "ClutchTime",
        label: "Clutch Time",
        "default": "Last 5 Minutes",
        type: "select",
        description: "",
        options: [{
            val: "Last 5 Minutes",
            text: "Last 5 Minutes"
        }, {
            val: "Last 4 Minutes",
            text: "Last 4 Minutes"
        }, {
            val: "Last 3 Minutes",
            text: "Last 3 Minutes"
        }, {
            val: "Last 2 Minutes",
            text: "Last 2 Minutes"
        }, {
            val: "Last 1 Minute",
            text: "Last 1 Minute"
        }, {
            val: "Last 30 Seconds",
            text: "Last 30 Seconds"
        }, {
            val: "Last 10 Seconds",
            text: "Last 10 Seconds"
        }]
    },
    AheadBehind: {
        name: "AheadBehind",
        label: "Ahead or Behind",
        "default": "Ahead or Behind",
        type: "select",
        description: "",
        options: [{
            val: "Ahead or Behind",
            text: "Ahead or Behind"
        }, {
            val: "Behind or Tied",
            text: "Behind or Tied"
        }, {
            val: "Ahead or Tied",
            text: "Ahead or Tied"
        }]
    },
    PointDiff: {
        name: "PointDiff",
        label: "PointDiff",
        "default": "5",
        type: "select",
        description: "",
        options: [{
            val: "5",
            text: "5 Point Diff or Less"
        }, {
            val: "4",
            text: "4 Point Diff or Less"
        }, {
            val: "3",
            text: "3 Point Diff or Less"
        }, {
            val: "2",
            text: "2 Point Diff or Less"
        }, {
            val: "1",
            text: "1 Point Diff"
        }]
    },
    DistanceRange: {
        name: "DistanceRange",
        label: "Distance Range",
        "default": "5ft Range",
        type: "select",
        description: "",
        options: [{
            val: "5ft Range",
            text: "5ft Range"
        }, {
            val: "8ft Range",
            text: "8ft Range"
        }, {
            val: "By Zone",
            text: "By Zone"
        }]
    },
    DateFrom: {
        name: "DateFrom",
        label: "Date From",
        "default": "",
        type: "datepicker",
        description: "",
        selected: {
            val: ""
        }
    },
    DateTo: {
        name: "DateTo",
        label: "Date To",
        "default": "",
        type: "datepicker",
        description: "",
        selected: {
            val: ""
        }
    },
    PT: {
        name: "PT",
        label: "Players or Teams",
        "default": "player",
        type: "select",
        desc: "",
        options: [{
            val: "player",
            text: "Player Stats"
        }, {
            val: "team",
            text: "Team Stats"
        }]
    },
    OD: {
        name: "OD",
        label: "Offensive or Defensive",
        "default": "offensive",
        type: "select",
        desc: "",
        options: [{
            val: "offensive",
            text: "Offensive"
        }, {
            val: "defensive",
            text: "Defensive"
        }]
    },
    ShotClockRange: {
        name: "ShotClockRange",
        label: "Shot Clock Range",
        "default": "",
        type: "select",
        desc: "",
        options: [{
            val: "",
            text: "All Shot Clock Ranges"
        }, {
            val: "24-22",
            text: "24-22"
        }, {
            val: "22-18 Very Early",
            text: "22-18 Very Early"
        }, {
            val: "18-15 Early",
            text: "18-15 Early"
        }, {
            val: "15-7 Average",
            text: "15-7 Average"
        }, {
            val: "7-4 Late",
            text: "7-4 Late"
        }, {
            val: "4-0 Very Late",
            text: "4-0 Very Late"
        }, {
            val: "ShotClock Off",
            text: "ShotClock Off"
        }]
    },
    PORound: {
        name: "PORound",
        label: "Playoff Round",
        "default": "0",
        type: "select",
        desc: "",
        options: [{
            val: "0",
            text: "All Playoff Rounds"
        }, {
            val: "1",
            text: "Conference Quarter-Finals"
        }, {
            val: "2",
            text: "Conference Semi-Finals"
        }, {
            val: "3",
            text: "Conference Finals"
        }, {
            val: "4",
            text: "Finals"
        }]
    },
    DraftYear: {
        name: "DraftYear",
        label: "Draft Year",
        "default": "",
        type: "select",
        desc: "",
        options: function() {
            var arr = [{
                val: "",
                text: "All Draft Years"
            }];
            for (var i = 2015; i >= 1947; --i) {
                arr.push({
                    val: i + "",
                    text: i + ""
                })
            }
            return arr
        }()
    },
    DraftPick: {
        name: "DraftPick",
        label: "Draft Pick",
        "default": "",
        type: "select",
        desc: "",
        options: [{
            val: "",
            text: "All Draft Rounds"
        }, {
            val: "1st Round",
            text: "1st Round"
        }, {
            val: "2nd Round",
            text: "2nd Round"
        }, {
            val: "1st Pick",
            text: "1st Pick"
        }, {
            val: "Lottery Pick",
            text: "Lottery Pick"
        }, {
            val: "Top 5 Pick",
            text: "Top 5 Pick"
        }, {
            val: "Top 10 Pick",
            text: "Top 10 Pick"
        }, {
            val: "Top 15 Pick",
            text: "Top 15 Pick"
        }, {
            val: "Top 20 Pick",
            text: "Top 20 Pick"
        }, {
            val: "Top 25 Pick",
            text: "Top 25 Pick"
        }, {
            val: "Picks 11 Thru 20",
            text: "Picks 11 Thru 20"
        }, {
            val: "Picks 21 Thru 30",
            text: "Picks 21 Thru 30"
        }, {
            val: "Undrafted",
            text: "Undrafted"
        }]
    },
    College: {
        name: "College",
        label: "College",
        "default": "",
        type: "select",
        desc: "",
        options: function() {
            var arr = [{
                val: "",
                text: "All Affiliations"
            }, {
                val: "High School",
                text: "High School"
            }, {
                val: "D-League",
                text: "D-League"
            }, {
                val: "None",
                text: "No College"
            }, {
                val: "",
                text: "---"
            }];
            var colleges = ["Acadia (CAN)", "Adams State", "Adelphi", "Air Force", "Akron", "Alabama", "Alabama A&M", "Alabama-Birmingham", "Alabama-Huntsville", "Alabama State", "Albany", "Albany State (GA)", "Alcorn State", "Alliance", "American", "American International", "Angelo State", "Appalachian State", "Arizona", "Arizona State", "Arkansas", "Arkansas-Fort Smith", "Arkansas-Little Rock", "Arkansas-Pine Bluff", "Arkansas State", "Army", "Assumption", "Auburn", "Auburn-Montgomery", "Augsburg", "Augustana (IL)", "Augustana (SD)", "Augusta State", "Aurora", "Austin Peay", "Averett", "Azusa Pacific", "Ball State", "Baltimore", "Barton", "Barton Community College", "Baylor", "Belmont", "Belmont Abbey", "Beloit", "Bemidji State", "Benedict", "Bethel (TN)", "Binghamton", "Biola", "Blinn", "Bloomfield", "Bloomsburg", "Bluefield", "Boise State", "Boston College", "Boston University", "Bowie State", "Bowling Green", "Bradley", "Brevard Community College", "Brewton-Parker", "Bridgeport", "Brigham Young", "Brigham Young-Hawaii", "Brooklyn", "Brown", "Bryant", "Bucknell", "Buffalo", "Buffalo State", "Butler", "Butler Community College", "C.W. Post", "California", "California (PA)", "California-Berkeley", "California-Davis", "California-Irvine", "California-Los Angeles", "California-Riverside", "California-Santa Barbara", "Cal State-Bakersfield", "Cal State-Dominguez Hills", "Cal State-Fullerton", "Cal State-Los Angeles", "Cal State-Northridge", "Cal State-Poly Pomona", "Cal State-San Bernardino", "Campbell", "Campbellsville", "Canisius", "Case Western", "Catholic", "Centenary (LA)", "Central Arkansas", "Central Connecticut State", "Central Florida", "Central Michigan", "Central Missouri", "Central Oklahoma", "Central State (OH)", "Central Washington", "Charleston (WV)", "Cheyney", "Chicago State", "Christopher Newport", "Cincinnati", "City College of New York", "Claflin", "Clark Atlanta", "Clayton State", "Clemson", "Cleveland State", "Colgate", "College of Charleston", "College of New Jersey", "Colorado", "Colorado Christian", "Colorado State", "Colorado State-Pueblo", "Columbia", "Columbus State", "Concordia", "Concordia-Irvine", "Connecticut", "Coppin State", "Cornell", "Corpus Christi", "Creighton", "Culver-Stockton", "Dakota Wesleyan", "Dartmouth", "Davidson", "Davis & Elkins", "Dayton", "Delaware", "Delaware State", "Delta State", "Denver", "DePaul", "DePauw", "Detroit Mercy", "Dillard", "District of Columbia", "Drake", "Drexel", "Duke", "Duquesne", "East Carolina", "East Central", "Eastern Illinois", "Eastern Kentucky", "Eastern Michigan", "Eastern New Mexico", "Eastern Oklahoma State (Junior College)", "Eastern Washington", "East Tennessee State", "Eckerd", "Elizabeth City State", "Elon", "Evangel", "Evansville", "Fairfield", "Fairleigh Dickinson", "Fayetteville State", "Ferris State", "Findlay", "Florida", "Florida A&M", "Florida Atlantic", "Florida Community College", "Florida Gulf Coast", "Florida International", "Florida State", "Fordham", "Fort Valley State", "Franklin", "Fresno State", "Friends", "Furman", "Gannon", "Gardner-Webb", "George Mason", "Georgetown", "Georgetown College", "George Washington", "Georgia", "Georgia Southern", "Georgia State", "Georgia Tech", "Gonzaga", "Grambling", "Grand Canyon", "Green Bay", "Grinnell College", "Guilford", "Hamline", "Hampton", "Hardin-Simmons", "Hartford", "Harvard", "Hawaii", "High Point", "Hillsborough Community College", "Hillsdale", "Hofstra", "Holy Cross", "Holy Family", "Houston", "Houston Baptist", "Howard", "Humboldt State", "Huntington", "Idaho", "Idaho State", "Illinois", "Illinois-Chicago", "Illinois State", "Illinois Wesleyan", "Incarnate Word", "Indiana", "Indianapolis", "Indiana Purdue-Fort Wayne", "Indiana Purdue-Indianapolis", "Indiana State", "Indiana Tech", "Indian Hills Community College", "Iona", "Iowa", "Iowa State", "Jackson State", "Jacksonville", "Jacksonville State", "James Madison", "Johnson C. Smith", "Kansas", "Kansas State", "Kennesaw State", "Kent State", "Kentucky", "Kentucky State", "Kentucky Wesleyan", "Kenyon", "King's (NY)", "Lafayette", "Lamar", "La Salle", "Lawrence Tech", "Lebanon Valley", "Lee", "Lehigh", "Le Moyne", "Lewis", "Liberty", "Lincoln (MO)", "Lipscomb", "Long Beach State", "Long Island-Brooklyn", "Longwood", "Los Angeles Community College", "Louisiana-Lafayette", "Louisiana-Monroe", "Louisiana State", "Louisiana Tech", "Louisville", "Loyola-Chicago", "Loyola-Maryland", "Loyola-Marymount", "Maine", "Manhattan", "Marist", "Marquette", "Marshall", "Maryland", "Maryland-Eastern Shore", "Massachusetts", "Master's", "McNeese State", "Memphis", "Mercer", "Meridian Community College", "Merrimack", "Metro State", "Miami (FL)", "Miami (OH)", "Michigan", "Michigan State", "Middle Tennessee State", "Midland", "Midwestern State", "Miles", "Millersville", "Minnesota", "Minnesota-Duluth", "Minnesota State-Mankato", "Mississippi", "Mississippi Gulf Community College", "Mississippi State", "Mississippi Valley State", "Missouri", "Missouri-Kansas City", "Missouri State", "Missouri Western State", "Monmouth", "Montana", "Montana State", "Montevallo", "Morehead State", "Morehouse", "Morgan State", "Mountain State", "Mount St. Mary's", "Mount Union", "Mt. San Antonio", "Muhlenberg", "Murray State", "Navy", "Nebraska", "Nebraska-Kearney", "Nebraska-Omaha", "Nevada", "Nevada-Las Vegas", "Nevada-Reno", "New Jersey Institute of Technology", "New Mexico", "New Mexico Highlands", "New Mexico State", "New Mexico Tech", "New Orleans", "New York University", "Niagara", "Nicholls State", "Norfolk State", "North Carolina", "North Carolina A&T", "North Carolina-Asheville", "North Carolina Central", "North Carolina-Charlotte", "North Carolina-Greensboro", "North Carolina State", "North Carolina-Wilmington", "North Dakota", "North Dakota State", "Northeastern", "Northeastern State", "Northeast Mississippi Community College", "Northern Arizona", "Northern Colorado", "Northern Illinois", "Northern Iowa", "Northern Kentucky", "North Park", "North Texas", "Northwestern", "Northwestern Oklahoma", "Northwestern Oklahoma State", "Northwestern State", "Northwest Florida State", "Northwest Nazarene", "Northwood", "Notre Dame", "Oakland", "Ohio", "Ohio State", "Ohio Wesleyan", "Oklahoma", "Oklahoma Baptist", "Oklahoma City", "Oklahoma Science and Arts", "Oklahoma State", "Oklahoma Wesleyan", "Old Dominion", "Oral Roberts", "Oregon", "Oregon State", "Ouachita Baptist", "Pacific", "Paine", "Penn State", "Pennsylvania", "Pennsylvania-Kutztown", "Pepperdine", "Pfeiffer", "Phillips", "Pikeville", "Pittsburgh", "Portland", "Portland State", "Potsdam", "Prairie View A&M", "Princeton", "Providence", "Puget Sound", "Purdue", "Queens (NY)", "Quincy", "Rhode Island", "Rice", "Richmond", "Rider", "Robert Morris (IL)", "Rochester (NY)", "Rockhurst", "Rutgers", "Sacramento State", "Sacred Heart", "Saginaw Valley", "Saint Augustine's", "Saint Francis (PA)", "Saint Joseph's", "Saint Louis", "Saint Mary's (CA)", "Saint Mary's (MN)", "Saint Peter's", "Saint Rose", "Saint Vincent", "Salem International", "Sam Houston State", "San Diego", "San Diego State", "San Francisco", "San Jose State", "Santa Clara", "Scranton", "Seattle", "Seton Hall", "Seward County Community College", "Shaw", "Shippensburg", "Siena", "Slippery Rock", "South Alabama", "South Carolina", "South Carolina-Aiken", "South Carolina State", "South Carolina Upstate", "South Dakota", "South Dakota State", "Southeastern Illinois", "Southeastern Louisiana", "Southeastern Oklahoma State", "Southeast Missouri State", "Southern", "Southern California", "Southern Illinois", "Southern Methodist", "Southern Mississippi", "Southern Nazarene", "Southern Utah", "South Florida", "Southwest Baptist", "Springfield", "St. Ambrose", "St. Anselm", "St. Bonaventure", "St. Cloud State", "St. Francis Brooklyn", "St. John's (NY)", "St. Mary's (CA)", "St. Mary's (TX)", "St. Peter's", "St. Thomas (FL)", "Stanford", "Stephen F. Austin", "Stetson", "Stony Brook", "Syracuse", "Tampa", "Tarleton State", "Temple", "Tennessee", "Tennessee-Chattanooga", "Tennessee-Martin", "Tennessee State", "Tennessee Tech", "Texas", "Texas A&M", "Texas A&M-Commerce", "Texas A&M-Corpus Christi", "Texas-Arlington", "Texas Christian", "Texas-El Paso", "Texas-Pan American", "Texas-San Antonio", "Texas Southern", "Texas State", "Texas Tech", "Texas Wesleyan", "Thomas More", "Toledo", "Towson", "Trinity Valley Community College", "Troy State", "Truman State", "Tulane", "Tulsa", "Tuskegee", "UCLA", "Utah", "Utah State", "Utah Valley", "Valdosta State", "Valparaiso", "Vanderbilt", "Venezuela", "Vermont", "Villanova", "Virginia", "Virginia Commonwealth", "Virginia Military Institute", "Virginia Tech", "Virginia Union", "Voorhees", "Vorhees", "Wake Forest", "Walsh", "Washington", "Washington & Jefferson", "Washington State", "Wayne State (MI)", "Weber State", "Western Carolina", "Western Illinois", "Western Kentucky", "Western Michigan", "Western Washington", "West Florida", "West Georgia", "Westminster (PA)", "West Texas A&M", "West Virginia", "West Virginia State", "West Virginia Tech", "West Virginia Wesleyan", "Wheaton (IL)", "Whitworth", "Wichita State", "Wilberforce", "William & Mary", "William Jessup", "William Paterson", "William Penn", "Wingate", "Winona State", "Winston-Salem State", "Winthrop (SC)", "Wisconsin", "Wisconsin-Eau Claire", "Wisconsin-Green Bay", "Wisconsin-Milwaukee", "Wisconsin-Parkside", "Wisconsin-River Falls", "Wisconsin-Stevens Point", "Wisconsin-Whitewater", "Wofford", "Wooster", "Wright State", "Wyoming", "Xavier", "Xavier (LA)", "Yale", "Yonsei (KOR)", "Youngstown State"];
            for (var i in colleges) {
                arr.push({
                    val: colleges[i],
                    text: colleges[i]
                })
            }
            return arr
        }()
    },
    Country: {
        name: "Country",
        label: "Country",
        "default": "",
        type: "select",
        desc: "",
        options: function() {
            var arr = [{
                val: "",
                text: "All Countries"
            }];
            var countries = ["International", "Angola", "Argentina", "Australia", "Belize", "Boznia & Herzegovina", "Brazil", "Cameroon", "Canada", "China", "Congo", "Croatia", "Czech Republic", "Democratic Republic of Congo", "Dominican Republic", "England", "Finland", "France", "Georgia", "Germany", "Great Britain", "Greece", "Haiti", "Iran", "Ireland", "Israel", "Italy", "Jamaica", "Latvia", "Lithuania", "Macedonia", "Mali", "Mexico", "Montenegro", "Netherlands", "New Zealand", "Nigeria", "Panama", "Poland", "Puerto Rico", "Russia", "Scotland", "Senegal", "Serbia", "Serbia and Montenegro", "Slovenia", "South Korea", "Spain", "St. Vincent & Grenadines", "Sudan", "Sudan (UK)", "Sweden", "Switzerland", "Tanzania", "Turkey", "U.S. Virgin Islands", "Ukraine", "Uruguay", "USA", "USSR", "Venezuela", "Yugoslavia"];
            for (var i in countries) {
                arr.push({
                    val: countries[i],
                    text: countries[i]
                })
            }
            return arr
        }()
    },
    Height: {
        name: "Height",
        label: "Height",
        "default": "",
        type: "select",
        desc: "",
        options: [{
            val: "",
            text: "All Heights"
        }, {
            val: "LT 6-0",
            text: "< 6-0"
        }, {
            val: "GT 6-0",
            text: "> 6-0"
        }, {
            val: "LT 6-4",
            text: "< 6-4"
        }, {
            val: "GT 6-4",
            text: "> 6-4"
        }, {
            val: "LT 6-7",
            text: "< 6-7"
        }, {
            val: "GT 6-7",
            text: "> 6-7"
        }, {
            val: "LT 6-10",
            text: "< 6-10"
        }, {
            val: "GT 6-10",
            text: "> 6-10"
        }, {
            val: "LT 7-0",
            text: "< 7-0"
        }, {
            val: "GT 7-0",
            text: "> 7-0"
        }]
    },
    Weight: {
        name: "Weight",
        label: "Weight",
        "default": "",
        type: "select",
        desc: "",
        options: [{
            val: "",
            text: "All Weights"
        }, {
            val: "LT 200",
            text: "< 200"
        }, {
            val: "GT 200",
            text: "> 200"
        }, {
            val: "LT 225",
            text: "< 225"
        }, {
            val: "GT 225",
            text: "> 225"
        }, {
            val: "LT 250",
            text: "< 250"
        }, {
            val: "GT 250",
            text: "> 250"
        }, {
            val: "LT 275",
            text: "< 275"
        }, {
            val: "GT 275",
            text: "> 275"
        }, {
            val: "LT 300",
            text: "< 300"
        }, {
            val: "GT 300",
            text: "> 300"
        }]
    },
    DefenseCategory: {
        name: "DefenseCategory",
        label: "Defense Category",
        "default": "Overall",
        type: "select",
        desc: "",
        options: [{
            val: "Overall",
            text: "Overall"
        }, {
            val: "3 Pointers",
            text: "3 Pointers"
        }, {
            val: "2 Pointers",
            text: "2 Pointers"
        }, {
            val: "Less Than 6Ft",
            text: "Less Than 6Ft"
        }, {
            val: "Less Than 10Ft",
            text: "Less Than 10Ft"
        }, {
            val: "Less Than 10Ft",
            text: "Less Than 10Ft"
        }, {
            val: "Greater Than 15Ft",
            text: "Greater Than 15Ft"
        }]
    }
});
/***
 * NO 11/8 NO NO NO NO NONO NO NON ONO NO WHY NO NO NO NO NO NO NO  
 */
stats.constant("TAB_DEFINITIONS", {
    playtype: {
        transition: {
            summaryDataKey: {
                player: "SynergyTop5PlayersTransition",
                team: "SynergyTop5TeamsTransition"
            },
            url: "transition",
            shortHeading: "Transition",
            heading: "Transition",
            definition: "When the possession-ending event comes before the defense sets following a possession change and a transition from one end of the court to the other."
        },
        isolation: {
            summaryDataKey: {
                player: "SynergyTop5PlayersIsolation",
                team: "SynergyTop5TeamsIsolation"
            },
            url: "isolation",
            shortHeading: "Isolation",
            heading: "Isolation",
            definition: "When the possession-ending event is created during a “one-on-one” matchup. The defender needs to be set and have all of his defensive options at the initiation of the play."
        },
        ballHandler: {
            summaryDataKey: {
                player: "SynergyTop5PlayersPRBallHandler",
                team: "SynergyTop5TeamsPRBallHandler"
            },
            url: "ball-handler",
            shortHeading: "Ball Handler",
            heading: "Pick & Roll: Ball Handler",
            definition: "A screen is set on the ball handler’s defender out on the perimeter. The offensive player can use the screen or go away from it and as long as the play yields a possession-ending event, it is tagged as a pick and roll."
        },
        rollMan: {
            summaryDataKey: {
                player: "SynergyTop5PlayersPRRollMan",
                team: "SynergyTop5TeamsPRRollMan"
            },
            url: "roll-man",
            shortHeading: "Roll Man",
            heading: "Pick & Roll: Roll Man",
            definition: "When a screen is set for the ball handler, and the screen setter then receives the ball for a possession-ending event. This action can include: pick and rolls, pick and pops and the screener slipping the pick."
        },
        postUp: {
            summaryDataKey: {
                player: "SynergyTop5PlayersPostup",
                team: "SynergyTop5TeamsPostup"
            },
            url: "post-up",
            shortHeading: "Post-Up",
            heading: "Post-Up",
            definition: "When an offensive player receives the ball with their back to the basket and is less than 15' from the rim when the possession-ending event occurs."
        },
        spotUp: {
            summaryDataKey: {
                player: "SynergyTop5PlayersSpotup",
                team: "SynergyTop5TeamsSpotup"
            },
            url: "spot-up",
            shortHeading: "Spot-Up",
            heading: "Spot-Up",
            definition: "When the possession-ending event is a catch-and-shoot or catch-and-drive play."
        },
        handOff: {
            summaryDataKey: {
                player: "SynergyTop5PlayersHandoff",
                team: "SynergyTop5TeamsHandoff"
            },
            url: "hand-off",
            shortHeading: "Hand-Off",
            heading: "Hand-Off",
            definition: "The screen setter starts with the ball and hands the ball to a player cutting close by. This enables the player handing the ball off to effectively screen off a defender creating space for the player receiving the ball."
        },
        cut: {
            summaryDataKey: {
                player: "SynergyTop5PlayersCut",
                team: "SynergyTop5TeamsCut"
            },
            url: "cut",
            shortHeading: "Cut",
            heading: "Cut",
            definition: "An interior play where the finisher catches a pass while moving toward, parallel to or slightly away from the basket. This will include back screen and flash cuts as well as times when the player is left open near the basket."
        },
        offScreen: {
            summaryDataKey: {
                player: "SynergyTop5PlayersOffScreen",
                team: "SynergyTop5TeamsOffScreen"
            },
            url: "off-screen",
            shortHeading: "Off Screen",
            heading: "Off Screen",
            definition: "Identifies players coming off of screens (typically downs screens) going away from the basket toward the perimeter. This includes curl, fades, and coming off straight."
        },
        putbacks: {
            summaryDataKey: {
                player: "SynergyTop5PlayersOffRebound",
                team: "SynergyTop5TeamsOffRebound"
            },
            url: "putbacks",
            shortHeading: "Putbacks",
            heading: "Offensive Rebound (putbacks)",
            definition: "When the rebounder attempts to score before passing the ball or establishing themselves in another play type."
        },
        misc: {
            summaryDataKey: {
                player: "SynergyTop5PlayersMisc",
                team: "SynergyTop5TeamsMisc"
            },
            url: "misc",
            shortHeading: "Misc",
            heading: "Miscellaneous",
            definition: "When the action doesn't fit any of the other play types. This includes, but is not limited to, last second full court shots, fouls in the backcourt, or errant passes not out of a different play type, etc."
        }
    }
});
(function() {
    stats.constant("TEAMS", getTeams());

    function getTeams() {
        var conf = {
            e: "Eastern",
            w: "Western"
        };
        var div = {
            at: "Atlantic",
            ce: "Central",
            nw: "Northwest",
            pa: "Pacific",
            se: "Southeast",
            sw: "Southwest"
        };
        var array = [
            ["1610612737", "ATL", conf.e, div.se, 0, "hawks", "Atlanta", "Hawks", ["E13A3E", "C4D600", "061922"]],
            ["1610612738", "BOS", conf.e, div.at, 0, "celtics", "Boston", "Celtics", ["008348", "061922", "BB9753"]],
            ["1610612751", "BKN", conf.e, div.at, 0, "nets", "Brooklyn", "Nets", ["061922", "FFFFFF"]],
            ["1610612766", "CHA", conf.e, div.se, 0, "hornets", "Charlotte", "Hornets", ["1D1160", "008CA8", "A1A1A4"]],
            ["1610612741", "CHI", conf.e, div.ce, 0, "bulls", "Chicago", "Bulls", ["CE1141", "061922"]],
            ["1610612739", "CLE", conf.e, div.ce, 0, "cavaliers", "Cleveland", "Cavaliers", ["860038", "FDBB30", "002D62"]],
            ["1610612742", "DAL", conf.w, div.sw, 0, "mavericks", "Dallas", "Mavericks", ["007DC5", "C4CED3", "061922"]],
            ["1610612743", "DEN", conf.w, div.nw, 0, "nuggets", "Denver", "Nuggets", ["4D90CD", "FDB927"]],
            ["1610612765", "DET", conf.e, div.ce, 0, "pistons", "Detroit", "Pistons", ["ED174C", "006BB6", "0F586C"]],
            ["1610612744", "GSW", conf.w, div.pa, 0, "warriors", "Golden State", "Warriors", ["FDB927", "006BB6"]],
            ["1610612745", "HOU", conf.w, div.sw, 0, "rockets", "Houston", "Rockets", ["CE1141", "C4CED3", "061922"]],
            ["1610612754", "IND", conf.e, div.ce, 0, "pacers", "Indiana", "Pacers", ["FFC633", "00275D", "BEC0C2"]],
            ["1610612746", "LAC", conf.w, div.pa, 0, "clippers", "Los Angeles", "Clippers", ["ED174C", "006BB6", "061922"]],
            ["1610612747", "LAL", conf.w, div.pa, 0, "lakers", "Los Angeles", "Lakers", ["FDB927", "552582", "061922"]],
            ["1610612763", "MEM", conf.w, div.sw, 0, "grizzlies", "Memphis", "Grizzlies", ["7399C6", "BED4E9", "FDB927", "0F586C"]],
            ["1610612748", "MIA", conf.e, div.se, 0, "heat", "Miami", "Heat", ["98002E", "F9A01B", "061922"]],
            ["1610612749", "MIL", conf.e, div.ce, 0, "bucks", "Milwaukee", "Bucks", ["00471B", "F0EBD2", "061922", "007DC5"]],
            ["1610612750", "MIN", conf.w, div.nw, 0, "timberwolves", "Minnesota", "Timberwolves", ["005083", "00A94F", "C4CED3", "061922"]],
            ["1610612740", "NOP", conf.w, div.sw, 0, "pelicans", "New Orleans", "Pelicans", ["002B5C", "E31837", "B4975A"]],
            ["1610612752", "NYK", conf.e, div.at, 0, "knicks", "New York", "Knicks", ["006BB6", "F58426", "BEC0C2"]],
            ["1610612760", "OKC", conf.w, div.nw, 0, "thunder", "Oklahoma City", "Thunder", ["007DC3", "F05133", "FDBB30", "002D62"]],
            ["1610612753", "ORL", conf.e, div.se, 0, "magic", "Orlando", "Magic", ["007DC5", "C4CED3", "061922"]],
            ["1610612755", "PHI", conf.e, div.at, 0, "sixers", "Philadelphia", "Sixers", ["ED174C", "006BB6", "002B5C"]],
            ["1610612756", "PHX", conf.w, div.pa, 0, "suns", "Phoenix", "Suns", ["E56020", "1D1160", "63717A", "F9A01B"]],
            ["1610612757", "POR", conf.w, div.nw, 0, "blazers", "Portland", "Trail Blazers", ["E03A3E", "BAC3C9", "061922"]],
            ["1610612758", "SAC", conf.w, div.pa, 0, "kings", "Sacramento", "Kings", ["724C9F", "8E9090", "061922"]],
            ["1610612759", "SAS", conf.w, div.sw, 0, "spurs", "San Antonio", "Spurs", ["BAC3C9", "061922"]],
            ["1610612761", "TOR", conf.e, div.at, 0, "raptors", "Toronto", "Raptors", ["CE1141", "061922", "A1A1A4"]],
            ["1610612762", "UTA", conf.w, div.nw, 0, "jazz", "Utah", "Jazz", ["002B5C", "F9A01B", "00471B", "BEC0C2"]],
            ["1610612764", "WAS", conf.e, div.se, 0, "wizards", "Washington", "Wizards", ["002B5C", "E31837", "C4CED4"]],
            ["1610616833", "EST", conf.e, div.se, 1, "east", "East", "All-Star East", ["00559A"]],
            ["1610616834", "WST", conf.w, div.sw, 1, "est", "West", "All-Star West", ["EC003D"]]
        ];
        var teamsObject = array.map(function(row) {
            var obj = {
                id: row[0],
                abbr: row[1],
                displayAbbr: row[1],
                conference: row[2],
                displayConference: row[2],
                division: row[3],
                special: !!row[4],
                code: row[5],
                city: row[6],
                name: row[7],
                color: row[8][0],
                colors: row[8]
            };
            return obj
        });
        return teamsObject
    }
})();
(function() {
    // NO20160125 - comment out player and team tracking sections
    stats.config(["$locationProvider", "$routeProvider", function($locationProvider, $routeProvider) {
        $locationProvider.html5Mode(false);
        $locationProvider.hashPrefix("!");
        var routes = [
            ["/game/", "/:GameID/", "game/boxscore.html", "boxscore"],
            ["/game/", "/:GameID/advanced/", "game/advanced.html", "advanced"],
            ["/game/", "/:GameID/fourfactors/", "game/fourfactors.html", "fourfactors"],
            ["/game/", "/:GameID/misc/", "game/misc.html", "misc"],
            ["/game/", "/:GameID/scoring/", "game/scoring.html", "scoring"],
            ["/game/", "/:GameID/usage/", "game/usage.html", "usage"],
            ["/game/", "/:GameID/playbyplay/", "game/playbyplay.html", "playbyplay"],
            ["/game/", "/:GameID/playertracking/", "game/playertracking.html", "playertracking"],
            ["/game/", "/:GameID/gamecharts/", "game/gamecharts.html", "gamecharts"],
            ["/team/", "/:TeamID/", "team/profile.html", "profile"],
            ["/team/", "/:TeamID/stats/", "team/statsTraditional.html", "statsTraditional"],
            ["/team/", "/:TeamID/stats/advanced/", "team/statsAdvanced.html", "statsAdvanced"],
            ["/team/", "/:TeamID/stats/fourfactors/", "team/statsFourFactors.html", "statsFourFactors"],
            ["/team/", "/:TeamID/stats/misc/", "team/statsMisc.html", "statsMisc"],
            ["/team/", "/:TeamID/stats/scoring/", "team/statsScoring.html", "statsScoring"],
            ["/team/", "/:TeamID/stats/opponent/", "team/statsOpponent.html", "statsOpponent"],
            ["/team/", "/:TeamID/stats/shooting/", "team/statsShooting.html", "statsShooting"],
            ["/team/", "/:TeamID/lineups/", "team/lineupsTraditional.html", "lineupsTraditional"],
            ["/team/", "/:TeamID/lineups/advanced/", "team/lineupsAdvanced.html", "lineupsAdvanced"],
            ["/team/", "/:TeamID/lineups/fourfactors/", "team/lineupsFourFactors.html", "lineupsFourFactors"],
            ["/team/", "/:TeamID/lineups/misc/", "team/lineupsMisc.html", "lineupsMisc"],
            ["/team/", "/:TeamID/lineups/scoring/", "team/lineupsScoring.html", "lineupsScoring"],
            ["/team/", "/:TeamID/lineups/opponent/", "team/lineupsOpponent.html", "lineupsOpponent"],
            ["/team/", "/:TeamID/players/", "team/playersTraditional.html", "playersTraditional"],
            ["/team/", "/:TeamID/players/advanced/", "team/playersAdvanced.html", "playersAdvanced"],
            ["/team/", "/:TeamID/players/misc/", "team/playersMisc.html", "playersMisc"],
            ["/team/", "/:TeamID/players/scoring/", "team/playersScoring.html", "playersScoring"],
            ["/team/", "/:TeamID/players/usage/", "team/playersUsage.html", "playersUsage"],
            ["/team/", "/:TeamID/onoffcourt/", "team/onoffcourtTraditional.html", "onoffcourtTraditional"],
            ["/team/", "/:TeamID/onoffcourt/advanced/", "team/onoffcourtAdvanced.html", "onoffcourtAdvanced"],
            ["/team/", "/:TeamID/onoffcourt/fourfactors/", "team/onoffcourtFourFactors.html", "onoffcourtFourFactors"],
            ["/team/", "/:TeamID/onoffcourt/misc/", "team/onoffcourtMisc.html", "onoffcourtMisc"],
            ["/team/", "/:TeamID/onoffcourt/scoring/", "team/onoffcourtScoring.html", "onoffcourtScoring"],
            ["/team/", "/:TeamID/onoffcourt/opponent/", "team/onoffcourtOpponent.html", "onoffcourtOpponent"],
            ["/team/", "/:TeamID/onoffcourt/summary/", "team/onoffcourtSummary.html", "onoffcourtSummary"],
            ["/team/", "/:TeamID/gamelogs/", "team/gamelogs.html", "gamelogs"],
            ["/team/", "/:TeamID/seasons/", "team/seasons.html", "seasons"],
            ["/team/", "/:TeamID/yearoveryear/", "team/yearoveryear.html", "yearoveryear"],
            ["/team/", "/:TeamID/tracking/shots/", "team/trackingDashShots.html", "trackingdashshots"],
            ["/team/", "/:TeamID/tracking/rebounds/", "team/trackingDashRebounds.html", "trackingdashrebounds"],
            ["/team/", "/:TeamID/tracking/passes/", "team/trackingDashPasses.html", "trackingdashpasses"],
            ["/player/", "/:PlayerID/video/", "player/video.html", "video"],
            ["/player/", "/:PlayerID/", "player/profile.html", "profile"],
            ["/player/", "/:PlayerID/career/", "player/career.html", "career"],
            ["/player/", "/:PlayerID/fantasy", "player/fantasy.html", "fantasy"],
            ["/player/", "/:PlayerID/vs/", "player/vsPlayerBase.html", "compare"],
            ["/player/", "/:PlayerID/vs/:VsPlayer/:MultiPlayer", "player/vsPlayerBase.html", "compare"],
            ["/player/", "/:PlayerID/gamelogs/", "player/game-logs.html", "gamelogs"],
            // NO20160125 - remove playertracking logs
            // ["/player/","/:PlayerID/tracking/shotslogs/","player/trackingLogsShots.html","trackinglogsshots"],
            // ["/player/","/:PlayerID/tracking/reboundslogs/","player/trackingLogsRebounds.html","trackinglogsrebounds"],
            ["/player/", "/:PlayerID/stats/", "player/statsTraditional.html", "statsTraditional"],
            ["/player/", "/:PlayerID/stats/advanced/", "player/statsAdvanced.html", "statsAdvanced"],
            ["/player/", "/:PlayerID/stats/misc/", "player/statsMisc.html", "statsMisc"],
            ["/player/", "/:PlayerID/stats/scoring/", "player/statsScoring.html", "statsScoring"],
            ["/player/", "/:PlayerID/stats/shooting/", "player/statsShooting.html", "statsShooting"],
            ["/player/", "/:PlayerID/stats/usage/", "player/statsUsage.html", "statsUsage"],
            ["/player/", "/:PlayerID/tracking/shots/", "player/trackingShots.html", "trackingShots"],
            ["/player/", "/:PlayerID/tracking/rebounds/", "player/trackingRebounds.html", "trackingRebounds"],
            ["/player/", "/:PlayerID/tracking/passes/", "player/trackingPasses.html", "trackingPasses"],
            ["/player/", "/:PlayerID/tracking/defense/", "player/trackingDefense.html", "trackingDefense"],
            ["/league/team/defense/", "/", "league/team/defense/overall.html"],
            ["/league/team/defense/", "/3pt/", "league/team/defense/3pt.html"],
            ["/league/team/defense/", "/2pt/", "league/team/defense/2pt.html"],
            ["/league/team/defense/", "/lt6/", "league/team/defense/lt6.html"],
            ["/league/team/defense/", "/lt10/", "league/team/defense/lt10.html"],
            ["/league/team/defense/", "/gt15/", "league/team/defense/gt15.html"],
            ["/league/team/shots/", "/", "league/team/shots/league-team-shots.html"],
            ["/league/team/", "/", "league/team/generalTraditional.html", "generalTraditional"],
            ["/league/team/", "/advanced/", "league/team/generalAdvanced.html", "generalAdvanced"],
            ["/league/team/", "/fourfactors/", "league/team/generalFourFactors.html", "generalFourFactors"],
            ["/league/team/", "/misc/", "league/team/generalMisc.html", "generalMisc"],
            ["/league/team/", "/scoring/", "league/team/generalScoring.html", "generalScoring"],
            ["/league/team/", "/opponent/", "league/team/generalOpponent.html", "generalOpponent"],
            ["/league/team/", "/clutch/", "league/team/clutchTraditional.html", "clutchTraditional"],
            ["/league/team/", "/clutch/advanced/", "league/team/clutchAdvanced.html", "clutchAdvanced"],
            ["/league/team/", "/clutch/fourfactors/", "league/team/clutchFourFactors.html", "clutchFourFactors"],
            ["/league/team/", "/clutch/misc/", "league/team/clutchMisc.html", "clutchMisc"],
            ["/league/team/", "/clutch/scoring/", "league/team/clutchScoring.html", "clutchScoring"],
            ["/league/team/", "/clutch/opponent/", "league/team/clutchOpponent.html", "clutchOpponent"],
            ["/league/team/", "/shooting/", "league/team/shooting.html", "shooting"],
            ["/league/team/", "/oppshooting/", "league/team/oppShooting.html", "oppshooting"],
            ["/league/team/", "/gamelogs/", "league/team/gamelogs/league-team-game-logs.html", "gamelogs"],
            ["/league/allstar/", "/", "league/allstar/generalTraditional.html", "generalTraditional"],
            ["/league/allstar/", "/advanced/", "league/allstar/generalAdvanced.html", "generalAdvanced"],
            ["/league/allstar/", "/fourfactors/", "league/allstar/generalFourFactors.html", "generalFourFactors"],
            ["/league/allstar/", "/misc/", "league/allstar/generalMisc.html", "generalMisc"],
            ["/league/allstar/", "/scoring/", "league/allstar/generalScoring.html", "generalScoring"],
            ["/league/allstar/", "/opponent/", "league/allstar/generalOpponent.html", "generalOpponent"],
            ["/league/allstar/", "/clutch/", "league/allstar/clutchTraditional.html", "clutchTraditional"],
            ["/league/allstar/", "/clutch/advanced/", "league/allstar/clutchAdvanced.html", "clutchAdvanced"],
            ["/league/allstar/", "/clutch/fourfactors/", "league/allstar/clutchFourFactors.html", "clutchFourFactors"],
            ["/league/allstar/", "/clutch/misc/", "league/allstar/clutchMisc.html", "clutchMisc"],
            ["/league/allstar/", "/clutch/scoring/", "league/allstar/clutchScoring.html", "clutchScoring"],
            ["/league/allstar/", "/clutch/opponent/", "league/allstar/clutchOpponent.html", "clutchOpponent"],
            ["/league/allstar/", "/shooting/", "league/allstar/shooting.html", "shooting"],
            ["/league/allstar/", "/oppshooting/", "league/allstar/oppShooting.html", "oppshooting"],
            ["/league/player/defense/", "/", "league/player/defense/overall.html"],
            ["/league/player/defense/", "/3pt/", "league/player/defense/3pt.html"],
            ["/league/player/defense/", "/2pt/", "league/player/defense/2pt.html"],
            ["/league/player/defense/", "/lt6/", "league/player/defense/lt6.html"],
            ["/league/player/defense/", "/lt10/", "league/player/defense/lt10.html"],
            ["/league/player/defense/", "/gt15/", "league/player/defense/gt15.html"],
            ["/league/player/shots/", "/", "league/player/shots/league-player-shots.html"],
            ["/league/player/", "/", "league/player/generalTraditional.html", "generalTraditional"],
            ["/league/player/", "/advanced/", "league/player/generalAdvanced.html", "generalAdvanced"],
            ["/league/player/", "/misc/", "league/player/generalMisc.html", "generalMisc"],
            ["/league/player/", "/scoring/", "league/player/generalScoring.html", "generalScoring"],
            ["/league/player/", "/usage/", "league/player/generalUsage.html", "generalUsage"],
            ["/league/player/", "/clutch/", "league/player/clutchTraditional.html", "clutchTraditional"],
            ["/league/player/", "/clutch/advanced/", "league/player/clutchAdvanced.html", "clutchAdvanced"],
            ["/league/player/", "/clutch/misc/", "league/player/clutchMisc.html", "clutchMisc"],
            ["/league/player/", "/clutch/scoring/", "league/player/clutchScoring.html", "clutchScoring"],
            ["/league/player/", "/clutch/usage/", "league/player/clutchUsage.html", "clutchUsage"],
            ["/league/player/", "/shooting/", "league/player/shooting.html", "shooting"],
            ["/league/player/", "/oppshooting/", "league/player/oppShooting.html", "oppshooting"],
            ["/league/player/", "/tracking/shots/", "league/player/tracking/league-player-tracking-shots.html", "trackingShots"],
            ["/league/player/", "/bio/", "league/player/bio/league-player-bio.html", "playerBio"],
            ["/league/player/", "/gamelogs/", "league/player/gamelogs/league-player-game-logs.html", "gamelogs"],
            ["/league/lineups/", "/", "league/lineups/traditional.html", "traditional"],
            ["/league/lineups/", "/advanced/", "league/lineups/advanced.html", "advanced"],
            ["/league/lineups/", "/fourfactors/", "league/lineups/fourfactors.html", "fourfactors"],
            ["/league/lineups/", "/misc/", "league/lineups/misc.html", "misc"],
            ["/league/lineups/", "/scoring/", "league/lineups/scoring.html", "scoring"],
            ["/league/lineups/", "/opponent/", "league/lineups/opponent.html", "opponent"],
            ["/draftcombine/", "/", "draftcombine/summary.html", "summary"],
            ["/draftcombine/", "/spotup/", "draftcombine/spotup.html", "spotup"],
            ["/draftcombine/", "/nonstationary/", "draftcombine/nonstationary.html", "nonstationary"],
            ["/draftcombine/", "/agility/", "draftcombine/agility.html", "agility"],
            ["/draftcombine/", "/anthro/", "draftcombine/anthro.html", "summary"],
            ["/draftcombine/", "/scrimmages/thursday/", "draftcombine/scrimmages-thursday.html", "thursday"],
            ["/draftcombine/", "/scrimmages/friday/", "draftcombine/scrimmages-friday.html", "friday"],
            ["/drafthistory/", "/", "drafthistory/summary.html", "summary"],
            ["/tracking/", "/", "tracking/catchshoot.html", "catchshoot"],
            ["/tracking/", "/:Section/", "tracking/catchshoot.html", "catchshoot"],
            ["/tracking/", "/:Section/catchshoot/", "tracking/catchshoot.html", "catchshoot"],
            ["/tracking/", "/:Section/defense/", "tracking/defense.html", "defense"],
            ["/tracking/", "/:Section/drives/", "tracking/drives.html", "drives"],
            ["/tracking/", "/:Section/passing/", "tracking/passing.html", "passing"],
            ["/tracking/", "/:Section/possessions/", "tracking/possessions.html", "possessions"],
            ["/tracking/", "/:Section/pullup/", "tracking/pullup.html", "pullup"],
            ["/tracking/", "/:Section/offensive-rebounding/", "tracking/offensive-rebounding.html", "offensive-rebounding"],
            ["/tracking/", "/:Section/defensive-rebounding/", "tracking/defensive-rebounding.html", "defensive-rebounding"],
            ["/tracking/", "/:Section/rebounding/", "tracking/rebounding.html", "rebounding"],
            ["/tracking/", "/:Section/shooting/", "tracking/shooting.html", "shooting"],
            ["/tracking/", "/:Section/speed/", "tracking/speed.html", "speed"],
            ["/tracking/", "/:Section/elbow/", "tracking/elbow.html", "elbow"],
            ["/tracking/", "/:Section/post/", "tracking/post.html", "post"],
            ["/tracking/", "/:Section/paint/", "tracking/paint.html", "paint"],
            ["/playtype/", "/", "playtype/summary.html", "summary"],
            ["/playtype/", "/transition/", "playtype/transition.html", "transition"],
            ["/playtype/", "/isolation/", "playtype/isolation.html", "transition"],
            ["/playtype/", "/ball-handler/", "playtype/ballHandler.html", "transition"],
            ["/playtype/", "/roll-man/", "playtype/rollMan.html", "transition"],
            ["/playtype/", "/post-up/", "playtype/postUp.html", "transition"],
            ["/playtype/", "/spot-up/", "playtype/spotUp.html", "transition"],
            ["/playtype/", "/hand-off/", "playtype/handOff.html", "transition"],
            ["/playtype/", "/cut/", "playtype/cut.html", "transition"],
            ["/playtype/", "/off-screen/", "playtype/offScreen.html", "transition"],
            ["/playtype/", "/putbacks/", "playtype/putbacks.html", "transition"],
            ["/playtype/", "/misc/", "playtype/misc.html", "transition"],
            ["/playlist/", "/cvp/", "overlay/cvp.html", "cvp"],
            ["/playlist/", "/movement/", "overlay/movement.html", "movement"],
            ["/vs/", "/", "vs/vsPlayerBase.html", "pvp"],
            ["/vs/", "/advanced", "vs/vsPlayerAdvanced.html", "advanced"],
            ["/vs/", "/misc", "vs/vsPlayerMisc.html", "misc"],
            ["/vs/", "/scoring", "vs/vsPlayerScoring.html", "scoring"],
            ["/vs/", "/fourfactors", "vs/vsTeamFourFactors.html", "shooting"],
            ["/vs/", "/opponent", "vs/vsTeamOpponent.html", "shooting"],
            ["/fantasycompare/", "/", "fantasycompare/fantasyComparePlayerBase.html", "pvp"],
            ["/fantasycompare/", "/advanced", "fantasycompare/fantasyComparePlayerAdvanced.html", "advanced"],
            ["/fantasycompare/", "/misc", "fantasycompare/fantasyComparePlayerMisc.html", "misc"],
            ["/fantasycompare/", "/scoring", "fantasycompare/fantasyComparePlayerScoring.html", "scoring"],
            ["/fantasycompare/", "/fourfactors", "fantasycompare/fantasyCompareTeamFourFactors.html", "shooting"],
            ["/fantasycompare/", "/opponent", "fantasycompare/fantasyCompareOpponent.html", "shooting"],
            ["/fantasycompare/", "/usage", "fantasycompare/fantasyCompareUsage.html", "usage"]
        ];
        // filter routes for current path
        var sectionRoutes = routes.filter(function(r) {
            return r[0] === window.location.pathname
        });
        // create angular route
        sectionRoutes.forEach(function(r) {
            $routeProvider.when(r[1], {
                templateUrl: "/templates/" + r[2],
                reloadOnSearch: false,
                page: r[3] || ""
            })
        })
    }])
})();
(function() {
    stats.service("GamePredictorService", GamePredictorService);
    GamePredictorService.$inject = ["$q", "$filter", "StatsRequest", "TEAMS"];

    function GamePredictorService($q, $filter, StatsRequest, TEAMS) {
        function parse(data) {
            var dt = data.PredictedValues.datatable;
            dt.forEach(function(n) {
                var t = $filter("filter")(TEAMS, {
                    abbr: n.PLAYER_LAST_TEAM_ABBREVIATION
                })[0];
                n.color = t.color;
                n.tid = t.id
            });
            var obj = {
                PredictedValues: data.PredictedValues.datatable,
                Players: {
                    East: $filter("filter")(data.PredictedValues.datatable, {
                        TEAM_CONFERENCE: "East"
                    }),
                    West: $filter("filter")(data.PredictedValues.datatable, {
                        TEAM_CONFERENCE: "West"
                    })
                }
            };
            return obj
        }

        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("allstarGamePredictor", "", params).then(function(request) {
                var data = request.sets;
                var datasets = parse(data);
                deferred.resolve(datasets)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("DraftCombineAgilityService", DraftCombineAgilityService);
    DraftCombineAgilityService.$inject = ["$q", "StatsRequest"];

    function DraftCombineAgilityService($q, StatsRequest) {
        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("draftCombineAgility", "", params).then(function() {
                var datasets = StatsRequest.getResults();
                deferred.resolve(datasets)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("DraftCombineAnthroService", DraftCombineAnthroService);
    DraftCombineAnthroService.$inject = ["$q", "StatsRequest"];

    function DraftCombineAnthroService($q, StatsRequest) {
        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("draftCombineAnthro", "", params).then(function() {
                var datasets = StatsRequest.getResults();
                deferred.resolve(datasets)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("DraftCombineNonStationaryService", DraftCombineNonStationaryService);
    DraftCombineNonStationaryService.$inject = ["$q", "StatsRequest"];

    function DraftCombineNonStationaryService($q, StatsRequest) {
        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("draftCombineNonstationary", "", params).then(function() {
                var datasets = StatsRequest.getResults();
                deferred.resolve(datasets)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("DraftCombineSpotUpService", DraftCombineSpotUpService);
    DraftCombineSpotUpService.$inject = ["$q", "StatsRequest"];

    function DraftCombineSpotUpService($q, StatsRequest) {
        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("draftCombineSpotup", "", params).then(function() {
                var datasets = StatsRequest.getResults();
                deferred.resolve(datasets)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("DraftHistoryService", DraftHistoryService);
    DraftHistoryService.$inject = ["$q", "$filter", "StatsRequest"];

    function DraftHistoryService($q, $filter, StatsRequest) {
        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("draftHistory", "", params).then(function() {
                var datasets = StatsRequest.getData();
                deferred.resolve(datasets)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})(); /*global angular, console */
//kg
stats.service("FantasyCompareService", ["$q", "$filter", "SEASONS", "StatsRequest", function($q, $filter, SEASONS, StatsRequest) {
    "use strict";

    function makeDatasets(obj, datasets) {
        var i;
        for (i in datasets) {
            datasets[i].name = datasets[i].name.replace(/([A-Z]+)/g, ",$1");
            datasets[i].name = datasets[i].name.replace(/,/g, " ")
        }
        obj.datasets = {
            OverallCompare: {},
            Individual: {}
        };
        for (i in datasets) {
            if (obj.datasets[i]) {
                obj.datasets[i] = datasets[i]
            }
        }
        obj.player = {
            a: datasets.OverallCompare.datatable[0],
            b: obj.compare.left.type == "team" ? datasets.vsPlayerOverall.datatable[0] : datasets.OverallCompare.datatable[1]
        }; /* NO - yuck until middle tier gets fixed */
        if (obj.datasets.Individual && obj.datasets.Individual.datatable.length > 0) {
            for (i in obj.datasets.Individual.datatable) {
                if (obj.datasets.Individual.datatable[i]["TM_TOV_PCT"]) {
                    obj.datasets.Individual.datatable[i]["TM_TOV_PCT"] = obj.datasets.Individual.datatable[i]["TM_TOV_PCT"] / 100
                }
            }
        }
        if (obj.datasets.OverallCompare && obj.datasets.OverallCompare.datatable.length > 0) {
            for (i in obj.datasets.OverallCompare.datatable) {
                if (obj.datasets.OverallCompare.datatable[i]["TM_TOV_PCT"]) {
                    obj.datasets.OverallCompare.datatable[i]["TM_TOV_PCT"] = obj.datasets.OverallCompare.datatable[i]["TM_TOV_PCT"] / 100
                }
            }
        } /* NO - end yuck */
        obj.isLoading = false
    }

    function getStats(obj) {
        var defer = $q.defer();
        obj.isLoading = true;
        obj.showGraph = true;
        StatsRequest.get("playerCompare", "", obj.params).then(function() {
            var datasets = StatsRequest.getData();
            makeDatasets(obj, datasets);
            obj.isLoading = false;
            defer.resolve()
        });
        return defer.promise
    }
    return {
        getStats: getStats
    }
}]);
(function() {
    stats.service("FantasyNewsService", FantasyNewsService);
    FantasyNewsService.$inject = ["$q", "$http"];

    function FantasyNewsService($q, $http) {
        function get(TeamID) {
            var deferred = $q.defer();
            var url;
            if (TeamID) {
                url = "/feeds/RotoWirePlayers-583598/" + TeamID + ".json"
            } else {
                url = "/feeds/RotoWirePlayers-583598/masterlist.json"
            }
            $http({
                method: "GET",
                url: url
            }).success(function(response) {
                var items = TeamID ? response.TeamRotowires : response.ListItems;
                deferred.resolve(items)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("FantasyWidgetService", FantasyWidgetService);
    FantasyWidgetService.$inject = ["$q", "$filter", "StatsRequest"];

    function FantasyWidgetService($q, $filter, StatsRequest) {
        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("fantasyWidget", "", params).then(function(response) {
                var data = response.sets;
                deferred.resolve(data)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
/*
 *
 * Boxscore Fanduel Stats Service
 *
 * http://stats.nba.com/stats/infographicfanduelplayer?GameID=0021400276
 *
 * endpoint: boxscoreFanduelStats
 *
 * @Params: GameID (number)
 *
 */
(function() {
    stats.service("BoxscoreFanduelStatsService", BoxscoreFanduelStatsService);
    BoxscoreFanduelStatsService.$inject = ["$filter", "$q", "StatsRequest"];

    function BoxscoreFanduelStatsService($filter, $q, StatsRequest, Teams) {
        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("boxscoreFanduelStats", "", params).then(function(data) {
                deferred.resolve(data.sets)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
/*
 *
 * Boxscore Win Probability Service
 *
 * http://stats.nba.com/stats/winprobabilitypbp?GameID=0021401229&RunType=pbp+events
 *
 * endpoint: winprobabilitypbp
 *
 * Params:
 *  GameID: gameid
 *  RunType: "pbp events"|"each second"
 *
 */
(function() {
    stats.service("BoxscoreWinProbabilityService", BoxscoreWinProbabilityService);
    BoxscoreWinProbabilityService.$inject = ["$filter", "$q", "StatsRequest", "TEAMS"];

    function BoxscoreWinProbabilityService($filter, $q, StatsRequest, Teams) {
        function parse(data) {
            var rs = data.Table1 || data.GameInfo;
            var boxscore = rs.datatable[0];
            var vtm = $filter("filter")(Teams, {
                id: boxscore.VISITOR_TEAM_ID
            })[0];
            var htm = $filter("filter")(Teams, {
                id: boxscore.HOME_TEAM_ID
            })[0];
            var colors = $filter("TeamColorChooser")(htm, vtm);
            if (colors) {
                vtm.color = colors.vtm;
                htm.color = colors.htm
            }
            return {
                boxscore: boxscore,
                events: data.WinProbPBP.datatable,
                colors: colors,
                teams: {
                    htm: htm,
                    vtm: vtm
                }
            }
        }

        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("boxscoreWinProbability", "", params).then(function(data) {
                var summary = parse(data.sets);
                deferred.resolve(summary)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("boxscoreAdvancedService", boxscoreAdvancedService);
    boxscoreAdvancedService.$inject = ["$q", "$filter", "StatsRequest"];

    function boxscoreAdvancedService($q, $filter, StatsRequest) {
        var parse = function(data, htmid, vtmid) {
            var linescores = {
                htm: {},
                vtm: {}
            };
            linescores.vtm.teamid = vtmid;
            linescores.htm.teamid = htmid;
            for (var i in linescores) {
                var team = linescores[i];
                team.datafooter = $filter("filter")(data.TeamStats.datatable, {
                    TEAM_ID: team.teamid
                });
                team.datatable = $filter("filter")(data.PlayerStats.datatable, {
                    TEAM_ID: team.teamid
                });
                team.title = team.datafooter[0].TEAM_CITY + " " + team.datafooter[0].TEAM_NAME
            }
            return linescores
        };

        function get(params, htmid, vtmid) {
            var deferred = $q.defer();
            StatsRequest.get("boxscoreAdvanced_2", "", params).then(function(response) {
                var data = response.sets;
                var linescores = parse(data, htmid, vtmid);
                deferred.resolve(linescores)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})(); /* NO 11/13 remove this */
stats.factory("boxscoreCommonFactory", ["BOXSCORE_PERIODS", function(BOXSCORE_PERIODS) {
    "use strict";
    // total regular game time in decimal time
    var q4max = 28800;
    // length of each overtime period in decimal time
    var otLength = 3e3;
    /**
     * getPeriodsFn()
     * get slice of BOXSCORE_PERIODS based on total game time
     *
     * @param {number} end - total game time
     *
     * @returns {Array} - boxscore dropdown selector objects
     */
    function getPeriodsFn(end) {
        // if there's overtime, get the OT index; otherwise return regular play periods
        var index = end > q4max ? getOTindex(end) : 8;
        return BOXSCORE_PERIODS.slice(0, index)
    }
    /**
     * getOTindex()
     * get the index at which to end the slice
     *
     * @param {number} end - total game time
     *
     * @returns {number} - The index to end the slice
     */
    function getOTindex(end) {
        var overtime = end - q4max;
        var OTperiods = Math.ceil(overtime / otLength);
        // 9 = index offset in BOXSCORE_PERIODS array
        return OTperiods + 9
    }
    return {
        getPeriods: getPeriodsFn
    }
}]);
(function() {
    stats.service("boxscoreFourFactorsService", boxscoreFourFactorsService);
    boxscoreFourFactorsService.$inject = ["$q", "$filter", "StatsRequest"];

    function boxscoreFourFactorsService($q, $filter, StatsRequest) {
        var parse = function(data, htmid, vtmid) {
            var linescores = {
                htm: {},
                vtm: {}
            };
            linescores.vtm.teamid = vtmid;
            linescores.htm.teamid = htmid;
            for (var i in linescores) {
                var team = linescores[i];
                team.datafooter = $filter("filter")(data.sqlTeamsFourFactors.datatable, {
                    TEAM_ID: team.teamid
                });
                team.datatable = $filter("filter")(data.sqlPlayersFourFactors.datatable, {
                    TEAM_ID: team.teamid
                });
                team.title = team.datafooter[0].TEAM_CITY + " " + team.datafooter[0].TEAM_NAME
            }
            return linescores
        };

        function get(params, htmid, vtmid) {
            var deferred = $q.defer();
            StatsRequest.get("boxscoreFourFactors_2", "", params).then(function(response) {
                var data = response.sets;
                var linescores = parse(data, htmid, vtmid);
                deferred.resolve(linescores)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("boxscoreMiscService", boxscoreMiscService);
    boxscoreMiscService.$inject = ["$q", "$filter", "StatsRequest"];

    function boxscoreMiscService($q, $filter, StatsRequest) {
        var parse = function(data, htmid, vtmid) {
            var linescores = {
                htm: {},
                vtm: {}
            };
            linescores.vtm.teamid = vtmid;
            linescores.htm.teamid = htmid;
            for (var i in linescores) {
                var team = linescores[i];
                team.datafooter = $filter("filter")(data.sqlTeamsMisc.datatable, {
                    TEAM_ID: team.teamid
                });
                team.datatable = $filter("filter")(data.sqlPlayersMisc.datatable, {
                    TEAM_ID: team.teamid
                });
                team.title = team.datafooter[0].TEAM_CITY + " " + team.datafooter[0].TEAM_NAME
            }
            return linescores
        };

        function get(params, htmid, vtmid) {
            var deferred = $q.defer();
            StatsRequest.get("boxscoreMisc_2", "", params).then(function(response) {
                var data = response.sets;
                var linescores = parse(data, htmid, vtmid);
                deferred.resolve(linescores)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("boxscorePlayByPlayService", boxscorePlayByPlayService);
    boxscorePlayByPlayService.$inject = ["$q", "StatsRequest"];

    function boxscorePlayByPlayService($q, StatsRequest) {
        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("boxscorePlayByPlay_2", "", params).then(function(response) {
                var data = response.sets;
                var plays = data.PlayByPlay.datatable;
                deferred.resolve(plays)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("boxscorePlayerTrackingService", boxscorePlayerTrackingService);
    boxscorePlayerTrackingService.$inject = ["$q", "$filter", "StatsRequest"];

    function boxscorePlayerTrackingService($q, $filter, StatsRequest) {
        var parse = function(data, htmid, vtmid) {
            var linescores = {
                htm: {},
                vtm: {}
            };
            linescores.vtm.teamid = vtmid;
            linescores.htm.teamid = htmid;
            for (var i in linescores) {
                var team = linescores[i];
                team.datafooter = $filter("filter")(data.PlayerTrackTeam.datatable, {
                    TEAM_ID: team.teamid
                });
                team.datatable = $filter("filter")(data.PlayerTrack.datatable, {
                    TEAM_ID: team.teamid
                });
                team.title = team.datafooter[0].TEAM_CITY + " " + team.datafooter[0].TEAM_NICKNAME
            }
            return linescores
        };

        function get(params, htmid, vtmid) {
            var deferred = $q.defer();
            StatsRequest.get("boxscorePlayerTracker_2", "", params).then(function(response) {
                var data = response.sets;
                var linescores = parse(data, htmid, vtmid);
                deferred.resolve(linescores)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("boxscoreScoringService", boxscoreScoringService);
    boxscoreScoringService.$inject = ["$q", "$filter", "StatsRequest"];

    function boxscoreScoringService($q, $filter, StatsRequest) {
        var parse = function(data, htmid, vtmid) {
            var linescores = {
                htm: {},
                vtm: {}
            };
            linescores.vtm.teamid = vtmid;
            linescores.htm.teamid = htmid;
            for (var i in linescores) {
                var team = linescores[i];
                team.datafooter = $filter("filter")(data.sqlTeamsScoring.datatable, {
                    TEAM_ID: team.teamid
                });
                team.datatable = $filter("filter")(data.sqlPlayersScoring.datatable, {
                    TEAM_ID: team.teamid
                });
                team.title = team.datafooter[0].TEAM_CITY + " " + team.datafooter[0].TEAM_NAME
            }
            return linescores
        };

        function get(params, htmid, vtmid) {
            var deferred = $q.defer();
            StatsRequest.get("boxscoreScoring_2", "", params).then(function(response) {
                var data = response.sets;
                var linescores = parse(data, htmid, vtmid);
                deferred.resolve(linescores)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("boxscoreSummaryService", boxscoreSummaryService);
    boxscoreSummaryService.$inject = ["$q", "$filter", "StatsRequest", "TEAMS"];

    function boxscoreSummaryService($q, $filter, StatsRequest, TEAMS) {
        var parse = function(data) {
            var boxscore = {
                teams: {}
            };
            boxscore.summary = data.GameSummary.datatable[0];
            boxscore.gameInfo = data.GameInfo.datatable[0];
            boxscore.officials = data.Officials.datatable;
            boxscore.seasontype = $filter("seasontype")(boxscore.summary.GAME_ID);
            boxscore.seasonYear = parseInt(boxscore.summary.SEASON, 10);
            boxscore.season = $filter("seasonyear")(boxscore.seasonYear);
            boxscore.isFinals = boxscore.seasontype == "Playoffs" && boxscore.summary.GAME_ID.charAt(7) == "4";
            boxscore.av = {
                hasVideo: data.AvailableVideo.datatable[0].VIDEO_AVAILABLE_FLAG === 1,
                hasXYZ: data.AvailableVideo.datatable[0].PT_XYZ_AVAILABLE >= 1,
                hasTracking: data.AvailableVideo.datatable[0].PT_AVAILABLE >= 1,
                hasAdvancedStats: data.AvailableVideo.datatable[0].WH_STATUS === 1
            };
            boxscore.teams.vtm = $filter("filter")(data.LineScore.datatable, {
                TEAM_ID: boxscore.summary.VISITOR_TEAM_ID
            })[0];
            boxscore.teams.htm = $filter("filter")(data.LineScore.datatable, {
                TEAM_ID: boxscore.summary.HOME_TEAM_ID
            })[0];
            boxscore.otherStats = {
                vtm: $filter("filter")(data.OtherStats.datatable, {
                    TEAM_ID: boxscore.summary.VISITOR_TEAM_ID
                })[0],
                htm: $filter("filter")(data.OtherStats.datatable, {
                    TEAM_ID: boxscore.summary.HOME_TEAM_ID
                })[0]
            };
            boxscore.teamInfo = {
                vtm: $filter("filter")(TEAMS, {
                    id: boxscore.summary.VISITOR_TEAM_ID
                })[0],
                htm: $filter("filter")(TEAMS, {
                    id: boxscore.summary.HOME_TEAM_ID
                })[0]
            };
            if (boxscore.teamInfo.vtm && boxscore.teamInfo.htm) {
                var colors = $filter("TeamColorChooser")(boxscore.teamInfo.htm, boxscore.teamInfo.vtm)
            }
            if (colors) {
                boxscore.teamInfo.vtm.color = colors.vtm;
                boxscore.teamInfo.htm.color = colors.htm
            }
            boxscore.summary.broadcasterAbbr = (boxscore.summary.NATL_TV_BROADCASTER_ABBREVIATION || "lp").toLowerCase().replace(" ", "");
            return boxscore
        };

        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("boxscoreSummary", "", params).then(function(response) {
                var data = response.sets;
                var boxscore = parse(data);
                deferred.resolve(boxscore)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("boxscoreTraditionalService", boxscoreTraditionalService);
    boxscoreTraditionalService.$inject = ["$q", "$filter", "StatsRequest"];

    function boxscoreTraditionalService($q, $filter, StatsRequest) {
        var parse = function(data, htmid, vtmid) {
            var linescores = {
                htm: {},
                vtm: {}
            };
            linescores.vtm.teamid = vtmid;
            linescores.htm.teamid = htmid;
            for (var i in linescores) {
                var team = linescores[i];
                team.datafooter = $filter("filter")(data.TeamStats.datatable, {
                    TEAM_ID: team.teamid
                });
                team.datatable = $filter("filter")(data.PlayerStats.datatable, {
                    TEAM_ID: team.teamid
                });
                team.title = team.datafooter[0].TEAM_CITY + " " + team.datafooter[0].TEAM_NAME
            }
            return linescores
        };

        function get(params, htmid, vtmid) {
            var deferred = $q.defer();
            StatsRequest.get("boxscoreTraditional_2", "", params).then(function(response) {
                var data = response.sets;
                var linescores = parse(data, htmid, vtmid);
                deferred.resolve(linescores)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("boxscoreUsageService", boxscoreUsageService);
    boxscoreUsageService.$inject = ["$q", "$filter", "StatsRequest"];

    function boxscoreUsageService($q, $filter, StatsRequest) {
        var parse = function(data, htmid, vtmid) {
            var linescores = {
                htm: {},
                vtm: {}
            };
            linescores.vtm.teamid = vtmid;
            linescores.htm.teamid = htmid;
            for (var i in linescores) {
                var team = linescores[i];
                team.datafooter = $filter("filter")(data.sqlTeamsUsage.datatable, {
                    TEAM_ID: team.teamid
                });
                team.datatable = $filter("filter")(data.sqlPlayersUsage.datatable, {
                    TEAM_ID: team.teamid
                });
                team.title = team.datafooter[0].TEAM_CITY + " " + team.datafooter[0].TEAM_NAME
            }
            return linescores
        };

        function get(params, htmid, vtmid) {
            var deferred = $q.defer();
            StatsRequest.get("boxscoreUsage_2", "", params).then(function(response) {
                var data = response.sets;
                var linescores = parse(data, htmid, vtmid);
                deferred.resolve(linescores)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("FranchiseHistoryService", FranchiseHistoryService);
    FranchiseHistoryService.$inject = ["$q", "$filter", "StatsRequest"];

    function FranchiseHistoryService($q, $filter, StatsRequest) {
        function parse(data) {
            for (var i in data.FranchiseHistory.datatable) {
                var row = data.FranchiseHistory.datatable[i];
                var prev = data.FranchiseHistory.datatable[i - 1];
                if (!i) {
                    row.isActive = true
                } else if (row && prev && row.TEAM_ID != prev.TEAM_ID) {
                    row.isActive = true
                }
            }
            var datasets = [{
                title: "Active Franchises",
                datatable: data.FranchiseHistory.datatable
            }, {
                title: "Defunct Franchises",
                datatable: data.DefunctTeams.datatable
            }];
            return datasets
        }

        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("franchiseHistory", "", params).then(function() {
                var data = StatsRequest.getData();
                var datasets = parse(data);
                deferred.resolve(datasets)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    angular.module("stats").service("AssistLeadersService", AssistLeadersService);
    AssistLeadersService.$inject = ["$q", "$filter", "StatsRequest"];

    function AssistLeadersService($q, $filter, StatsRequest) {
        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("assistLeaders", "", params).then(function(response) {
                var data = response.sets.AssistLeaders.datatable;
                deferred.resolve(data)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    angular.module("stats").service("AssistTrackerService", AssistTrackerService);
    AssistTrackerService.$inject = ["$q", "$filter", "StatsRequest"];

    function AssistTrackerService($q, $filter, StatsRequest) {
        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("assistTracker", "", params).then(function(response) {
                var data = response.sets.AssistTracker.datatable[0];
                deferred.resolve(data)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("LeagueGameLogsService", LeagueGameLogsService);
    LeagueGameLogsService.$inject = ["$filter", "$q", "StatsRequest"];

    function LeagueGameLogsService($filter, $q, StatsRequest) {
        function parse(rows) {
            for (var i in rows) {
                var row = rows[i];
                row.SEASON = $filter("seasonid")(row.GAME_ID);
                row.gdate = $filter("date")(row.GAME_DATE, "MM/dd/yyyy");
                row.udate = new Date(row.gdate)
            }
        }

        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("leagueGameLog", "", params).then(function() {
                var datasets = StatsRequest.getData();
                parse(datasets.LeagueGameLog.datatable);
                deferred.resolve(datasets)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("HomepageLeadersService", HomepageLeadersService);
    HomepageLeadersService.$inject = ["$q", "StatsRequest"];

    function HomepageLeadersService($q, StatsRequest) {
        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("homepageLeaders2", "", params).then(function(data) {
                deferred.resolve(data.resultSets)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("LeagueLeadersService", LeagueLeadersService);
    LeagueLeadersService.$inject = ["$q", "$filter", "StatsRequest"];

    function LeagueLeadersService($q, $filter, StatsRequest) {
        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("leagueLeaders", "", params).then(function() {
                var datasets = StatsRequest.getData();
                deferred.resolve(datasets)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("LeagueLineupsService", LeagueLineupsService);
    LeagueLineupsService.$inject = ["$q", "$filter", "StatsRequest"];

    function LeagueLineupsService($q, $filter, StatsRequest) {
        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("leagueLineups", "", params).then(function() {
                var datasets = StatsRequest.getData();
                deferred.resolve(datasets)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("LeaguePlayerBioService", LeaguePlayerBioService);
    LeaguePlayerBioService.$inject = ["$q", "$filter", "StatsRequest"];

    function LeaguePlayerBioService($q, $filter, StatsRequest) {
        function parse(stats) {
            stats.datatable.forEach(function(value) {
                if (value.DRAFT_NUMBER === "Undrafted") {
                    value.DRAFT_NUMBER_PADDED = 9999
                } else {
                    value.DRAFT_NUMBER_PADDED = parseInt(value.DRAFT_NUMBER, 10)
                }
            })
        }

        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("leaguePlayerBioStats", "", params).then(function(results) {
                var stats = results.sets.LeagueDashPlayerBioStats;
                parse(stats);
                deferred.resolve([stats])
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("LeaguePlayerClutchService", LeaguePlayerClutchService);
    LeaguePlayerClutchService.$inject = ["$q", "$filter", "StatsRequest"];

    function LeaguePlayerClutchService($q, $filter, StatsRequest) {
        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("leaguePlayerClutch", "", params).then(function(results) {
                var datasets = results.sets;
                deferred.resolve(datasets)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("LeaguePlayerGeneralService", LeaguePlayerGeneralService);
    LeaguePlayerGeneralService.$inject = ["$q", "$filter", "StatsRequest"];

    function LeaguePlayerGeneralService($q, $filter, StatsRequest) {
        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("leaguePlayerStats", "", params).then(function(results) {
                var datasets = results.sets;
                deferred.resolve(datasets)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("LeaguePlayerShootingService", LeaguePlayerShootingService);
    LeaguePlayerShootingService.$inject = ["$q", "$filter", "StatsRequest"];

    function LeaguePlayerShootingService($q, $filter, StatsRequest) {
        function parse(data) {
            var tableInfo = data.headers[0];
            var skip = tableInfo.columnsToSkip;
            var shotgroups = tableInfo.columnNames;
            var rows = data.rowSet;
            var arr = [];
            for (var i in rows) {
                var row = rows[i];
                var obj = {
                    PLAYER_ID: row[0],
                    PLAYER_NAME: row[1],
                    TEAM_ID: row[2],
                    TEAM_ABBREVIATION: row[3],
                    AGE: row[4]
                };
                for (var g in shotgroups) {
                    var group = shotgroups[g];
                    var alpha = skip + g * 3;
                    obj[group + " FGM"] = row[alpha + 0];
                    obj[group + " FGA"] = row[alpha + 1];
                    obj[group + " FG PCT"] = row[alpha + 2]
                }
                arr.push(obj)
            }
            return [{
                name: "shots",
                datatable: arr
            }]
        }

        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("leaguePlayerShotLocations", "", params).then(function(results) {
                var data = results.resultSets;
                var datasets = parse(data);
                deferred.resolve(datasets)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("leaguePlayerTrackingDefenseService", leaguePlayerTrackingDefenseService);
    leaguePlayerTrackingDefenseService.$inject = ["$q", "$filter", "StatsRequest"];

    function leaguePlayerTrackingDefenseService($q, $filter, StatsRequest) {
        function parse(sets) {
            sets[0].datatable.forEach(function(value) {
                value.FREQ_WHOLE_NUM = value.FREQ * 100
            });
            return sets
        }

        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("leaguePlayerTrackingDefense", "", params).then(function(results) {
                var datasets = parse(results.resultSets);
                deferred.resolve(datasets)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("leaguePlayerTrackingShotsService", leaguePlayerTrackingShotsService);
    leaguePlayerTrackingShotsService.$inject = ["$q", "$filter", "StatsRequest"];

    function leaguePlayerTrackingShotsService($q, $filter, StatsRequest) {
        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("leaguePlayerTrackingShots", "", params).then(function(results) {
                var datasets = results.resultSets;
                deferred.resolve(datasets)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("LeagueTeamClutchService", LeagueTeamClutchService);
    LeagueTeamClutchService.$inject = ["$q", "$filter", "StatsRequest"];

    function LeagueTeamClutchService($q, $filter, StatsRequest) {
        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("leagueTeamClutch", "", params).then(function(results) {
                var datasets = results.sets;
                deferred.resolve(datasets)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("LeagueTeamGeneralService", LeagueTeamGeneralService);
    LeagueTeamGeneralService.$inject = ["$q", "$filter", "StatsRequest"];

    function LeagueTeamGeneralService($q, $filter, StatsRequest) {
        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("leagueTeamStats", "", params).then(function(results) {
                var datasets = results.sets;
                deferred.resolve(datasets)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("LeagueTeamShootingService", LeagueTeamShootingService);
    LeagueTeamShootingService.$inject = ["$q", "$filter", "StatsRequest"];

    function LeagueTeamShootingService($q, $filter, StatsRequest) {
        function parse(data) {
            var tableInfo = data.headers[0];
            var skip = tableInfo.columnsToSkip;
            var shotgroups = tableInfo.columnNames;
            var rows = data.rowSet;
            var arr = [];
            for (var i in rows) {
                var row = rows[i];
                var obj = {
                    TEAM_ID: row[0],
                    TEAM_NAME: row[1]
                };
                for (var g in shotgroups) {
                    var group = shotgroups[g];
                    var alpha = skip + g * 3;
                    obj[group + " FGM"] = row[alpha + 0];
                    obj[group + " FGA"] = row[alpha + 1];
                    obj[group + " FG PCT"] = row[alpha + 2]
                }
                arr.push(obj)
            }
            return [{
                name: "shots",
                datatable: arr
            }]
        }

        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("leagueTeamShotLocations", "", params).then(function(results) {
                var data = results.resultSets;
                var datasets = parse(data);
                deferred.resolve(datasets)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("leagueTeamTrackingDefenseService", leagueTeamTrackingDefenseService);
    leagueTeamTrackingDefenseService.$inject = ["$q", "$filter", "StatsRequest"];

    function leagueTeamTrackingDefenseService($q, $filter, StatsRequest) {
        function parse(sets) {
            sets[0].datatable.forEach(function(value) {
                for (var key in value) {
                    value[key + "_WHOLE_NUM"] = parseFloat($filter("percent")(value[key], false))
                }
            });
            return sets
        }

        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("leagueTeamTrackingDefense", "", params).then(function(results) {
                var datasets = parse(results.resultSets);
                deferred.resolve(datasets)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("leagueTeamTrackingShotsService", leagueTeamTrackingShotsService);
    leagueTeamTrackingShotsService.$inject = ["$q", "$filter", "StatsRequest"];

    function leagueTeamTrackingShotsService($q, $filter, StatsRequest) {
        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("leagueTeamTrackingShots", "", params).then(function(results) {
                var datasets = results.resultSets;
                deferred.resolve(datasets)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})(); /*global $, angular, console */
stats.factory("SEOFactory", ["$document", function SEOFactory($document) {
    var _SEOFactory = {};
    /**
     * getTitle()
     * Returns the page title.
     *
     * @return {string} - The document title.
     */
    _SEOFactory.getTitle = function getTitle() {
        return $document[0].title
    };
    /**
     * setTitle()
     * Sets the page title to the specified string.
     *
     * @param {string} newTitle - The new title for the current page.
     */
    _SEOFactory.setTitle = function setTitle(newTitle) {
        $document[0].title = newTitle
    };
    /**
     * appendTitle()
     * Appends the current page title with the specified string.
     * Adds a seperator between the current page title and the specified string.
     *
     * @param {string} addition - The new title for the current .
     */
    _SEOFactory.appendTitle = function appendTitle(addition) {
        var _addition = " - " + addition;
        $document[0].title += _addition
    };
    return _SEOFactory
}]);
stats.service("browser", ["$window", function($window) {
    return function() {
        var userAgent = $window.navigator.userAgent;
        var browsers = {
            chrome: /chrome/i,
            safari: /safari/i,
            firefox: /firefox/i,
            ie: /trident/i
        };
        for (var key in browsers) {
            if (browsers[key].test(userAgent)) {
                return key
            }
        }
        return "unknown"
    }
}]); /* global stats */
stats.factory("DeepLinksFactory", ["$location", function DeepLinksFactory($location) {
    "use strict";
    var _DeepLinksFactory = {};
    /**
     * getSearchURL()
     * @returns {object} [filter] - The $location query string.
     *                              Returns the entire query string
     *                              When called without arguments.
     */
    _DeepLinksFactory.getSearchURL = function returnSearchObj(filter) {
        return filter ? $location.search()[filter] : $location.search()
    };
    /**
     * setSearchURL()
     * @param {object} obj - An object of search keys and values. Keys are strings.
     */
    _DeepLinksFactory.setSearchURL = function setSearchURL(obj) {
        var _obj = obj || {};
        for (var key in _obj) {
            $location.search(key, _obj[key])
        }
    };
    /**
     * resetSearchURL()
     * @param {array} [array] - An array of search keys. Keys are strings.
     *                          Removes the entire query string
     *                          when called without arguments.
     */
    _DeepLinksFactory.resetSearchURL = function resetSearchURL(array) {
        var _array = array || Object.keys($location.search());
        var _len = _array.length;
        for (var i = 0; i < _len; i++) {
            $location.search(_array[i], null)
        }
    };
    /**
     * hasSearchURL()
     * @returns {boolean} - True if a query string is detected.
     */
    _DeepLinksFactory.hasSearchURL = function hasSearchURL() {
        var _length = Object.keys($location.search()).length;
        return _length > 0 ? true : false
    };
    /**
     * getHashURL()
     * @returns {string} - The hash fragment of the URL without the hash symbol.
     */
    _DeepLinksFactory.getHashURL = function getHashURL() {
        return $location.hash()
    };
    /**
     * setHashURL()
     * @param {string} string - An object of search keys and values. Keys are strings.
     */
    _DeepLinksFactory.setHashURL = function setHashURL(string) {
        $location.hash(string)
    };
    /**
     * resetHashURL()
     * @param {none} - Removes the hash fragment. It's called without parameters.
     */
    _DeepLinksFactory.resetHashURL = function resetHashURL() {
        $location.hash(null)
    };
    /**
     * getFullURL()
     * @returns {string} - The full URL.
     */
    _DeepLinksFactory.getFullURL = function getFullURL() {
        return $location.absUrl()
    };
    /**
     * getPath()
     * @returns {string} - The URL path.
     */
    _DeepLinksFactory.getPath = function getPath() {
        return $location.path()
    };
    /**
     * setPath()
     * @param {string} path - The new URL path.
     */
    _DeepLinksFactory.setPath = function setPath(path) {
        $location.path(path)
    };
    // _DeepLinksFactory.get
    return _DeepLinksFactory
}]); /*global angular, console, stats */
/*
 * Serivce that handles generating social sharing links
 * for twitter, facebook and google+ (lol) through
 * nba bitly api
 *
 * this script is haunted by the ghost of jenn schiffer
 *
 *
 *
 *                                         .,,cccd$$$$$$$$$$$ccc,
 *                                     ,cc$$$$$$$$$$$$$$$$$$$$$$$$$cc,
 *                                   ,d$$$$$$$$$$$$$$$$"J$$$$$$$$$$$$$$c,
 *                                 d$$$$$$$$$$$$$$$$$$,$" ,,`?$$$$$$$$$$$$L
 *                               ,$$$$$$$$$$$$$$$$$$$$$',J$$$$$$$$$$$$$$$$$b
 *                              ,$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$i `$h
 *                              $$$$$$$$$$$$$$$$$$$$$$$$$P'  "$$$$$$$$$$$h $$
 *                             ;$$$$$$$$$$$$$$$$$$$$$$$$F,$$$h,?$$$$$$$$$$h$F
 *                             `$$$$$$$$$$$$$$$$$$$$$$$F:??$$$:)$$$$P",. $$F
 *                              ?$$$$$$$$$$$$$$$$$$$$$$(   `$$ J$$F"d$$F,$F
 *                               ?$$$$$$$$$$$$$$$$$$$$$h,  :P'J$$F  ,$F,$"
 *                                ?$$$$$$$$$$$$$$$$$$$$$$$ccd$$`$h, ",d$
 *                                 "$$$$$$$$$$$$$$$$$$$$$$$$",cdc $$$$"
 *                        ,uu,      `?$$$$$$$$$$$$$$$$$$$$$$$$$$$c$$$$h
 *                    .,d$$$$$$$cc,   `$$$$$$$$$$$$$$$$??$$$$$$$$$$$$$$$,
 *                  ,d$$$$$$$$$$$$$$$bcccc,,??$$$$$$ccf `"??$$$$??$$$$$$$
 *                 d$$$$$$$$$$$$$$$$$$$$$$$$$h`?$$$$$$h`:...  d$$$$$$$$P
 *                d$$$$$$$$$$$$$$$$$$$$$$$$$$$$`$$$$$$$hc,,cd$$$$$$$$P"
 *            =$$?$$$$$$$$P' ?$$$$$$$$$$$$$$$$$;$$$$$$$$$???????",,
 *               =$$$$$$F       `"?????$$$$$$$$$$$$$$$$$$$$$$$$$$$$$bc
 *               d$$F"?$$k ,ccc$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$i
 *        .     ,ccc$$c`""u$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$P",$$$$$$$$$$$$h
 *     ,d$$$L  J$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$" `""$$$??$$$$$$$
 *   ,d$$$$$$c,"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$F       `?J$$$$$$$'
 *  ,$$$$$$$$$$h`$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$F           ?$$$$$$$P""=,
 * ,$$$F?$$$$$$$ $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$F              3$$$$II"?$h,
 * $$$$$`$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$P"               ;$$$??$$$,"?"
 * $$$$F ?$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$P",z'                3$$h   ?$F
 *        `?$$$$$$$$$$$$$$$??$$$$$$$$$PF"',d$P"                  "?$F
 *           """""""         ,z$$$$$$$$$$$$$P
 *                          J$$$$$$$$$$$$$$F
 *                         ,$$$$$$$$$$$$$$F
 *                         :$$$$$c?$$$$PF'
 *                         `$$$$$$$P
 *                          `?$$$$F
 */
(function() {
    stats.service("SocialService", SocialService);
    SocialService.$inject = ["$q", "$http"];

    function SocialService($q, $http) {
        var bitlyUrl = "http://api.bitly.com/v3/shorten?format=json&apiKey=R_46b31735252665da66f63ede638288f1&login=nba450";

        function getLinks(url, title) {
            var deferred = $q.defer();
            var bitly = bitlyUrl + "&longUrl=" + url + "&callback=JSON_CALLBACK";
            $http.jsonp(bitly).success(function(data) {
                deferred.resolve(data.data)
            });
            return deferred.promise
        }
        return {
            getLinks: getLinks
        }
    }
})();
(function() {
    stats.factory("SplitsService", SplitsService);
    SplitsService.$inject = ["$filter", "$location", "SPLITS"];

    function SplitsService($filter, $location, SPLITS) {
        var splits = {};
        var params = {}; /*** ***/
        function findDefault(n) {
            if (this.initial == n.val) {
                this.selected = n;
                return true
            }
        }

        function findWithout(n) {
            return this.indexOf(n.val) === -1
        }

        function createRange(start, end) {
            var arr = [];
            for (var i = end; i >= start; i -= 1) {
                arr.push({
                    val: i,
                    text: i
                })
            }
            return arr
        }

        function createSeasonRange(start, end) {
            var arr = [];
            for (var i = end; i >= start; i -= 1) {
                arr.push({
                    val: $filter("seasonyear")(i),
                    text: $filter("seasonyear")(i)
                })
            }
            return arr
        } /*** ***/
        function getStringSplit(name) {
            var s = SPLITS[name];
            if (s) {
                if (s.type == "select") {
                    if ($location.search()[name]) {
                        s.initial = $location.search()[name]
                    } else {
                        s.initial = s.default
                    }
                    s.selected = null;
                    s.options.some(findDefault.bind(s))
                }
                if (s.type == "datepicker") {
                    if ($location.search()[name]) {
                        s.selected.val = $location.search()[name]
                    }
                }
            }
            return s
        }

        function getObjectSplit(obj) {
            var s = angular.extend({}, SPLITS[obj.name]);
            if (!s) {
                return obj
            }
            if (obj.default) {
                s.default = obj.default
            }
            if (obj.range) {
                s.options = createRange(parseInt(obj.range[0], 10), parseInt(obj.range[1], 10))
            }
            if (obj.seasonRange) {
                s.options = createSeasonRange(parseInt(obj.seasonRange[0], 10), parseInt(obj.seasonRange[1], 10))
            }
            if (obj.without) {
                s.options = s.options.filter(findWithout.bind(obj.without))
            }
            if (obj.include) {
                s.options = s.options.concat(obj.include)
            }
            if (obj.includeBefore) {
                s.options = obj.includeBefore.concat(s.options)
            }
            if (obj.as) {
                obj.name = obj.as;
                s.name = obj.name
            }
            if ($location.search()[s.name] != undefined) {
                s.initial = $location.search()[s.name]
            } else if (obj.initial) {
                s.initial = obj.initial
            } else {
                s.initial = s.default
            }
            if (s.type == "select") {
                s.selected = null;
                s.options.some(findDefault.bind(s))
            }
            return s
        } /*** ***/
        function processSplitRequest(array) {
            for (var i in array) {
                var split = array[i];
                if (typeof split == "string") {
                    splits[split] = getStringSplit(split);
                    params[split] = splits[split].selected.val
                } else if (typeof split == "object") {
                    var sobj = getObjectSplit(split);
                    splits[sobj.name] = sobj;
                    if (splits[split.name].selected) {
                        if (split.param) {
                            params[split.param] = splits[split.name].selected.val
                        } else {
                            params[split.name] = splits[split.name].selected.val
                        }
                    }
                }
            }
            return {
                splits: splits,
                params: params
            }
        } /*** ***/
        return {
            get: function(array) {
                return processSplitRequest(array)
            }
        }
    }
})();
/*
 * eventually replace this with splits-service
 */
(function() {
    stats.factory("Splits", Splits);
    Splits.$inject = ["$filter", "$location", "SPLITS"];

    function Splits($filter, $location, SPLITS) {
        var splits = {}; /*** ***/
        function findDefault(n) {
            if (this.initial == n.val) {
                this.selected = n;
                return true
            }
        }

        function findWithout(n) {
            return this.indexOf(n.val) === -1
        }

        function createRange(start, end) {
            var arr = [];
            for (var i = end; i >= start; i -= 1) {
                arr.push({
                    val: i,
                    text: i
                })
            }
            return arr
        }

        function createSeasonRange(start, end) {
            var arr = [];
            for (var i = end; i >= start; i -= 1) {
                arr.push({
                    val: $filter("seasonyear")(i),
                    text: $filter("seasonyear")(i)
                })
            }
            return arr
        } /*** ***/
        function getStringSplit(name) {
            var s = SPLITS[name];
            if (s) {
                if (s.type == "select") {
                    if ($location.search()[name]) {
                        s.initial = $location.search()[name]
                    } else {
                        s.initial = s.default
                    }
                    s.selected = null;
                    s.options.some(findDefault.bind(s))
                }
                if (s.type == "datepicker") {
                    if ($location.search()[name]) {
                        s.selected.val = $location.search()[name]
                    }
                }
            }
            return s
        }

        function getObjectSplit(obj) {
            var s = angular.extend({}, SPLITS[obj.name]);
            if (!s) {
                return obj
            }
            if (obj.default) {
                s.default = obj.default
            }
            if (obj.range) {
                s.options = createRange(parseInt(obj.range[0], 10), parseInt(obj.range[1], 10))
            }
            if (obj.seasonRange) {
                s.options = createSeasonRange(parseInt(obj.seasonRange[0], 10), parseInt(obj.seasonRange[1], 10))
            }
            if (obj.without) {
                s.options = s.options.filter(findWithout.bind(obj.without))
            }
            if (obj.include) {
                s.options = s.options.concat(obj.include)
            }
            if (obj.includeBefore) {
                s.options = obj.includeBefore.concat(s.options)
            }
            if ($location.search()[obj.name] != undefined) {
                s.initial = $location.search()[obj.name]
            } else if (obj.initial) {
                s.initial = obj.initial
            } else {
                s.initial = s.default
            }
            if (s.type == "select") {
                s.selected = null;
                s.options.some(findDefault.bind(s))
            }
            return s
        } /*** ***/
        function processSplitRequest(array) {
            for (var i in array) {
                var split = array[i];
                if (typeof split == "string") {
                    splits[split] = getStringSplit(split)
                } else if (typeof split == "object") {
                    splits[split.name] = getObjectSplit(split)
                }
            }
            return splits
        } /*** ***/
        return {
            get: function(array) {
                return processSplitRequest(array)
            }
        }
    }
})(); /*global console */
(function() {
    stats.factory("StatsRequest", StatsRequest);
    StatsRequest.$inject = ["$q", "$http", "$rootScope", "FEEDS_CONFIG"];

    function StatsRequest($q, $http, $rootScope, FEEDS_CONFIG) {
        var dataCache = {};
        var base = this;
        /**
         * Fetch data from the remote feed and put it through a transformation
         * function, handles any fetch errors.
         */
        function get(endpoint, path, parameters, dontCache) {
            var url = FEEDS_CONFIG.prefix + FEEDS_CONFIG[endpoint];
            var cache = !(dontCache === true);
            // Need to reset the deferrment each request to allow multiple requests
            var deferred = $q.defer();
            var promise = $http({
                url: url,
                method: FEEDS_CONFIG.requestMethod,
                params: parameters,
                cache: cache
            }).success(function(data, status) {
                // parse results
                parseResultSets(data);
                // cache results set
                base.dataCache = data;
                // resolve promise
                deferred.resolve(data)
            }).error(function(data, status) {
                var error = {
                    url: url,
                    status: data.status,
                    message: ["Remote server error -", url, "- Server response:", status].join(" ")
                };
                deferred.resolve(data);
                throw new Error(error.message)
            });
            if (typeof ga != "undefined") {
                ga("send", "event", "stats-request", FEEDS_CONFIG[endpoint], JSON.stringify(parameters))
            }
            return deferred.promise
        }
        /**
         * parse stats middle tier data
         */
        function parseResultSets(data) {
            if (!data.resultSets && data.resultSet) {
                if ($.isArray(data.resultSet)) {
                    data.resultSets = data.resultSet
                } else {
                    data.resultSets = [data.resultSet]
                }
            }
            data.sets = {};
            data.formatStatResponse = true;
            if (data.resultSets.length) {
                $.each(data.resultSets, dataseterize.bind(this, data))
            } else {
                dataseterize.bind(data.resultSets, data)
            }
            data.datasets = data.sets
        }
        /**
         * binds column headers to row data from stat request middle tier
         */
        function dataseterize(resp, i, set) {
            if (!set) {
                return
            }
            var zipTableData = function(row, i) {
                var datarow = {
                    id: i
                };
                for (var y in set.headers) {
                    var c = set.headers[y];
                    var v = row[y];
                    datarow[c] = v
                }
                return datarow
            };
            resp.sets[set.name] = set;
            set.datatable = $.map(set.rowSet, zipTableData)
        }
        /**
         * Pushes an error into the stack in the rootscope, so we can report it to the user.
         */
        function reportError(error) {
            $rootScope.errors = $rootScope.errors || [];
            $rootScope.errors.push(error);
            if (FEEDS_CONFIG.debug) {
                console.log($rootScope.errors)
            }
        }
        return {
            get: get,
            getData: function() {
                return base.dataCache.datasets
            },
            getResults: function() {
                return base.dataCache.resultSets
            },
            parse: function(data) {
                return parseResultSets(data)
            }
        }
    }
})();
(function() {
    stats.service("MovementService", MovementService);
    MovementService.$inject = ["$q", "$filter", "$http"];

    function MovementService($q, $filter, $http) {
        function parseData(data) {
            data.teams = {};
            data.players = {};
            var teamkeys = ["home", "visitor"];
            for (var i in teamkeys) {
                var key = teamkeys[i];
                var team = data[key];
                var teamid = team.teamid;
                data.teams[teamid] = team;
                data.teams[teamid].type = key;
                for (var j in team.players) {
                    var player = team.players[j];
                    player.name = player.firstname + " " + player.lastname;
                    player.teamid = team.teamid;
                    player.teamname = team.name;
                    player.teamtype = team.type;
                    data.players[player.playerid] = player
                }
            }
            data.frames = data.moments.map(parseMoment.bind(data));
            return data
        }

        function parseMoment(moment, index) {
            var i;
            var info = {
                period: moment[0],
                timestamp: moment[1],
                gameclock: moment[2],
                shotclock: moment[3],
                eventid: moment[4]
            };
            var ps = moment[5].map(function(n, i) {
                var obj = {
                    teamid: n[0],
                    playerid: n[1],
                    x: n[2] * 10,
                    y: n[3] * 10,
                    z: n[4] * 10,
                    hide: false
                };
                return obj
            });
            var obj = {
                info: info,
                ball: ps[0],
                htm: ps.slice(1, 6),
                vtm: ps.slice(6, 11)
            };
            for (i in obj.vtm) {
                obj.vtm[i].info = this.players[obj.vtm[i].playerid]
            }
            for (i in obj.htm) {
                obj.htm[i].info = this.players[obj.htm[i].playerid]
            }
            return obj
        }

        function get(params) {
            var deferred = $q.defer();
            var url = "/stats/locations_getmoments/";
            $http({
                method: "GET",
                url: url,
                params: params
            }).success(function(response, status) {
                var data = response;
                var movementData = parseData(data);
                deferred.resolve(movementData)
            }).error(function(response, status) {
                console.log("error", response, status);
                deferred.resolve(false)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    angular.module("stats").service("PlayerBioService", PlayerBioService);
    PlayerBioService.$inject = ["$q", "$http"];

    function PlayerBioService($q, $http) {
        function get(playerid) {
            var deferred = $q.defer();
            var url = "http://data.nba.com/data/5s/json/bios/player_" + playerid + ".json";
            $http.get(url, {
                cache: true
            }).success(function(data) {
                deferred.resolve(data)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    angular.module("stats").service("PlayerCareerService", PlayerCareerService);
    PlayerCareerService.$inject = ["$q", "$filter", "StatsRequest"];

    function PlayerCareerService($q, $filter, StatsRequest) {
        function parse(sets) {
            var datasets = [{
                name: "Regular Season",
                datatable: sets.SeasonTotalsRegularSeason.datatable,
                datafooter: sets.CareerTotalsRegularSeason.datatable,
                isSchool: false,
                hasData: sets.SeasonTotalsRegularSeason.datatable.length > 0
            }, {
                name: "Playoffs",
                datatable: sets.SeasonTotalsPostSeason.datatable,
                datafooter: sets.CareerTotalsPostSeason.datatable,
                isSchool: false,
                hasData: sets.SeasonTotalsPostSeason.datatable.length > 0
            }, {
                name: "All Star",
                datatable: sets.SeasonTotalsAllStarSeason.datatable,
                datafooter: sets.CareerTotalsAllStarSeason.datatable,
                isSchool: false,
                hasData: sets.SeasonTotalsAllStarSeason.datatable.length > 0
            }, {
                name: "College",
                datatable: sets.SeasonTotalsCollegeSeason.datatable,
                datafooter: sets.CareerTotalsCollegeSeason.datatable,
                isSchool: true,
                hasData: sets.SeasonTotalsCollegeSeason.datatable.length > 0
            }, {
                name: "League Rankings",
                datatable: sets.SeasonRankingsRegularSeason.datatable
            }];
            return datasets
        }

        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("playerCareer", "", params).then(function(response) {
                var sets = response.sets;
                var datasets = parse(sets);
                deferred.resolve(datasets)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("PlayerFantasyBarGraphService", PlayerFantasyBarGraphService);
    PlayerFantasyBarGraphService.$inject = ["$q", "StatsRequest"];

    function PlayerFantasyBarGraphService($q, StatsRequest) {
        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("playerFantasyBarGraph", "", params).then(function(response) {
                var data = response.sets;
                deferred.resolve(data)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("PlayerFantasySplitsService", PlayerFantasySplitsService);
    PlayerFantasySplitsService.$inject = ["$q", "StatsRequest"];

    function PlayerFantasySplitsService($q, StatsRequest) {
        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("playerFantasySplits", "", params).then(function() {
                var data = StatsRequest.getResults();
                deferred.resolve(data)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    angular.module("stats").service("PlayerGamelogService", PlayerGamelogService);
    PlayerGamelogService.$inject = ["$q", "$filter", "StatsRequest"];

    function PlayerGamelogService($q, $filter, StatsRequest) {
        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("playerGameLogs", "", params).then(function(response) {
                var data = response.sets;
                deferred.resolve(data)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("PlayerListService", PlayerListService);
    PlayerListService.$inject = ["$q", "$filter", "StatsRequest"];

    function PlayerListService($q, $filter, StatsRequest) {
        function parse(n) {
            var name = n.DISPLAY_LAST_COMMA_FIRST.split(",");
            n.FIRST_NAME = name[1];
            n.LAST_NAME = name[0]
        }

        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("playerList", "", params).then(function(response) {
                var data = response.sets.CommonAllPlayers.datatable;
                data.forEach(parse);
                deferred.resolve(data)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("PlayerNewsService", PlayerNewsService);
    PlayerNewsService.$inject = ["$q", "$http"];

    function PlayerNewsService($q, $http) {
        function get(playerid) {
            var deferred = $q.defer();
            var url = "/feeds/RotoWirePlayers-583598/" + playerid + ".json";
            $http.get(url, {
                cache: true
            }).success(function(response) {
                deferred.resolve(response.PlayerRotowires || [])
            }).catch(function(response) {
                deferred.resolve(null)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("PlayerSummaryService", PlayerSummaryService);
    PlayerSummaryService.$inject = ["$q", "$filter", "SEASONS", "StatsRequest"];

    function PlayerSummaryService($q, $filter, SEASONS, StatsRequest) {
        var parse = function(data) {
            var player = {
                headlineStats: data.PlayerHeadlineStats.datatable[0],
                playerInfo: data.CommonPlayerInfo.datatable[0]
            };
            player.playerInfo.POS = player.playerInfo.POSITION.split("-").map(function(n) {
                return n.charAt(0)
            }).join("-");
            player.playerInfo.TO_YEAR = +player.playerInfo.TO_YEAR;
            player.playerInfo.FROM_YEAR = +player.playerInfo.FROM_YEAR;
            // calculate player age
            var dob = new Date(player.playerInfo.BIRTHDATE);
            var today = new Date;
            var ageDifMs = today.getTime() - dob.getTime();
            var ageDate = new Date(ageDifMs);
            var lastbirthday = player.playerInfo.BIRTHDATE.replace(/^\d\d\d\d/, (new Date).getFullYear());
            var bday = new Date(lastbirthday);
            if (today < bday) {
                bday.setFullYear((new Date).getFullYear() - 1)
            }
            var daydiff = Math.floor(Math.abs(+bday - +today) / 864e5);
            player.playerInfo.AGE = Math.abs(ageDate.getUTCFullYear() - 1970);
            player.playerInfo.AGE_DAYS = ("000" + daydiff).substr(-3);
            player.availableStats = {
                current: player.playerInfo.TO_YEAR >= SEASONS.site.SeasonYear && player.playerInfo.GAMES_PLAYED_FLAG === "Y",
                tracking: player.playerInfo.TO_YEAR >= 2013 && player.playerInfo.FROM_YEAR <= SEASONS.playerTracking.SeasonYear && player.playerInfo.GAMES_PLAYED_FLAG === "Y",
                stats: player.playerInfo.TO_YEAR >= 1996 && player.playerInfo.GAMES_PLAYED_FLAG === "Y",
                video: player.playerInfo.TO_YEAR >= 2013 && player.playerInfo.GAMES_PLAYED_FLAG === "Y",
                gamelogs: player.playerInfo.GAMES_PLAYED_FLAG === "Y"
            };
            return player
        };

        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("playerSummary", "", params).then(function(response) {
                var data = response.sets;
                var player = parse(data);
                deferred.resolve(player)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("PlayerTrackingDashPassesService", PlayerTrackingDashPassesService);
    PlayerTrackingDashPassesService.$inject = ["$q", "$filter", "StatsRequest"];

    function PlayerTrackingDashPassesService($q, $filter, StatsRequest) {
        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("playerTrackingPasses", "", params).then(function(response) {
                var data = response.sets;
                var datasets = [{
                    name: "Passes Made",
                    datatable: data.PassesMade.datatable
                }, {
                    name: "Passes Received",
                    datatable: data.PassesReceived.datatable
                }];
                deferred.resolve(datasets)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("PlayerUpcomingGamesService", PlayerUpcomingGamesService);
    PlayerUpcomingGamesService.$inject = ["$q", "StatsRequest"];

    function PlayerUpcomingGamesService($q, StatsRequest) {
        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("playerUpcomingGames", "", params).then(function(response) {
                var data = response.sets;
                deferred.resolve(data)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("PlayoffPictureService", PlayoffPictureService);
    PlayoffPictureService.$inject = ["$q", "StatsRequest", "TEAMS", "$filter"];

    function PlayoffPictureService($q, StatsRequest, TEAMS, $filter) {
        function parseStandings(team) {
            var teaminfo = $filter("filter")(TEAMS, {
                id: team.TEAM_ID
            })[0];
            if (team.ELIMINATED_PLAYOFFS) {
                team.status = "o"
            }
            if (team.CLINCHED_PLAYOFFS) {
                team.status = "x"
            }
            if (team.CLINCHED_CONFERENCE && !team.CLINCHED_PLAYOFFS) {
                team.status = teaminfo.conference.charAt(0).toLowerCase()
            }
            if (team.CLINCHED_DIVISION && !team.CLINCHED_CONFERENCE && !team.CLINCHED_PLAYOFFS) {
                switch (teaminfo.division) {
                    case "Northwest":
                        team.status = "nw";
                        break;
                    case "Pacific":
                        team.status = "p";
                        break;
                    case "Northeast":
                        team.status = "ne";
                        break;
                    case "Southeast":
                        team.status = "se";
                        break;
                    case "Atlantic":
                        team.status = "a";
                        break;
                    case "Central":
                        team.status = "c";
                        break
                }
            }
        }

        function parsePlayoffPicture(series) {
            var highteam = $filter("filter")(TEAMS, {
                id: series.HIGH_SEED_TEAM_ID
            })[0];
            var lowteam = $filter("filter")(TEAMS, {
                id: series.LOW_SEED_TEAM_ID
            })[0];
            series.HIGH_SEED_TEAM_ABBR = highteam.abbr;
            series.LOW_SEED_TEAM_ABBR = lowteam.abbr
        }

        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("playoffPicture", "", params).then(function() {
                var data = StatsRequest.getData();
                data.EastConfStandings.datatable.forEach(parseStandings);
                data.WestConfStandings.datatable.forEach(parseStandings);
                data.EastConfPlayoffPicture.datatable.forEach(parsePlayoffPicture);
                data.WestConfPlayoffPicture.datatable.forEach(parsePlayoffPicture);
                deferred.resolve(data)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})(); /*global angular, console */
/*
 * NO 11/13 - fix / remove this
 */
stats.service("PlayTypeDataFactory", ["$q", "$filter", "$http", "StatsRequest", function($q, $filter, $http, StatsRequest) {
    "use strict";

    function createUrl(params, category, section) {
        // NBA data feed
        var _rootURL = "/js/data/playtype";
        // Season
        // var _year    = params.Season.substr(0, 4);
        // Play Type category
        var _cat = category;
        // Team or Player
        var _isTeam = section == "team" ? "team_" : "player_";
        // Regular or Post Season
        var _isPost = params.SeasonType == "Playoffs" ? "_post" : "";
        // Filename string
        var _fileName = [_isTeam, _cat, _isPost].join("").concat(".js");
        // Full stats URL
        var url = [_rootURL, _fileName].join("/");
        return url
    }

    function get(params, category, section) {
        var deferred = $q.defer();
        var url = createUrl(params, category, section);
        $http({
            method: "GET",
            url: url
        }).then(function(response) {
            var data = response.data;
            // for (var i in data) {
            StatsRequest.parse(data);
            // }
            deferred.resolve(data)
        });
        return deferred.promise
    }
    return {
        get: get
    }
}]); /*global angular, console */
/*
 * NO 11/13 - fix / remove this
 */
stats.service("PlayTypeSummaryDataFactory", ["$q", "$filter", "$http", "StatsRequest", function($q, $filter, $http, StatsRequest) {
    "use strict";

    function createUrl(params, category, section) {
        // NBA data feed
        var _rootURL = "/js/data/playtype";
        // Season
        // var _year    = params.Season.substr(0, 4);
        // Play Type category
        var _cat = category;
        // Team or Player
        var _isTeam = section == "team" ? "team_" : "player_";
        // Regular or Post Season
        var _isPost = params.SeasonType == "Playoffs" ? "_post" : "";
        // Filename string
        var _fileName = [_isTeam, _cat, _isPost].join("").concat(".js");
        // Full stats URL
        var url = [_rootURL, _fileName].join("/");
        return url
    }

    function get(params, category, section) {
        var deferred = $q.defer();
        var url = createUrl(params, category, section);
        $http({
            method: "GET",
            url: url
        }).then(function(response) {
            var data = response.data;
            for (var i in data) {
                StatsRequest.parse(data[i])
            }
            deferred.resolve(data)
        });
        return deferred.promise
    }
    return {
        get: get
    }
}]);
(function() {
    stats.service("ScoresService", ScoresService);
    ScoresService.$inject = ["$q", "$filter", "StatsRequest"];

    function ScoresService($q, $filter, StatsRequest) {
        var parse = function(data) {
            var gamestates = ["", "pre", "live", "post"];
            var games = data.GameHeader.datatable;
            var avail = data.Available.datatable;
            var lastMeeting = data.LastMeeting.datatable;
            var series = data.SeriesStandings.datatable;
            var linescores = data.LineScore.datatable;
            var teamLeaders = data.TeamLeaders.datatable;
            var ticketlinks = data.TicketLinks.datatable;
            var standings = [data.EastConfStandingsByDay, data.WestConfStandingsByDay];
            for (var i in games) {
                var game = games[i];
                var gameid = game.GAME_ID;
                var htmid = game.HOME_TEAM_ID;
                var vtmid = game.VISITOR_TEAM_ID;
                game.teamLeaders = {};
                game.available = $filter("filter")(avail, {
                    GAME_ID: gameid
                })[0];
                game.lastMeeting = $filter("filter")(lastMeeting, {
                    GAME_ID: gameid
                })[0];
                game.series = $filter("filter")(series, {
                    GAME_ID: gameid
                })[0];
                game.seasonid = $filter("seasonyear")(game.SEASON);
                game.ticketlinks = $filter("filter")(ticketlinks, {
                    GAME_ID: gameid
                })[0];
                game.linescores = {
                    htm: $filter("filter")(linescores, {
                        TEAM_ID: htmid
                    })[0],
                    vtm: $filter("filter")(linescores, {
                        TEAM_ID: vtmid
                    })[0]
                };
                game.lineScoresArray = [game.linescores.vtm, game.linescores.htm];
                game.teamLeaders = {
                    htm: $filter("filter")(teamLeaders, {
                        TEAM_ID: htmid
                    })[0],
                    vtm: $filter("filter")(teamLeaders, {
                        TEAM_ID: vtmid
                    })[0]
                };
                game.gamestate = gamestates[game.GAME_STATUS_ID];
                game.linescores.htm.isWinner = game.linescores.htm.PTS > game.linescores.vtm.PTS;
                game.linescores.vtm.isWinner = !game.linescores.htm.isWinner;
                game.linescores.htm.TEAM_ABBREVIATION = game.linescores.htm.TEAM_ABBREVIATION.trim();
                game.linescores.vtm.TEAM_ABBREVIATION = game.linescores.vtm.TEAM_ABBREVIATION.trim();
                game.broadcasterAbbr = (game.NATL_TV_BROADCASTER_ABBREVIATION || "lp").toLowerCase().replace(" ", "")
            }
            return {
                games: games,
                standings: standings
            }
        };

        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("scoreboard2", "", params).then(function() {
                var data = StatsRequest.getData();
                var games = parse(data);
                deferred.resolve(games)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("ShotchartService", ShotchartService);
    ShotchartService.$inject = ["$q", "$filter", "StatsRequest"];

    function ShotchartService($q, $filter, StatsRequest) {
        function parse(data) {
            var shots = data.Shot_Chart_Detail.datatable;
            var league = data.LeagueAverages.datatable;
            var groupedShots = groupShotsByZone(shots);
            var groupedLeague = groupShotsByZone(league);
            parseShotchartData(groupedShots, groupedLeague, "advanced");
            parseShotchartData(groupedShots, groupedLeague, "basic");
            var shotchart = {
                shots: shots,
                league: league,
                groupedShots: groupedShots,
                groupedLeague: groupedLeague
            };
            return shotchart
        }

        function parseShotchartData(shots, league, type) {
            var data = {};
            for (var i in shots[type]) {
                var s = shots[type][i];
                var l = league[type][i];
                s.leagueFG_PCT = l.FG_PCT;
                if (s.FG_PCT < l.FG_PCT * .9) {
                    s.leaguePerformance = "below"
                } else if (s.FG_PCT > l.FG_PCT * 1.1) {
                    s.leaguePerformance = "above"
                } else {
                    s.leaguePerformance = "average"
                }
            }
        }

        function groupShotsByZone(shots) {
            var data = {
                basic: {},
                advanced: {}
            };
            for (var i in shots) {
                var shot = shots[i];
                var basic = shot["SHOT_ZONE_BASIC"];
                var advanced = shot["SHOT_ZONE_AREA"] + " | " + shot["SHOT_ZONE_RANGE"];
                // basic
                if (!data.basic[basic]) {
                    data.basic[basic] = {};
                    data.basic[basic].shots = [];
                    data.basic[basic].FGM = 0;
                    data.basic[basic].FGA = 0
                }
                // advanced
                if (!data.advanced[advanced]) {
                    data.advanced[advanced] = {};
                    data.advanced[advanced].shots = [];
                    data.advanced[advanced].FGM = 0;
                    data.advanced[advanced].FGA = 0
                }
                data.basic[basic].shots.push(shot);
                data.advanced[advanced].shots.push(shot);
                if (shot.SHOT_ATTEMPTED_FLAG) {
                    // shots data
                    data.basic[basic].FGA += shot.SHOT_ATTEMPTED_FLAG;
                    data.basic[basic].FGM += shot.SHOT_MADE_FLAG;
                    data.advanced[advanced].FGA += shot.SHOT_ATTEMPTED_FLAG;
                    data.advanced[advanced].FGM += shot.SHOT_MADE_FLAG
                } else {
                    // league average data
                    data.basic[basic].FGA += shot.FGA || 0;
                    data.basic[basic].FGM += shot.FGM || 0;
                    data.advanced[advanced].FGA += shot.FGA || 0;
                    data.advanced[advanced].FGM += shot.FGM || 0
                }
            }
            for (i in data.basic) {
                data.basic[i].FG_PCT = data.basic[i].FGM / data.basic[i].FGA
            }
            for (i in data.advanced) {
                data.advanced[i].FG_PCT = data.advanced[i].FGM / data.advanced[i].FGA
            }
            return data
        }

        function get(params) {
            var deferred = $q.defer();
            var isLineup = params.islineup == "1";
            var endpoint = isLineup ? "shotchartLineup" : "shotchart";
            StatsRequest.get(endpoint, "", params).then(function() {
                var data = StatsRequest.getData();
                if (isLineup) {
                    data.Shot_Chart_Detail = data.ShotChartLineupDetail;
                    data.LeagueAverages = data.ShotChartLineupLeagueAverage
                }
                var shotchart = parse(data);
                deferred.resolve(shotchart)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})(); /** NO 11/13 - this needs to go **/
(function() {
    stats.factory("TeamFactory", TeamFactory);

    function TeamFactory() {
        var allstarID = ["1610616833", "1610616834"];
        var tf = {};
        /**
         * isAllstar()
         *
         * @param {string} id - The tested Team ID
         * @returns {boolean}
         */
        tf.isAllstar = function isAllstar(id) {
            return id === allstarID[0] || id === allstarID[1] ? true : false
        };
        /**
         * isNotAllstar()
         *
         * @param {string} id - The tested Team ID
         * @returns {boolean}
         */
        tf.isNotAllstar = function(id) {
            return id === allstarID[0] || id === allstarID[1] ? false : true
        };
        return tf
    }
})();
(function() {
    stats.service("TextAnalysisFQService", TextAnalysisFQService);
    TextAnalysisFQService.$inject = ["$q", "$http"];

    function TextAnalysisFQService($q, $http) {
        function get() {
            var deferred = $q.defer();
            $http({
                method: "GET",
                url: "/feeds/nl/featuredquestions.json"
            }).then(function(response) {
                if (!response.data) {
                    deferred.reject(response)
                } else {
                    deferred.resolve(response)
                }
            }, function(response) {
                response.results = [];
                response.message = response.statusText;
                deferred.reject(response)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("TextAnalysisService", TextAnalysisService);
    TextAnalysisService.$inject = ["$q", "$filter", "$http"];

    function TextAnalysisService($q, $filter, $http) {
        var sets = {};

        function transform(results, obj) {
            if (!results) {
                return
            }
            for (var i in results) {
                var s = results[i];
                if (s && s.name) {
                    obj[s.name] = s
                } else if (Array.isArray(s)) {
                    transform(s, obj)
                }
            }
            return obj
        }

        function parse(data) {
            var answer = data.Answer;
            if (!answer) {
                return
            }
            if (answer.headers && answer.rowSet) {
                var hidden = [];
                var rowSet = [];
                answer.headers.forEach(function(n, i) {
                    if (/\_fmtHide$/.test(n)) {
                        hidden.push(i)
                    }
                });
                answer.headers = answer.headers.filter(function(n, i) {
                    return hidden.indexOf(i) === -1
                });
                answer.rowSet.forEach(function(row) {
                    row = row.filter(function(n, i) {
                        return hidden.indexOf(i) === -1
                    });
                    rowSet.push(row)
                });
                answer.rowSet = rowSet
            }
            var sets = [data.Answer, // answer
                data.TextAnalysis, // text analysis
                data.Query, // query
                data.QuestionInfo, // question info
                data.ProcCall, // proc call
                data.SimilarQuestions
            ];
            data.sets = sets;
            return sets
        }

        function get(params) {
            var deferred = $q.defer();
            $http({
                method: "GET",
                url: "/stats/textanalysis/",
                params: params
            }).then(function(response) {
                var namedSets = transform(response.data.resultSets, {});
                response.results = parse(namedSets);
                //if (!response.results[0]) {
                // fixed error check
                if (!response.results || response.results[0].headers[0] == "Sorry") {
                    response.message = "Sorry, we did not understand your question";
                    deferred.reject(response)
                } else {
                    deferred.resolve(response)
                }
            }, function(response) {
                response.results = [];
                response.message = response.statusText;
                deferred.reject(response)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    stats.service("TrackingDataService", TrackingDataService);
    TrackingDataService.$inject = ["$q", "StatsRequest"];

    function TrackingDataService($q, StatsRequest) {
        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("leagueTrackingStats", "", params).then(function(response) {
                var datasets = response.resultSets;
                deferred.resolve(datasets)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})();
(function() {
    angular.module("stats").service("VideoStatusService", VideoStatusService);
    VideoStatusService.$inject = ["$q", "$filter", "StatsRequest"];

    function VideoStatusService($q, $filter, StatsRequest) {
        function get(params) {
            var deferred = $q.defer();
            StatsRequest.get("videoStatus", "", params).then(function(response) {
                var data = response.sets;
                deferred.resolve(data)
            });
            return deferred.promise
        }
        return {
            get: get
        }
    }
})(); /*global angular, console */
//kg
stats.service("PlayerVersusService", ["$q", "$filter", "SEASONS", "StatsRequest", function($q, $filter, SEASONS, StatsRequest) {
    "use strict";

    function makeDatasets(obj, datasets) {
        var _compareType = obj.compare.left.type;
        var i;
        for (i in datasets) {
            datasets[i].name = datasets[i].name.replace(/([A-Z]+)/g, ",$1");
            datasets[i].name = datasets[i].name.replace(/,/g, " ")
        }
        if (_compareType === "lineup" || _compareType === "") {
            obj.datasets = {
                Combined: {},
                Individual: {},
                OverallCompare: {}
            }
        } else {
            obj.datasets = {
                OnOffCourt: {},
                Overall: {}
            }
        }
        if (_compareType === "team") {
            obj.datasets.vsPlayerOverall = {}
        }
        obj.shootingsets = {
            ShotAreaOffCourt: {},
            ShotAreaOnCourt: {},
            ShotAreaOverall: {},
            ShotDistanceOffCourt: {},
            ShotDistanceOnCourt: {},
            ShotDistanceOverall: {}
        };
        for (i in datasets) {
            if (obj.datasets[i]) {
                obj.datasets[i] = datasets[i]
            }
            if (obj.shootingsets[i]) {
                obj.shootingsets[i] = datasets[i]
            }
        }
        if (_compareType === "lineup" || _compareType === "") {
            obj.player = {
                a: datasets.OverallCompare.datatable[0],
                b: datasets.OverallCompare.datatable[1]
            }
        } else {
            obj.player = {
                a: datasets.Overall.datatable[0],
                b: obj.compare.left.type == "team" ? datasets.vsPlayerOverall.datatable[0] : datasets.Overall.datatable[1]
            };
            obj.shootingsets = datasets;
            for (i in obj.shootingsets) {
                if (i.indexOf("Shot") < 0) {
                    delete obj.shootingsets[i]
                }
            }
            obj.shootingByDistance = [obj.shootingsets.ShotDistanceOverall, obj.shootingsets.ShotDistanceOnCourt, obj.shootingsets.ShotDistanceOffCourt];
            obj.shootingByArea = [obj.shootingsets.ShotAreaOverall, obj.shootingsets.ShotAreaOnCourt, obj.shootingsets.ShotAreaOffCourt]
        } /* NO - yuck until middle tier gets fixed */
        if (obj.compare.left.type == "team") {
            if (obj.datasets.vsPlayerOverall && obj.datasets.vsPlayerOverall.datatable.length > 0) {
                for (i in obj.datasets.vsPlayerOverall.datatable) {
                    if (obj.datasets.vsPlayerOverall.datatable[i]["TM_TOV_PCT"]) {
                        obj.datasets.vsPlayerOverall.datatable[i]["TM_TOV_PCT"] = obj.datasets.vsPlayerOverall.datatable[i]["TM_TOV_PCT"] / 100
                    }
                }
            }
        } else if (obj.compare.left.type == "lineup") {} else {
            if (obj.datasets.Overall && obj.datasets.Overall.datatable.length > 0) {
                for (i in obj.datasets.Overall.datatable) {
                    if (obj.datasets.Overall.datatable[i]["TM_TOV_PCT"]) {
                        obj.datasets.Overall.datatable[i]["TM_TOV_PCT"] = obj.datasets.Overall.datatable[i]["TM_TOV_PCT"] / 100
                    }
                }
            }
            if (obj.datasets.OnOffCourt && obj.datasets.OnOffCourt.datatable.length > 0) {
                for (i in obj.datasets.OnOffCourt.datatable) {
                    if (obj.datasets.OnOffCourt.datatable[i]["TM_TOV_PCT"]) {
                        obj.datasets.OnOffCourt.datatable[i]["TM_TOV_PCT"] = obj.datasets.OnOffCourt.datatable[i]["TM_TOV_PCT"] / 100
                    }
                }
            }
        } /* NO - end yuck */
        obj.isLoading = false
    }

    function getStats(obj) {
        var _hasPlayerLeft = obj.compare.left.hasPlayer;
        var _hasTeamLeft = obj.compare.left.hasTeam;
        var _hasLineupLeft = !!obj.compare.left.lineupIDs.length;
        var defer = $q.defer();
        var type;
        if (_hasPlayerLeft) {
            type = "playerVsPlayer";
            obj.params.PlayerID = obj.compare.left.info.PERSON_ID;
            obj.params.VsPlayerID = obj.compare.right.info.PERSON_ID
        }
        if (_hasTeamLeft) {
            type = "teamVsPlayer";
            obj.params.TeamID = obj.compare.left.info.id;
            obj.params.VsPlayerID = obj.compare.right.info.PERSON_ID
        }
        if (_hasLineupLeft) {
            type = "playersVsPlayers";
            var lineupIDs = [obj.params.PlayerID1, obj.params.PlayerID2, obj.params.PlayerID3, obj.params.PlayerID4, obj.params.PlayerID5];
            var vsLineupIDs = [obj.params.VsPlayerID1, obj.params.VsPlayerID2, obj.params.VsPlayerID3, obj.params.VsPlayerID4, obj.params.VsPlayerID5];
            obj.compare.left.lineupChosen.forEach(function(value, index, array) {
                lineupIDs[index] = obj.compare.left.lineupChosen[index].PLAYER_ID
            });
            obj.compare.right.lineupChosen.forEach(function(value, index, array) {
                vsLineupIDs[index] = obj.compare.right.lineupChosen[index].PLAYER_ID
            });
            for (var j in obj.params) {
                for (var k = 0, len2 = lineupIDs.length; i < len2; i++) {
                    if (obj.params[lineupIDs[k]]) {
                        obj.params[lineupIDs[k]] = lineupIDs[k]
                    }
                    if (obj.params[vsLineupIDs[k]]) {
                        obj.params[VslineupIDs[k]] = vsLineupIDs[k]
                    }
                }
            }
        }
        obj.isLoading = true;
        obj.showGraph = true;
        StatsRequest.get(type, "", obj.params).then(function() {
            var datasets = StatsRequest.getData();
            makeDatasets(obj, datasets);
            obj.isLoading = false;
            defer.resolve()
        });
        return defer.promise
    }
    return {
        getStats: getStats
    }
}]);
(function() {
    stats.controller("allstarAlltimeLeadersCtrl", allstarAlltimeLeadersCtrl);
    allstarAlltimeLeadersCtrl.$inject = ["$scope", "$http", "$sce"];

    function allstarAlltimeLeadersCtrl($scope, $http, $sce) {
        $scope.isLoading = true;
        $scope.trustAsHtml = $sce.trustAsHtml;
        $scope.leaderTemplate = "/allstarLeaderTemplate.html";
        $http({
            method: "GET",
            url: "/js/data/allstarhistory.js"
        }).then(function(response) {
            $scope.categories = response.data.categories;
            $scope.isLoading = false
        })
    }
})();
(function() {
    stats.controller("GamePredictorCtrl", GamePredictorCtrl);
    GamePredictorCtrl.$inject = ["$scope", "$filter", "$http", "$location", "GamePredictorService"];

    function GamePredictorCtrl($scope, $filter, $http, $location, GamePredictorService) {
        $scope.isLoading = true;
        $scope.hasError = false;
        $scope.playerTemplate = "/playerTemplate.html";
        var params = {
            LeagueID: "00",
            Season: "2015-16",
            WestPlayer1: $location.search().WestPlayer1 || "0",
            WestPlayer2: $location.search().WestPlayer2 || "0",
            WestPlayer3: $location.search().WestPlayer3 || "0",
            WestPlayer4: $location.search().WestPlayer4 || "0",
            WestPlayer5: $location.search().WestPlayer5 || "0",
            EastPlayer1: $location.search().EastPlayer1 || "0",
            EastPlayer2: $location.search().EastPlayer2 || "0",
            EastPlayer3: $location.search().EastPlayer3 || "0",
            EastPlayer4: $location.search().EastPlayer4 || "0",
            EastPlayer5: $location.search().EastPlayer5 || "0"
        };

        function getStats() {
            $scope.isLoading = true;
            GamePredictorService.get(params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false
            })
        }
        getStats()
    }
})();
(function() {
    stats.controller("DraftCombineAgilityCtrl", DraftCombineAgilityCtrl);
    DraftCombineAgilityCtrl.$inject = ["$scope", "SplitsService", "SEASONS", "DraftCombineAgilityService"];

    function DraftCombineAgilityCtrl($scope, SplitsService, SEASONS, DraftCombineAgilityService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            as: "SeasonYear",
            initial: SEASONS.DraftCombineAgility.Season,
            seasonRange: [SEASONS.DraftCombineAgility.SeasonYearFrom, SEASONS.DraftCombineAgility.SeasonYear]
        }]);
        $scope.splits = config.splits;
        $scope.params = config.params;

        function getStats() {
            $scope.isLoading = true;
            DraftCombineAgilityService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false
            })
        }
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("DraftCombineAnthroCtrl", DraftCombineAnthroCtrl);
    DraftCombineAnthroCtrl.$inject = ["$scope", "SplitsService", "SEASONS", "DraftCombineAnthroService"];

    function DraftCombineAnthroCtrl($scope, SplitsService, SEASONS, DraftCombineAnthroService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        $scope.rowsPerPage = 100;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            as: "SeasonYear",
            initial: SEASONS.DraftCombineAnthro.Season,
            seasonRange: [SEASONS.DraftCombineAnthro.SeasonYearFrom, SEASONS.DraftCombineAnthro.SeasonYear]
        }]);
        $scope.splits = config.splits;
        $scope.params = config.params;

        function getStats() {
            $scope.isLoading = true;
            DraftCombineAnthroService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false
            })
        }
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("draftCombineNavCtrl", draftCombineNavCtrl);
    draftCombineNavCtrl.$inject = ["$scope", "$location", "$route"];

    function draftCombineNavCtrl($scope, $location, $route) {
        $scope.$on("$routeChangeSuccess", function(event, routeData) {
            $scope.page = $route.current.page;
            $scope.selected = $scope.pages.filter(function(n) {
                return n.page == $scope.page
            })[0]
        });
        $scope.pages = [{
            page: "summary",
            path: "",
            text: "Summary"
        }, {
            page: "spotup",
            path: "spotup",
            text: "Pop Up Shooting"
        }, {
            page: "nonstationary",
            path: "nonstationary",
            text: "Non Stationary Shooting"
        }, {
            page: "agility",
            path: "agility",
            text: "Strength & Agility"
        }, {
            page: "anthro",
            path: "anthro",
            text: "Anthropometric Stats"
        }, {
            page: "thursday",
            path: "scrimmages/thursday",
            text: "Scrimmages - Thursday"
        }, {
            page: "friday",
            path: "scrimmages/friday",
            text: "Scrimmages - Friday"
        }];
        $scope.onNavChange = function() {
            $location.path($scope.selected.path)
        }
    }
})();
(function() {
    stats.controller("DraftCombineNonStationaryCtrl", DraftCombineNonStationaryCtrl);
    DraftCombineNonStationaryCtrl.$inject = ["$scope", "SplitsService", "SEASONS", "DraftCombineNonStationaryService"];

    function DraftCombineNonStationaryCtrl($scope, SplitsService, SEASONS, DraftCombineNonStationaryService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            as: "SeasonYear",
            initial: SEASONS.DraftCombineNonstationary.Season,
            seasonRange: [SEASONS.DraftCombineNonstationary.SeasonYearFrom, SEASONS.DraftCombineNonstationary.SeasonYear]
        }]);
        $scope.splits = config.splits;
        $scope.params = config.params;

        function getStats() {
            $scope.isLoading = true;
            DraftCombineNonStationaryService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false
            })
        }
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
/*
 *  NO - 11/5 wtf is this
 */
(function() {
    "use strict";
    stats.controller("ScrimmagesFridayCtrl", ScrimmagesFridayCtrl);
    ScrimmagesFridayCtrl.$inject = ["$scope", "$http", "$anchorScroll", "DeepLinksFactory"];

    function ScrimmagesFridayCtrl($scope, $http, $anchorScroll, DeepLinksFactory) {
        var _locationSearchObj = DeepLinksFactory.getSearchURL();
        var _hasSearchURL = DeepLinksFactory.hasSearchURL();
        $scope.game = $scope.game || {};
        $scope.state = $scope.state || {};
        $scope.state.currentGame = _locationSearchObj.game ? _locationSearchObj.game : "1";
        $scope.state.currentType = _locationSearchObj.type ? _locationSearchObj.type : "boxscore";
        $scope.setCurrentGame = setCurrentGameFn;
        $scope.setCurrentType = setCurrentTypeFn;
        $scope.setPeriod = function(p) {
            var _hash = "qtr" + p;
            DeepLinksFactory.setHashURL(_hash);
            $anchorScroll()
        };
        getPlayerStats();
        /**
         * getPlayerStats()
         * Get Player data from JSON file
         */
        function getPlayerStats() {
            var _currentGame = parseInt($scope.state.currentGame, 10) + 2;
            var url = ["/js/data/draftcombine/001150999", _currentGame, "_gamedetail.json"].join("");
            $http.get(url).success(function(data) {
                setGameVars(data);
                setPlayerData(data);
                getPlayByPlays(data.g.p)
            })
        }
        /**
         * getPlayByPlays()
         * Get Play By Play data from JSON file
         */
        function getPlayByPlays(max, current, obj) {
            var _currentGame = parseInt($scope.state.currentGame, 10) + 2;
            var count = current || 1;
            var pbpObj = obj || {};
            var url = ["/js/data/draftcombine/001150999", _currentGame, "_", count, "_pbp.json"].join("");
            // var url = ['001150999', $scope.state.currentGame, '_', count, '_pbp.json'].join('');
            $http.get(url).success(function(data) {
                pbpObj[count] = data.g;
                if (++count <= max) {
                    getPlayByPlays(max, count, pbpObj)
                } else {
                    $scope.plays = pbpObj
                }
            })
        }
        /**
         * setCurrentGame()
         * Sets the current game and updates stats.
         *
         * @param {string} game - The selected game.
         */
        function setCurrentGameFn(game) {
            $scope.state.currentGame = game;
            DeepLinksFactory.setSearchURL({
                game: game
            });
            getPlayerStats()
        }
        /**
         * setCurrentType()
         * Sets the current game and updates stats.
         *
         * @param {string} type - The selected game.
         */
        function setCurrentTypeFn(type) {
            $scope.state.currentType = type;
            DeepLinksFactory.setSearchURL({
                type: type
            });
            getPlayerStats()
        }
        /**
         * setGameVars()
         * set scope variables
         *
         * @param {Object} data - the game detail data object.
         */
        function setGameVars(data) {
            $scope.game.details = data.g;
            $scope.game.attendance = data.g.at;
            $scope.game.status = data.g.stt;
            $scope.game.time = data.g.dur;
            $scope.game.officials = setOfficialsData(data.g.offs.off);
            $scope.game.score = setScoreData(data.g);
            $scope.game.team = setTeamData(data.g)
        }
        /**
         * setPlayerData()
         * set scope variables
         *
         * @param {Object} data - the game detail data object.
         */
        function setPlayerData(data) {
            $scope.datasets = setDatasets(data.g)
        }
        /**
         * setOfficialsData()
         * combine officials names as one string
         *
         * @param {Array} array - the array of officials objects
         *
         * @returns {string} - All officials concatenated as one string, seperated by commas.
         */
        function setOfficialsData(array) {
            var nameArray = [];
            array.forEach(function(value, index, array) {
                var _name = [value.fn, value.ln].join(" ");
                nameArray.push(_name)
            });
            return nameArray.join(", ")
        }
        /**
         * setScoreData()
         * Does amazing stuff here
         *
         * @param {Object} game - the game data object.
         *
         * @returns {Object} scoreObj - The score object.
         */
        function setScoreData(game) {
            var _periods = "q1 q2 q3 q4 ot1 ot2 ot3 ot4 ot5 ot6 ot7 ot8 ot9 ot10".split(" ");
            var scoreObj = {};
            scoreObj.total = {
                vtm: game.vls.s,
                htm: game.hls.s
            };
            // populate scoreObj with keys...
            for (var key in game.vls) {
                // but only if the keys relate to scores
                if (_periods.indexOf(key) > -1) {
                    scoreObj[key] = {}
                }
            }
            // assign values to each score key for visiting team
            for (var vlsKey in game.vls) {
                if (_periods.indexOf(vlsKey) > -1) {
                    scoreObj[vlsKey].vtm = game.vls[vlsKey]
                }
            }
            // assign values to each score key for home team
            for (var hlsKey in game.hls) {
                if (_periods.indexOf(hlsKey) > -1) {
                    scoreObj[hlsKey].htm = game.hls[hlsKey]
                }
            }
            return scoreObj
        }
        /**
         * setTeamData()
         * assign team values to object keys
         *
         * @param {Object} game - the game data object
         *
         * @returns {Object} - Team data variables and values
         */
        function setTeamData(game) {
            return {
                name: {
                    htm: game.hls.tn,
                    vtm: game.vls.tn
                },
                abbr: {
                    htm: game.hls.ta,
                    vtm: game.vls.ta
                }
            }
        }
        /**
         * setDatasets()
         * Format player data as stats table object.
         *
         * @param {Object} game - the game data object
         *
         * @returns {Object} playerArray - The player data array.
         */
        function setDatasets(game) {
            var playerArray = [];
            game.vls.pstsg.title = game.vls.tn;
            game.hls.pstsg.title = game.hls.tn;
            game.vls.pstsg.total = game.vls.tstsg;
            game.hls.pstsg.total = game.hls.tstsg;
            playerArray.push({
                datatable: game.vls.pstsg
            });
            playerArray.push({
                datatable: game.hls.pstsg
            });
            return playerArray
        }
    }
})();
/*
 *  NO - 11/5 wtf is this
 */
(function() {
    "use strict";
    stats.controller("ScrimmagesThursdayCtrl", ScrimmagesThursdayCtrl);
    ScrimmagesThursdayCtrl.$inject = ["$scope", "$http", "$anchorScroll", "DeepLinksFactory"];

    function ScrimmagesThursdayCtrl($scope, $http, $anchorScroll, DeepLinksFactory) {
        var _locationSearchObj = DeepLinksFactory.getSearchURL();
        var _hasSearchURL = DeepLinksFactory.hasSearchURL();
        $scope.game = $scope.game || {};
        $scope.state = $scope.state || {};
        $scope.state.currentGame = _locationSearchObj.game ? _locationSearchObj.game : "1";
        $scope.state.currentType = _locationSearchObj.type ? _locationSearchObj.type : "boxscore";
        $scope.setCurrentGame = setCurrentGameFn;
        $scope.setCurrentType = setCurrentTypeFn;
        $scope.setPeriod = function(p) {
            var _hash = "qtr" + p;
            DeepLinksFactory.setHashURL(_hash);
            $anchorScroll()
        };
        getPlayerStats();
        /**
         * getPlayerStats()
         * Get Player data from JSON file
         */
        function getPlayerStats() {
            var url = ["/js/data/draftcombine/001150999", $scope.state.currentGame, "_gamedetail.json"].join("");
            $http.get(url).success(function(data) {
                setGameVars(data);
                setPlayerData(data);
                getPlayByPlays(data.g.p)
            })
        }
        /**
         * getPlayByPlays()
         * Get Play By Play data from JSON file
         */
        function getPlayByPlays(max, current, obj) {
            var count = current || 1;
            var pbpObj = obj || {};
            var url = ["/js/data/draftcombine/001150999", $scope.state.currentGame, "_", count, "_pbp.json"].join("");
            // var url = ['001150999', $scope.state.currentGame, '_', count, '_pbp.json'].join('');
            $http.get(url).success(function(data) {
                pbpObj[count] = data.g;
                if (++count <= max) {
                    getPlayByPlays(max, count, pbpObj)
                } else {
                    $scope.plays = pbpObj
                }
            })
        }
        /**
         * setCurrentGame()
         * Sets the current game and updates stats.
         *
         * @param {string} game - The selected game.
         */
        function setCurrentGameFn(game) {
            $scope.state.currentGame = game;
            DeepLinksFactory.setSearchURL({
                game: game
            });
            getPlayerStats()
        }
        /**
         * setCurrentType()
         * Sets the current game and updates stats.
         *
         * @param {string} type - The selected game.
         */
        function setCurrentTypeFn(type) {
            $scope.state.currentType = type;
            DeepLinksFactory.setSearchURL({
                type: type
            });
            getPlayerStats()
        }
        /**
         * setGameVars()
         * set scope variables
         *
         * @param {Object} data - the game detail data object.
         */
        function setGameVars(data) {
            $scope.game.details = data.g;
            $scope.game.attendance = data.g.at;
            $scope.game.status = data.g.stt;
            $scope.game.time = data.g.dur;
            $scope.game.officials = setOfficialsData(data.g.offs.off);
            $scope.game.score = setScoreData(data.g);
            $scope.game.team = setTeamData(data.g)
        }
        /**
         * setPlayerData()
         * set scope variables
         *
         * @param {Object} data - the game detail data object.
         */
        function setPlayerData(data) {
            $scope.datasets = setDatasets(data.g)
        }
        /**
         * setOfficialsData()
         * combine officials names as one string
         *
         * @param {Array} array - the array of officials objects
         *
         * @returns {string} - All officials concatenated as one string, seperated by commas.
         */
        function setOfficialsData(array) {
            var nameArray = [];
            array.forEach(function(value, index, array) {
                var _name = [value.fn, value.ln].join(" ");
                nameArray.push(_name)
            });
            return nameArray.join(", ")
        }
        /**
         * setScoreData()
         * Does amazing stuff here
         *
         * @param {Object} game - the game data object.
         *
         * @returns {Object} scoreObj - The score object.
         */
        function setScoreData(game) {
            var _periods = "q1 q2 q3 q4 ot1 ot2 ot3 ot4 ot5 ot6 ot7 ot8 ot9 ot10".split(" ");
            var scoreObj = {};
            scoreObj.total = {
                vtm: game.vls.s,
                htm: game.hls.s
            };
            // populate scoreObj with keys...
            for (var key in game.vls) {
                // but only if the keys relate to scores
                if (_periods.indexOf(key) > -1) {
                    scoreObj[key] = {}
                }
            }
            // assign values to each score key for visiting team
            for (var vlsKey in game.vls) {
                if (_periods.indexOf(vlsKey) > -1) {
                    scoreObj[vlsKey].vtm = game.vls[vlsKey]
                }
            }
            // assign values to each score key for home team
            for (var hlsKey in game.hls) {
                if (_periods.indexOf(hlsKey) > -1) {
                    scoreObj[hlsKey].htm = game.hls[hlsKey]
                }
            }
            return scoreObj
        }
        /**
         * setTeamData()
         * assign team values to object keys
         *
         * @param {Object} game - the game data object
         *
         * @returns {Object} - Team data variables and values
         */
        function setTeamData(game) {
            return {
                name: {
                    htm: game.hls.tn,
                    vtm: game.vls.tn
                },
                abbr: {
                    htm: game.hls.ta,
                    vtm: game.vls.ta
                }
            }
        }
        /**
         * setDatasets()
         * Format player data as stats table object.
         *
         * @param {Object} game - the game data object
         *
         * @returns {Object} playerArray - The player data array.
         */
        function setDatasets(game) {
            var playerArray = [];
            game.vls.pstsg.title = game.vls.tn;
            game.hls.pstsg.title = game.hls.tn;
            game.vls.pstsg.total = game.vls.tstsg;
            game.hls.pstsg.total = game.hls.tstsg;
            playerArray.push({
                datatable: game.vls.pstsg
            });
            playerArray.push({
                datatable: game.hls.pstsg
            });
            return playerArray
        }
    }
})();
(function() {
    stats.controller("DraftCombineSpotUpCtrl", DraftCombineSpotUpCtrl);
    DraftCombineSpotUpCtrl.$inject = ["$scope", "SplitsService", "SEASONS", "DraftCombineSpotUpService"];

    function DraftCombineSpotUpCtrl($scope, SplitsService, SEASONS, DraftCombineSpotUpService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            as: "SeasonYear",
            initial: SEASONS.DraftCombineSpotUp.Season,
            seasonRange: [SEASONS.DraftCombineSpotUp.SeasonYearFrom, SEASONS.DraftCombineSpotUp.SeasonYear]
        }]);
        $scope.splits = config.splits;
        $scope.params = config.params;

        function getStats() {
            $scope.isLoading = true;
            DraftCombineSpotUpService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false
            })
        }
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})(); // NO 11/8 - maybe removce this page?
// NO 11/9 - custom on run it functionality... remove??
(function() {
    stats.controller("DraftCombineSummaryCtrl", DraftCombineSummaryCtrl);
    DraftCombineSummaryCtrl.$inject = ["$scope", "$location", "SplitsService", "SEASONS", "StatsRequest"];

    function DraftCombineSummaryCtrl($scope, $location, SplitsService, SEASONS, StatsRequest) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        $scope.combine = [];
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            as: "SeasonYear",
            initial: SEASONS.DraftCombineSummary.Season,
            seasonRange: [SEASONS.DraftCombineSummary.SeasonYearFrom, SEASONS.DraftCombineSummary.SeasonYear]
        }]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.filterCombineData = function(category, direction) {
            var datatable = $scope.combine.slice(0);
            if (!datatable[0] || typeof datatable[0][category] == "undefined") {
                return
            }
            // sort datatable by sort field
            if (direction) {
                // we want to sort ascending
                // but also keep zeros at the bottom
                // since they are 'null' values
                datatable.sort(function(a, b) {
                    if (a[category] == null) {
                        return 1
                    } else if (a[category] === 0) {
                        return 1
                    } else if (b[category] === 0) {
                        return -1
                    } else if (a[category] < b[category]) {
                        return -1
                    } else if (a[category] > b[category]) {
                        return 1
                    } else {
                        return 0
                    }
                })
            } else {
                datatable.sort(function(a, b) {
                    if (a[category] > b[category]) {
                        return -1
                    } else if (a[category] < b[category]) {
                        return 1
                    } else {
                        return 0
                    }
                })
            }
            return datatable.slice(0, 10)
        };

        function getStats() {
            $scope.isLoading = true;
            StatsRequest.get("draftCombineSummary", "", $scope.params).then(function() {
                var datasets = StatsRequest.getResults();
                $scope.combine = datasets[0].datatable;
                $scope.isLoading = false
            })
        }
        $scope.onrunit = function() {
            var search = {};
            for (var i in $scope.splits) {
                var val = $scope.splits[i].selected.val;
                if (val != $scope.splits[i].default) {
                    search[i] = val
                }
                $scope.params[i] = $scope.splits[i].selected.val
            }
            $location.search(search);
            getStats()
        };
        // init
        getStats()
    }
})();
(function() {
    stats.controller("DraftHistoryCtrl", DraftHistoryCtrl);
    DraftHistoryCtrl.$inject = ["$scope", "DraftHistoryService", "SplitsService", "SEASONS", "TEAMS"];

    function DraftHistoryCtrl($scope, DraftHistoryService, SplitsService, SEASONS, TEAMS) {
        $scope.isLoading = false;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.DraftHistory.SeasonYear,
            range: [SEASONS.DraftHistory.SeasonYearFrom, SEASONS.DraftHistory.SeasonYear],
            includeBefore: [{
                val: "",
                text: "All Time"
            }]
        }, "College", {
            name: "TeamID",
            include: [{
                val: "1610610035",
                text: "Toronto Huskies"
            }, {
                val: "1610610030",
                text: "Indianapolis Olympians"
            }, {
                val: "1610610036",
                text: "Washington Capitols"
            }, {
                val: "1610610025",
                text: "Chicago Stags"
            }, {
                val: "1610610034",
                text: "St. Louis Bombers"
            }, {
                val: "1610610031",
                text: "Pittsburgh Ironmen"
            }, {
                val: "1610610029",
                text: "Indianapolis Jets"
            }, {
                val: "1610610024",
                text: "Baltimore Bullets"
            }, {
                val: "1610610032",
                text: "Providence Steamrollers"
            }]
        }]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.splits.TeamID.options[0].text = "All Franchises";
        $scope.params.OverallPick = "";
        $scope.params.RoundNum = "";
        $scope.params.RoundPick = "";
        $scope.params.TopX = "";
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        $scope.isDefunctTeam = function(teamid) {
            var isActive = TEAMS.some(function(n) {
                return n.id == teamid.toString()
            });
            return !isActive
        };
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            DraftHistoryService.get($scope.params).then(function(datasets) {
                $scope.isLoading = false;
                $scope.datasets = datasets
            })
        }
        // init
        getStats()
    }
})(); /*global $, angular, console, stats */
stats.controller("FantasyComparePlayerAdvancedCtrl", ["$scope", "$location", "Splits", "FantasyCompareService", "SEASONS", function($scope, $location, Splits, FantasyCompareService, SEASONS) {
    "use strict";
    var splits = [{
        name: "Season",
        initial: SEASONS.playerVsPlayerStats.Season,
        seasonRange: $location.search().range
    }, {
        name: "SeasonType",
        initial: SEASONS.playerVsPlayerStats.SeasonType,
        without: ["Pre Season"]
    }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "PlayerIDList", "VsPlayerIDList"];
    $scope.splits = Splits.get(splits);
    $scope.params = {
        MeasureType: "Advanced",
        LeagueID: "00",
        Season: $scope.splits.Season.selected.val,
        SeasonType: $scope.splits.SeasonType.selected.val,
        PerMode: "Totals",
        PlusMinus: $scope.splits.PlusMinus.selected.val,
        PaceAdjust: $scope.splits.PaceAdjust.selected.val,
        Rank: $scope.splits.Rank.selected.val,
        Outcome: $scope.splits.Outcome.selected.val,
        Location: $scope.splits.Location.selected.val,
        Month: $scope.splits.Month.selected.val,
        SeasonSegment: $scope.splits.SeasonSegment.selected.val,
        OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
        VsConference: $scope.splits.VsConference.selected.val,
        VsDivision: $scope.splits.VsDivision.selected.val,
        GameSegment: $scope.splits.GameSegment.selected.val,
        Period: $scope.splits.Period.selected.val,
        LastNGames: $scope.splits.LastNGames.selected.val,
        DateFrom: "",
        DateTo: "",
        PlayerIDList: 0,
        VsPlayerIDList: 0
    };
    $scope.showCol = {
        MIN: {
            visible: false,
            index: 0,
            label: "MIN",
            format: "number",
            invert: false
        },
        OFF_RATING: {
            visible: false,
            index: 1,
            label: "OFF RATING",
            format: "number",
            invert: false
        },
        DEF_RATING: {
            visible: false,
            index: 2,
            label: "DEF RATING",
            format: "number",
            invert: true
        },
        NET_RATING: {
            visible: true,
            index: 3,
            label: "NET RATING",
            format: "number",
            invert: false
        },
        AST_PCT: {
            visible: false,
            index: 4,
            label: "AST %",
            format: "percent",
            invert: false
        },
        AST_TO: {
            visible: false,
            index: 5,
            label: "AST TO",
            format: "number",
            invert: false
        },
        AST_RATIO: {
            visible: true,
            index: 6,
            label: "AST RATIO",
            format: "number",
            invert: false
        },
        OREB_PCT: {
            visible: false,
            index: 7,
            label: "OREB %",
            format: "percent",
            invert: false
        },
        DREB_PCT: {
            visible: false,
            index: 8,
            label: "DREB %",
            format: "percent",
            invert: false
        },
        REB_PCT: {
            visible: true,
            index: 9,
            label: "REB %",
            format: "percent",
            invert: false
        },
        TM_TOV_PCT: {
            visible: false,
            index: 10,
            label: "TO RATIO",
            format: "percent",
            invert: true
        },
        EFG_PCT: {
            visible: true,
            index: 11,
            label: "EFG %",
            format: "percent",
            invert: false
        },
        TS_PCT: {
            visible: false,
            index: 12,
            label: "TS %",
            format: "percent",
            invert: false
        },
        USG_PCT: {
            visible: false,
            index: 13,
            label: "USG %",
            format: "percent",
            invert: false
        },
        PACE: {
            visible: false,
            index: 14,
            label: "PACE",
            format: "number",
            invert: false
        },
        PIE: {
            visible: true,
            index: 15,
            label: "PIE",
            format: "percent",
            invert: false
        }
    };
    $scope.columns = [];
    for (var i in $scope.showCol) {
        $scope.showCol[i].name = i;
        $scope.columns.push($scope.showCol[i])
    }
    $scope.onrunit = function() {
        $location.search().Split = [];
        for (var i in $scope.splits) {
            var val = $scope.splits[i].selected.val;
            if (val != $scope.splits[i].default) {
                $location.search().Split.push(val)
            }
            $scope.params[i] = $scope.splits[i].selected.val
        }
        /*
                var playerIDs = '';
                  var vsPlayerIDs = '';
                  var playerSeparator = '';

                  for (var i = 0, len = $scope.compare.left.lineupIDs.length; i < len; i++) {
                      if(i != (len - 1)){
                          playerSeparator = ',';
                      }else {
                          playerSeparator = '';
                      }

                      playerIDs = playerIDs + $scope.compare.left.lineupIDs[i] + playerSeparator;

                  }

                  for (var i = 0, len = $scope.compare.right.lineupIDs.length; i < len; i++) {
                      if(i != (len - 1)){
                          playerSeparator = ',';
                      }else {
                          playerSeparator = '';
                      }

                      vsPlayerIDs = vsPlayerIDs + $scope.compare.right.lineupIDs[i] + playerSeparator;

                  }
                  */
        var playerIDs = $scope.compare.left.lineupIDs;
        playerIDs = JSON.stringify(playerIDs).replace("[", "").replace("]", "").replace('"', "").replace('"', "");
        var vsPlayerIDs = $scope.compare.right.lineupIDs;
        vsPlayerIDs = JSON.stringify(vsPlayerIDs).replace("[", "").replace("]", "").replace('"', "").replace('"', "");
        $scope.params.PlayerIDList = playerIDs;
        $scope.params.VsPlayerIDList = vsPlayerIDs;
        FantasyCompareService.getStats($scope);
        $location.search()
    };
    $scope.$watch("compare", function() {
        if ($scope.compare.isReady) {
            /*
                      var playerIDs = '';
                      var vsPlayerIDs = '';
                      var playerSeparator = '';

                      for (var i = 0, len = $scope.compare.left.lineupIDs.length; i < len; i++) {
                          if(i != (len - 1)){
                              playerSeparator = ',';
                          }else {
                              playerSeparator = '';
                          }

                          playerIDs = playerIDs + $scope.compare.left.lineupIDs[i] + playerSeparator;

                      }

                      for (var i = 0, len = $scope.compare.right.lineupIDs.length; i < len; i++) {
                          if(i != (len - 1)){
                              playerSeparator = ',';
                          }else {
                              playerSeparator = '';
                          }

                          vsPlayerIDs = vsPlayerIDs + $scope.compare.right.lineupIDs[i] + playerSeparator;

                      }

                      $scope.params.PlayerIDList = playerIDs;
                      $scope.params.VsPlayerIDList = vsPlayerIDs;
                      */
            var playerIDs = $scope.compare.left.lineupIDs;
            playerIDs = JSON.stringify(playerIDs).replace("[", "").replace("]", "").replace('"', "").replace('"', "");
            var vsPlayerIDs = $scope.compare.right.lineupIDs;
            vsPlayerIDs = JSON.stringify(vsPlayerIDs).replace("[", "").replace("]", "").replace('"', "").replace('"', "");
            $scope.params.PlayerIDList = playerIDs;
            $scope.params.VsPlayerIDList = vsPlayerIDs;
            FantasyCompareService.getStats($scope);
            splits[0].seasonRange = $location.search().range;
            $scope.splits = Splits.get(splits)
        }
    }, true)
}]); /*global $, angular, console, stats */
stats.controller("PlayerVsPlayerFourFactorsCtrl", ["$scope", "$location", "Splits", "PlayerVersusService", "SEASONS", function($scope, $location, Splits, PlayerVersusService, SEASONS) {
    "use strict";
    var splits = [{
        name: "Season",
        initial: SEASONS.playerVsPlayerStats.Season
    }, {
        name: "SeasonType",
        initial: SEASONS.playerVsPlayerStats.SeasonType,
        without: ["Pre Season"]
    }, {
        name: "PerMode",
        include: []
    }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames"];
    $scope.splits = Splits.get(splits);
    $scope.params = {
        MeasureType: "Four Factors",
        LeagueID: "00",
        Season: $scope.splits.Season.selected.val,
        SeasonType: $scope.splits.SeasonType.selected.val,
        PerMode: "PerGame",
        PlusMinus: $scope.splits.PlusMinus.selected.val,
        PaceAdjust: $scope.splits.PaceAdjust.selected.val,
        Rank: $scope.splits.Rank.selected.val,
        Outcome: $scope.splits.Outcome.selected.val,
        Location: $scope.splits.Location.selected.val,
        Month: $scope.splits.Month.selected.val,
        SeasonSegment: $scope.splits.SeasonSegment.selected.val,
        OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
        VsConference: $scope.splits.VsConference.selected.val,
        VsDivision: $scope.splits.VsDivision.selected.val,
        GameSegment: $scope.splits.GameSegment.selected.val,
        Period: $scope.splits.Period.selected.val,
        LastNGames: $scope.splits.LastNGames.selected.val,
        DateFrom: "",
        DateTo: ""
    };
    $scope.showCol = {
        MIN: {
            visible: false,
            index: 0,
            label: "MIN",
            format: "number",
            invert: false
        },
        EFG_PCT: {
            visible: true,
            index: 1,
            label: "EFG %",
            format: "percent",
            invert: false
        },
        FTA_RATE: {
            visible: true,
            index: 2,
            label: "FTA RT",
            format: "number",
            invert: false
        },
        TM_TOV_PCT: {
            visible: true,
            index: 3,
            label: "TM TV %",
            format: "percent",
            invert: false
        },
        OREB_PCT: {
            visible: true,
            index: 4,
            label: "OREB %",
            format: "percent",
            invert: false
        },
        OPP_EFG_PCT: {
            visible: true,
            index: 5,
            label: "OPP EFG %",
            format: "percent",
            invert: true
        },
        OPP_FTA_RATE: {
            visible: true,
            index: 6,
            label: "OPP FTA RT",
            format: "number",
            invert: true
        },
        OPP_TOV_PCT: {
            visible: true,
            index: 7,
            label: "OPP FTM",
            format: "percent",
            invert: true
        },
        OPP_OREB_PCT: {
            visible: false,
            index: 8,
            label: "OPP FTA",
            format: "percent",
            invert: true
        }
    };
    $scope.columns = [];
    for (var i in $scope.showCol) {
        $scope.showCol[i].name = i;
        $scope.columns.push($scope.showCol[i])
    }
    $scope.onrunit = function() {
        $location.search().Split = [];
        for (var i in $scope.splits) {
            var val = $scope.splits[i].selected.val;
            if (val != $scope.splits[i].default) {
                $location.search().Split.push(val)
            }
            $scope.params[i] = $scope.splits[i].selected.val
        }
        PlayerVersusService.getStats($scope);
        $location.search()
    };
    $scope.$watch("compare", function() {
        if ($scope.compare.isReady) {
            if ($scope.compare.left.type == "player") {
                $location.path("/");
                return
            }
            PlayerVersusService.getStats($scope);
            splits[0].seasonRange = $location.search().range;
            $scope.splits = Splits.get(splits)
        }
    }, true)
}]); /*global $, angular, console, stats */
stats.controller("FantasyCompareOpponentCtrl", ["$scope", "$location", "Splits", "FantasyCompareService", "SEASONS", function($scope, $location, Splits, FantasyCompareService, SEASONS) {
    "use strict";
    var splits = [{
        name: "Season",
        initial: SEASONS.playerVsPlayerStats.Season
    }, {
        name: "SeasonType",
        initial: SEASONS.playerVsPlayerStats.SeasonType,
        without: ["Pre Season"]
    }, {
        name: "PerMode",
        include: [{
            val: "Per100Possessions",
            text: "Per 100 Poss"
        }, {
            val: "Per100Plays",
            text: "Per 100 Plays"
        }, {
            val: "Per48",
            text: "Per 48 Minutes"
        }, {
            val: "Per40",
            text: "Per 40 Minutes"
        }, {
            val: "Per36",
            text: "Per 36 Minutes"
        }, {
            val: "PerMinute",
            text: "Per 1 Minute"
        }, {
            val: "PerPossession",
            text: "Per 1 Poss"
        }, {
            val: "PerPlay",
            text: "Per 1 Play"
        }, {
            val: "MinutesPer",
            text: "Minutes Per"
        }]
    }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames"];
    $scope.splits = Splits.get(splits);
    $scope.params = {
        MeasureType: "Opponent",
        LeagueID: "00",
        Season: $scope.splits.Season.selected.val,
        SeasonType: $scope.splits.SeasonType.selected.val,
        PerMode: "Totals",
        PlusMinus: $scope.splits.PlusMinus.selected.val,
        PaceAdjust: $scope.splits.PaceAdjust.selected.val,
        Rank: $scope.splits.Rank.selected.val,
        Outcome: $scope.splits.Outcome.selected.val,
        Location: $scope.splits.Location.selected.val,
        Month: $scope.splits.Month.selected.val,
        SeasonSegment: $scope.splits.SeasonSegment.selected.val,
        OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
        VsConference: $scope.splits.VsConference.selected.val,
        VsDivision: $scope.splits.VsDivision.selected.val,
        GameSegment: $scope.splits.GameSegment.selected.val,
        Period: $scope.splits.Period.selected.val,
        LastNGames: $scope.splits.LastNGames.selected.val,
        DateFrom: "",
        DateTo: "",
        PlayerIDList: 0,
        VsPlayerIDList: 0
    };
    $scope.showCol = {
        MIN: {
            visible: false,
            index: 0,
            label: "MIN",
            format: "number",
            invert: false
        },
        OPP_FGM: {
            visible: false,
            index: 1,
            label: "OPP FGM",
            format: "number",
            invert: true
        },
        OPP_FGA: {
            visible: false,
            index: 2,
            label: "OPP FGA",
            format: "number",
            invert: true
        },
        OPP_FG_PCT: {
            visible: true,
            index: 3,
            label: "OPP FG%",
            format: "percent",
            invert: true
        },
        OPP_FG3M: {
            visible: false,
            index: 4,
            label: "OPP 3PM",
            format: "number",
            invert: true
        },
        OPP_FG3A: {
            visible: false,
            index: 5,
            label: "OPP 3PA",
            format: "number",
            invert: true
        },
        OPP_FG3_PCT: {
            visible: true,
            index: 6,
            label: "OPP 3P%",
            format: "percent",
            invert: true
        },
        OPP_FTM: {
            visible: false,
            index: 7,
            label: "OPP FTM",
            format: "number",
            invert: true
        },
        OPP_FTA: {
            visible: false,
            index: 8,
            label: "OPP FTA",
            format: "number",
            invert: true
        },
        OPP_FT_PCT: {
            visible: true,
            index: 9,
            label: "OPP FT%",
            format: "percent",
            invert: true
        },
        OPP_OREB: {
            visible: false,
            index: 10,
            label: "OPP OREB",
            format: "number",
            invert: true
        },
        OPP_DREB: {
            visible: false,
            index: 11,
            label: "OPP DREB",
            format: "number",
            invert: true
        },
        OPP_REB: {
            visible: true,
            index: 12,
            label: "OPP REB",
            format: "number",
            invert: true
        },
        OPP_AST: {
            visible: true,
            index: 13,
            label: "OPP AST",
            format: "number",
            invert: true
        },
        OPP_TOV: {
            visible: false,
            index: 14,
            label: "OPP TOV",
            format: "number",
            invert: false
        },
        OPP_STL: {
            visible: true,
            index: 15,
            label: "OPP STL",
            format: "number",
            invert: true
        },
        OPP_BLK: {
            visible: true,
            index: 16,
            label: "OPP BLK",
            format: "number",
            invert: true
        },
        OPP_PF: {
            visible: false,
            index: 17,
            label: "OPP PF",
            format: "number",
            invert: true
        },
        OPP_PTS: {
            visible: false,
            index: 18,
            label: "OPP PTS",
            format: "number",
            invert: true
        }
    };
    $scope.columns = [];
    for (var i in $scope.showCol) {
        $scope.showCol[i].name = i;
        $scope.columns.push($scope.showCol[i])
    }
    $scope.onrunit = function() {
        $location.search().Split = [];
        for (var i in $scope.splits) {
            var val = $scope.splits[i].selected.val;
            if (val != $scope.splits[i].default) {
                $location.search().Split.push(val)
            }
            $scope.params[i] = $scope.splits[i].selected.val
        }
        FantasyCompareService.getStats($scope);
        $location.search()
    };
    $scope.$watch("compare", function() {
        if ($scope.compare.isReady) {
            /*
                        if ($scope.compare.left.type == 'player'){
                            $location.path('/');
                            return;
                        }
                        */
            var playerIDs = $scope.compare.left.lineupIDs;
            playerIDs = JSON.stringify(playerIDs).replace("[", "").replace("]", "").replace('"', "").replace('"', "");
            var vsPlayerIDs = $scope.compare.right.lineupIDs;
            vsPlayerIDs = JSON.stringify(vsPlayerIDs).replace("[", "").replace("]", "").replace('"', "").replace('"', "");
            $scope.params.PlayerIDList = playerIDs;
            $scope.params.VsPlayerIDList = vsPlayerIDs;
            FantasyCompareService.getStats($scope);
            splits[0].seasonRange = $location.search().range;
            $scope.splits = Splits.get(splits)
        }
    }, true)
}]); /*global $, angular, console, stats */
// Khalid Garner
stats.controller("FantasyCompareBaseCtrl", ["$scope", "$location", "Splits", "FantasyCompareService", "SEASONS", function($scope, $location, Splits, FantasyCompareService, SEASONS) {
    "use strict";
    var splits = [{
        name: "Season",
        initial: SEASONS.playerVsPlayerStats.Season,
        seasonRange: $location.search().seasonRange
    }, {
        name: "SeasonType",
        without: ["Pre Season"]
    }, {
        name: "PerMode",
        include: [{
            val: "Per100Possessions",
            text: "Per 100 Poss"
        }, {
            val: "Per100Plays",
            text: "Per 100 Plays"
        }, {
            val: "Per48",
            text: "Per 48 Minutes"
        }, {
            val: "Per40",
            text: "Per 40 Minutes"
        }, {
            val: "Per36",
            text: "Per 36 Minutes"
        }, {
            val: "PerMinute",
            text: "Per 1 Minute"
        }, {
            val: "PerPossession",
            text: "Per 1 Poss"
        }, {
            val: "PerPlay",
            text: "Per 1 Play"
        }, {
            val: "MinutesPer",
            text: "Minutes Per"
        }]
    }];
    $scope.splits = Splits.get(splits);
    $scope.params = {
        MeasureType: "Base",
        LeagueID: "00",
        Season: $scope.splits.Season.selected.val,
        SeasonType: $scope.splits.SeasonType.selected.val,
        PerMode: $scope.splits.PerMode.selected.val,
        PlusMinus: "N",
        PaceAdjust: "N",
        Rank: "N",
        PlayerIDList: 0,
        Outcome: "",
        Location: "",
        Month: 0,
        SeasonSegment: "",
        OpponentTeamID: 0,
        VsConference: "",
        VsDivision: "",
        Conference: "",
        Division: "",
        GameSegment: "",
        Period: 0,
        LastNGames: 0,
        DateFrom: "",
        DateTo: "",
        ShotClockRange: "",
        VsPlayerIDList: 0
    };
    $scope.showCol = {
        MIN: {
            visible: false,
            index: 0,
            label: "MIN",
            format: "number",
            invert: false
        },
        FGM: {
            visible: false,
            index: 1,
            label: "FGM",
            format: "number",
            invert: false
        },
        FGA: {
            visible: false,
            index: 2,
            label: "FGA",
            format: "number",
            invert: false
        },
        FG_PCT: {
            visible: false,
            index: 3,
            label: "FG%",
            format: "percent",
            invert: false
        },
        FG3M: {
            visible: false,
            index: 4,
            label: "3PM",
            format: "number",
            invert: false
        },
        FG3A: {
            visible: false,
            index: 5,
            label: "3PA",
            format: "number",
            invert: false
        },
        FG3_PCT: {
            visible: false,
            index: 6,
            label: "3P%",
            format: "percent",
            invert: false
        },
        FTM: {
            visible: false,
            index: 7,
            label: "FTM",
            format: "number",
            invert: false
        },
        FTA: {
            visible: false,
            index: 8,
            label: "FTA",
            format: "number",
            invert: false
        },
        FT_PCT: {
            visible: false,
            index: 9,
            label: "FT%",
            format: "percent",
            invert: false
        },
        OREB: {
            visible: false,
            index: 10,
            label: "OREB",
            format: "number",
            invert: false
        },
        DREB: {
            visible: false,
            index: 11,
            label: "DREB",
            format: "number",
            invert: false
        },
        REB: {
            visible: true,
            index: 12,
            label: "REB",
            format: "number",
            invert: false
        },
        AST: {
            visible: true,
            index: 13,
            label: "AST",
            format: "number",
            invert: false
        },
        TOV: {
            visible: false,
            index: 14,
            label: "TOV",
            format: "number",
            invert: true
        },
        STL: {
            visible: true,
            index: 15,
            label: "STL",
            format: "number",
            invert: false
        },
        BLK: {
            visible: true,
            index: 16,
            label: "BLK",
            format: "number",
            invert: false
        },
        BLKA: {
            visible: true,
            index: 17,
            label: "BLKA",
            format: "number",
            invert: false
        },
        PF: {
            visible: false,
            index: 18,
            label: "PF",
            format: "number",
            invert: false
        },
        PFD: {
            visible: false,
            index: 19,
            label: "PFD",
            format: "number",
            invert: false
        },
        PTS: {
            visible: true,
            index: 20,
            label: "PTS",
            format: "number",
            invert: false
        }
    };
    $scope.columns = [];
    for (var i in $scope.showCol) {
        $scope.showCol[i].name = i;
        $scope.columns.push($scope.showCol[i])
    }
    $scope.onrunit = function() {
        $location.search().Split = [];
        for (var i in $scope.splits) {
            var val = $scope.splits[i].selected.val;
            if (val != $scope.splits[i].default) {
                $location.search().Split.push(val)
            }
            $scope.params[i] = $scope.splits[i].selected.val
        }
        var playerIDs = "";
        var vsPlayerIDs = "";
        var playerSeparator = "";
        for (var i = 0, len = $scope.compare.left.lineupIDs.length; i < len; i++) {
            if (i != len - 1) {
                playerSeparator = ","
            } else {
                playerSeparator = ""
            }
            playerIDs = playerIDs + $scope.compare.left.lineupIDs[i] + playerSeparator
        }
        for (var i = 0, len = $scope.compare.right.lineupIDs.length; i < len; i++) {
            if (i != len - 1) {
                playerSeparator = ","
            } else {
                playerSeparator = ""
            }
            vsPlayerIDs = vsPlayerIDs + $scope.compare.right.lineupIDs[i] + playerSeparator
        }
        FantasyCompareService.getStats($scope);
        $location.search()
    };
    $scope.$watch("compare", function() {
        if ($scope.compare.isReady) {
            var playerIDs = $scope.compare.left.lineupIDs;
            playerIDs = JSON.stringify(playerIDs).replace("[", "").replace("]", "").replace('"', "").replace('"', "");
            var vsPlayerIDs = $scope.compare.right.lineupIDs;
            vsPlayerIDs = JSON.stringify(vsPlayerIDs).replace("[", "").replace("]", "").replace('"', "").replace('"', "");
            $scope.params.PlayerIDList = playerIDs;
            $scope.params.VsPlayerIDList = vsPlayerIDs;
            if (!angular.isUndefined($scope.compare.right.lineupIDs[0])) {}
            FantasyCompareService.getStats($scope);
            splits[0].seasonRange = $location.search().range;
            $scope.splits = Splits.get(splits)
        }
    }, true);
    $scope.$on("$locationChangeStart", function() {})
}]); /*global $, angular, console, stats */
stats.controller("FantasyComparePlayerMiscCtrl", ["$scope", "$location", "Splits", "FantasyCompareService", "SEASONS", function($scope, $location, Splits, FantasyCompareService, SEASONS) {
    "use strict";
    var splits = [{
        name: "Season",
        initial: SEASONS.playerVsPlayerStats.Season,
        seasonRange: $location.search().SeasonRange
    }, {
        name: "PerMode",
        include: [{
            val: "Per100Possessions",
            text: "Per 100 Poss"
        }, {
            val: "Per100Plays",
            text: "Per 100 Plays"
        }, {
            val: "Per48",
            text: "Per 48 Minutes"
        }, {
            val: "Per40",
            text: "Per 40 Minutes"
        }, {
            val: "Per36",
            text: "Per 36 Minutes"
        }, {
            val: "PerMinute",
            text: "Per 1 Minute"
        }, {
            val: "PerPossession",
            text: "Per 1 Poss"
        }, {
            val: "PerPlay",
            text: "Per 1 Play"
        }, {
            val: "MinutesPer",
            text: "Minutes Per"
        }]
    }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "SeasonType", "PlayerIDList", "VsPlayerIDList"];
    $scope.splits = Splits.get(splits);
    $scope.params = {
        MeasureType: "Misc",
        LeagueID: "00",
        Season: $scope.splits.Season.selected.val,
        SeasonType: $scope.splits.SeasonType.selected.val,
        PerMode: $scope.splits.PerMode.selected.val,
        PlusMinus: $scope.splits.PlusMinus.selected.val,
        PaceAdjust: $scope.splits.PaceAdjust.selected.val,
        Rank: $scope.splits.Rank.selected.val,
        Outcome: $scope.splits.Outcome.selected.val,
        Location: $scope.splits.Location.selected.val,
        Month: $scope.splits.Month.selected.val,
        SeasonSegment: $scope.splits.SeasonSegment.selected.val,
        OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
        VsConference: $scope.splits.VsConference.selected.val,
        VsDivision: $scope.splits.VsDivision.selected.val,
        GameSegment: $scope.splits.GameSegment.selected.val,
        Period: $scope.splits.Period.selected.val,
        LastNGames: $scope.splits.LastNGames.selected.val,
        DateFrom: "",
        DateTo: "",
        PlayerIDList: 0,
        VsPlayerIDList: 0
    };
    $scope.showCol = {
        MIN: {
            visible: false,
            index: 0,
            label: "MIN",
            format: "number",
            invert: false
        },
        PTS_OFF_TOV: {
            visible: true,
            index: 1,
            label: "PTS OFF TOV",
            format: "number",
            invert: false
        },
        PTS_2ND_CHANCE: {
            visible: true,
            index: 2,
            label: "PTS 2ND CHANCE",
            format: "number",
            invert: false
        },
        PTS_FB: {
            visible: true,
            index: 3,
            label: "PTS FB",
            format: "number",
            invert: false
        },
        PTS_PAINT: {
            visible: false,
            index: 4,
            label: "PTS PAINT",
            format: "number",
            invert: false
        },
        OPP_PTS_OFF_TOV: {
            visible: false,
            index: 5,
            label: "OPP PTS OFF TOV",
            format: "number",
            invert: true
        },
        OPP_PTS_2ND_CHANCE: {
            visible: false,
            index: 6,
            label: "OPP PTS 2ND CHANCE",
            format: "number",
            invert: true
        },
        OPP_PTS_FB: {
            visible: false,
            index: 7,
            label: "OPP PTS FB",
            format: "number",
            invert: true
        },
        OPP_PTS_PAINT: {
            visible: true,
            index: 8,
            label: "OPP PTS PAINT",
            format: "number",
            invert: true
        },
        BLK: {
            visible: false,
            index: 9,
            label: "BLK",
            format: "number",
            invert: false
        },
        BLKA: {
            visible: false,
            index: 10,
            label: "BLKA",
            format: "number",
            invert: true
        },
        PF: {
            visible: false,
            index: 11,
            label: "PF",
            format: "number",
            invert: true
        },
        PFD: {
            visible: false,
            index: 12,
            label: "PFD",
            format: "number",
            invert: true
        }
    };
    $scope.columns = [];
    for (var i in $scope.showCol) {
        $scope.showCol[i].name = i;
        $scope.columns.push($scope.showCol[i])
    }
    $scope.onrunit = function() {
        $location.search().Split = [];
        for (var i in $scope.splits) {
            var val = $scope.splits[i].selected.val;
            if (val != $scope.splits[i].default) {
                $location.search().Split.push(val)
            }
            $scope.params[i] = $scope.splits[i].selected.val
        }
        var playerIDs = "";
        var vsPlayerIDs = "";
        var playerSeparator = "";
        for (var i = 0, len = $scope.compare.left.lineupIDs.length; i < len; i++) {
            if (i != len - 1) {
                playerSeparator = ","
            } else {
                playerSeparator = ""
            }
            playerIDs = playerIDs + $scope.compare.left.lineupIDs[i] + playerSeparator
        }
        for (var i = 0, len = $scope.compare.right.lineupIDs.length; i < len; i++) {
            if (i != len - 1) {
                playerSeparator = ","
            } else {
                playerSeparator = ""
            }
            vsPlayerIDs = vsPlayerIDs + $scope.compare.right.lineupIDs[i] + playerSeparator
        }
        $scope.params.PlayerIDList = playerIDs;
        $scope.params.VsPlayerIDList = vsPlayerIDs;
        FantasyCompareService.getStats($scope);
        $location.search()
    };
    $scope.$watch("compare", function() {
        if ($scope.compare.isReady) {
            var playerIDs = "";
            var vsPlayerIDs = "";
            var playerSeparator = "";
            for (var i = 0, len = $scope.compare.left.lineupIDs.length; i < len; i++) {
                if (i != len - 1) {
                    playerSeparator = ","
                } else {
                    playerSeparator = ""
                }
                playerIDs = playerIDs + $scope.compare.left.lineupIDs[i] + playerSeparator
            }
            for (var i = 0, len = $scope.compare.right.lineupIDs.length; i < len; i++) {
                if (i != len - 1) {
                    playerSeparator = ","
                } else {
                    playerSeparator = ""
                }
                vsPlayerIDs = vsPlayerIDs + $scope.compare.right.lineupIDs[i] + playerSeparator
            }
            $scope.params.PlayerIDList = playerIDs;
            $scope.params.VsPlayerIDList = vsPlayerIDs;
            FantasyCompareService.getStats($scope);
            splits[0].seasonRange = $location.search().range;
            $scope.splits = Splits.get(splits)
        }
    }, true)
}]); /*global $, angular, console, stats */
stats.controller("FantasyComparePlayerScoringCtrl", ["$scope", "$location", "Splits", "FantasyCompareService", "SEASONS", function($scope, $location, Splits, FantasyCompareService, SEASONS) {
    "use strict";
    var splits = [{
        name: "Season",
        initial: SEASONS.playerVsPlayerStats.Season,
        seasonRange: $location.search().range
    }, {
        name: "SeasonType",
        initial: SEASONS.playerVsPlayerStats.SeasonType,
        without: ["Pre Season"]
    }, {
        name: "PerMode",
        include: []
    }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "PlayerIDList", "VsPlayerIDList"];
    $scope.splits = Splits.get(splits);
    $scope.params = {
        MeasureType: "Scoring",
        LeagueID: "00",
        Season: $scope.splits.Season.selected.val,
        SeasonType: $scope.splits.SeasonType.selected.val,
        PerMode: $scope.splits.PerMode.selected.val,
        PlusMinus: $scope.splits.PlusMinus.selected.val,
        PaceAdjust: $scope.splits.PaceAdjust.selected.val,
        Rank: $scope.splits.Rank.selected.val,
        Outcome: $scope.splits.Outcome.selected.val,
        Location: $scope.splits.Location.selected.val,
        Month: $scope.splits.Month.selected.val,
        SeasonSegment: $scope.splits.SeasonSegment.selected.val,
        OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
        VsConference: $scope.splits.VsConference.selected.val,
        VsDivision: $scope.splits.VsDivision.selected.val,
        GameSegment: $scope.splits.GameSegment.selected.val,
        Period: $scope.splits.Period.selected.val,
        LastNGames: $scope.splits.LastNGames.selected.val,
        DateFrom: "",
        DateTo: "",
        PlayerIDList: 0,
        VsPlayerIDList: 0
    };
    $scope.showCol = {
        MIN: {
            visible: false,
            index: 0,
            label: "MIN",
            format: "number",
            invert: false
        },
        PCT_FGA_2PT: {
            visible: false,
            index: 1,
            label: "% FGA 2PT",
            format: "percent",
            invert: false
        },
        PCT_FGA_3PT: {
            visible: false,
            index: 2,
            label: "% FGA 3PT",
            format: "percent",
            invert: false
        },
        PCT_PTS_2PT: {
            visible: false,
            index: 3,
            label: "% PTS 2PT",
            format: "percent",
            invert: false
        },
        PCT_PTS_2PT_MR: {
            visible: true,
            index: 4,
            label: "% PTS 2PT MR",
            format: "percent",
            invert: false
        },
        PCT_PTS_3PT: {
            visible: true,
            index: 5,
            label: "% PTS 3PT",
            format: "percent",
            invert: false
        },
        PCT_PTS_FB: {
            visible: true,
            index: 6,
            label: "% PTS FB",
            format: "percent",
            invert: false
        },
        PCT_PTS_FT: {
            visible: true,
            index: 7,
            label: "% PTS FT",
            format: "percent",
            invert: false
        },
        PCT_PTS_OFF_TOV: {
            visible: false,
            index: 8,
            label: "% PTS OFF TOV",
            format: "percent",
            invert: false
        },
        PCT_PTS_PAINT: {
            visible: true,
            index: 9,
            label: "% PTS PAINT",
            format: "percent",
            invert: false
        },
        PCT_AST_2PM: {
            visible: false,
            index: 10,
            label: "% AST 2PM",
            format: "percent",
            invert: false
        },
        PCT_UAST_2PM: {
            visible: false,
            index: 11,
            label: "% UAST 2PM",
            format: "percent",
            invert: false
        },
        PCT_AST_3PM: {
            visible: false,
            index: 12,
            label: "% AST 3PM ",
            format: "percent",
            invert: false
        },
        PCT_UAST_3PM: {
            visible: false,
            index: 13,
            label: "% UAST 3PM",
            format: "percent",
            invert: false
        },
        PCT_AST_FGM: {
            visible: false,
            index: 14,
            label: "% AST FGM",
            format: "percent",
            invert: false
        },
        PCT_UAST_FGM: {
            visible: false,
            index: 15,
            label: "% UAST FGM",
            format: "percent",
            invert: false
        }
    };
    $scope.columns = [];
    for (var i in $scope.showCol) {
        $scope.showCol[i].name = i;
        $scope.columns.push($scope.showCol[i])
    }
    $scope.onrunit = function() {
        $location.search().Split = [];
        for (var i in $scope.splits) {
            var val = $scope.splits[i].selected.val;
            if (val != $scope.splits[i].default) {
                $location.search().Split.push(val)
            }
            $scope.params[i] = $scope.splits[i].selected.val
        }
        var playerIDs = "";
        var vsPlayerIDs = "";
        var playerSeparator = "";
        for (var i = 0, len = $scope.compare.left.lineupIDs.length; i < len; i++) {
            if (i != len - 1) {
                playerSeparator = ","
            } else {
                playerSeparator = ""
            }
            playerIDs = playerIDs + $scope.compare.left.lineupIDs[i] + playerSeparator
        }
        for (var i = 0, len = $scope.compare.right.lineupIDs.length; i < len; i++) {
            if (i != len - 1) {
                playerSeparator = ","
            } else {
                playerSeparator = ""
            }
            vsPlayerIDs = vsPlayerIDs + $scope.compare.right.lineupIDs[i] + playerSeparator
        }
        $scope.params.PlayerIDList = playerIDs;
        $scope.params.VsPlayerIDList = vsPlayerIDs;
        FantasyCompareService.getStats($scope);
        $location.search()
    };
    $scope.$watch("compare", function() {
        if ($scope.compare.isReady) {
            var playerIDs = "";
            var vsPlayerIDs = "";
            var playerSeparator = "";
            for (var i = 0, len = $scope.compare.left.lineupIDs.length; i < len; i++) {
                if (i != len - 1) {
                    playerSeparator = ","
                } else {
                    playerSeparator = ""
                }
                playerIDs = playerIDs + $scope.compare.left.lineupIDs[i] + playerSeparator
            }
            for (var i = 0, len = $scope.compare.right.lineupIDs.length; i < len; i++) {
                if (i != len - 1) {
                    playerSeparator = ","
                } else {
                    playerSeparator = ""
                }
                vsPlayerIDs = vsPlayerIDs + $scope.compare.right.lineupIDs[i] + playerSeparator
            }
            $scope.params.PlayerIDList = playerIDs;
            $scope.params.VsPlayerIDList = vsPlayerIDs;
            FantasyCompareService.getStats($scope);
            splits[0].seasonRange = $location.search().range;
            $scope.splits = Splits.get(splits)
        }
    }, true)
}]); /*global $, angular, console, stats */
//kg2014
stats.controller("fantasyCompareSummaryCtrl", ["$scope", "$location", "$routeParams", "StatsRequest", "$filter", "TEAMS", "SEASONS", "Splits", "$q", function($scope, $location, $routeParams, StatsRequest, $filter, TEAMS, SEASONS, Splits, $q) {
    "use strict";
    $scope.isLoading = true;
    $scope.limit = 5;
    $scope.params = {
        Season: SEASONS.playerVsPlayerStats.Season,
        LeagueID: "00",
        IsOnlyCurrentSeason: "0",
        SeasonType: "Regular Season",
        lineupIDs: 0,
        vsLineupIDs: 0,
        PlayerID: 0,
        lineupsPassed: false
    };
    $scope.compare = {
        isReady: false,
        left: {
            type: "",
            hasPlayer: false,
            hasTeam: false,
            hasLineup: false,
            isLoading: true,
            lineup: [],
            lineupChosen: [],
            lineupIDs: [],
            lineupShow: false,
            lineupChosenParams: [],
            info: {},
            checked: 0
        },
        right: {
            type: "",
            hasPlayer: false,
            hasTeam: false,
            hasLineup: false,
            isLoading: true,
            lineup: [],
            lineupShow: false,
            lineupChosen: [],
            lineupIDs: [],
            lineupChosenParams: [],
            info: {},
            checked: 0
        }
    };
    $scope.inputPlaceHolder = "Enter a Player's Name...";
    var teams = TEAMS.slice(0);

    function filterByTeamId(n) {
        for (var i = 0, len = teams.length; i < len; i++) {
            if (n == teams[i].id) {
                return teams[i]
            }
        }
    }
    /*
        function getTeams() {

          var filterTeamForConference = function(n) {
            return (n.conference == this);
          };
          $scope.conferences = [{
            name: 'Eastern',
            teams: teams.filter(filterTeamForConference.bind('Eastern'))
          }, {
            name: 'Western',
            teams: teams.filter(filterTeamForConference.bind('Western'))
          }];
        }

        $scope.columns = [];
        for (var i in $scope.showCol) {
          $scope.showCol[i].name = i;
          $scope.columns.push($scope.showCol[i]);
        }
    */
    function getAllPlayers() {
        StatsRequest.get("playerList", "", $scope.params).then(function() {
            var playersAll = StatsRequest.getData().CommonAllPlayers.datatable;
            var playersActive = $filter("filter")(playersAll, {
                ROSTERSTATUS: 1
            });
            $scope.players = playersActive;
            $scope.isLoading = false
        })
    }

    function getLineupInfo(side) {
        var defer = $q.defer();
        StatsRequest.get("playerSummary", "", $scope.params).then(function() {
            $scope.params.PerMode = "Totals";
            var datasets = StatsRequest.getData();
            side.info = datasets.CommonPlayerInfo.datatable[0];
            side.lineup = datasets.CommonPlayerInfo.datatable[0];
            $scope.isLoading = false;
            side.team = filterByTeamId(side.info.TEAM_ID);
            side.type = "lineup";
            $scope.params.PlayerID = side.info.PERSON_ID;
            if (angular.isUndefined($location.search().vsLineupIDs)) {
                side.lineupShow = true
            }
            defer.resolve(side.lineup);
            if (side.lineupChosenParams == "") {
                $scope.checkChange(side.info, side)
            }
        });
        return defer.promise
    }

    function getPlayerInfo(side) {
        //this is where the the compare.left is changing
        var defer = $q.defer();
        StatsRequest.get("playerSummary", "", $scope.params).then(function() {
            $scope.params.PerMode = "Totals";
            var datasets = StatsRequest.getData();
            side.info = datasets.CommonPlayerInfo.datatable[0];
            $scope.isLoading = false;
            side.hasPlayer = true;
            // side.hasTeam = false;
            // side.hasLineup = false;
            side.team = filterByTeamId(side.info.TEAM_ID);
            side.type = "player";
            $scope.params.PlayerID = side.info.PERSON_ID;
            defer.resolve()
        });
        return defer.promise
    }
    $scope.switchSides = function() {
        var tempObj = $scope.compare.left;
        $scope.compare.left = $scope.compare.right;
        $scope.compare.right = tempObj
    };
    $scope.setStatType = function(stat, side) {
        side.type = stat;
        side.lineup = [];
        side.lineupChosen = [];
        side.lineupChosenParams = [];
        side.lineupIDs = [];
        side.checked = 0;
        side.hasTeam = false;
        side.hasLineup = false;
        side.hasPlayer = false;
        $scope.params.lineupsPassed = false;
        $scope.compare.isReady = false
    };
    $scope.setLineup = function(side) {
        side.lineupShow = false;
        side.hasLineup = true;
        side.isReady = true;
        side.type = "lineup"
    };
    $scope.chooseLineup = function(team, side) { // Choose the team for lineup
        side.lineup = [];
        getLineupInfo(team, side);
        side.lineupShow = true;
        side.team = team
    };
    $scope.checkChange = function(item, side) {
        //if (item.selected) {
        side.checked++;
        if (side.lineupChosen.length < 5) {
            side.lineupChosen.push(item);
            if (!$scope.params.lineupsPassed) {
                side.lineupIDs.push(item.PERSON_ID)
            }
        }
    };
    $scope.onSelect = function($item, $model, $label, side) {
        $scope.$item = $item;
        $scope.$model = $model;
        $scope.$label = $label;
        $scope.params.PlayerID = $scope.$model.PERSON_ID;
        if ($scope.compare.left.type == "lineup") {
            getLineupInfo(side)
        } else {
            getPlayerInfo(side)
        }
        side.lineupRoutes = [];
        // side.hasTeam = false;
        // side.hasLineup = false;
        side.info = $scope.$model;
        side.info.paramID = $scope.params.PlayerID;
        side.isReady = true;
        $scope.comparePlayerInfo = "";
        $scope.inputPlaceHolder = "Enter a Player's Name..."
    };
    //init:
    //
    $scope.$watch("compare", function() {
        var search = {};
        if ($scope.compare.left.hasLineup && $scope.compare.right.hasLineup) {
            var getLineupIDs = $scope.compare.left.lineupIDs;
            getLineupIDs = JSON.stringify(getLineupIDs).replace("[", "").replace("]", "");
            var getVSLineupIDs = $scope.compare.right.lineupIDs;
            getVSLineupIDs = JSON.stringify(getVSLineupIDs).replace("[", "").replace("]", "");
            $scope.compare.isReady = true;
            $location.search({
                lineupIDs: getLineupIDs,
                vsLineupIDs: getVSLineupIDs
            });
            $scope.search = "?" + $location.url().split("?")[1]
        }
    }, true);
    $scope.$on("$locationChangeStart", function() {
        if (!angular.isUndefined($location.search().vsLineupIDs)) {
            $scope.params.lineupsPassed = true;
            var lineupIDs = [];
            lineupIDs = $location.search().lineupIDs;
            lineupIDs = lineupIDs.split(",");
            var vsLineupIDs = $location.search().vsLineupIDs;
            vsLineupIDs = vsLineupIDs.split(",");
            $scope.compare.left.hasLineup = true;
            $scope.compare.left.type = "lineup";
            $scope.compare.left.checked = lineupIDs.length;
            $scope.compare.left.linupIDs = lineupIDs;
            $scope.compare.left.lineupShow = false;
            $scope.compare.left.lineupChosen = lineupIDs;
            $scope.compare.left.lineupChosenParams = lineupIDs;
            $scope.compare.right.type = "lineup";
            $scope.compare.right.checked = vsLineupIDs.length;
            $scope.compare.right.linupIDs = vsLineupIDs;
            $scope.compare.right.lineupChosen = vsLineupIDs;
            $scope.compare.right.lineupChosenParams = vsLineupIDs;
            $scope.params.PlayerID = lineupIDs[0]
        }
        if (!$scope.compare.isReady) {
            if ($location.search().lineupIDs && $location.search().vsLineupIDs) {
                $scope.params.lineupIDs = $location.search().lineupIDs;
                $scope.compare.left.lineupIDs = $location.search().lineupIDs;
                getLineupInfo($scope.compare.left).then(function() {
                    $scope.compare.right.lineupIDs = $location.search().vsLineupIDs;
                    $scope.params.vsLineupIDs = $location.search().vsLineupIDs;
                    getLineupInfo($scope.compare.right).then(function() {
                        $scope.compare.isReady = true
                    })
                });
                return
            }
            if ($location.search().PlayerID && $location.search().VsPlayerID) {
                $scope.params.PlayerID = $location.search().PlayerID;
                getPlayerInfo($scope.compare.left).then(function() {
                    $scope.params.PlayerID = $location.search().VsPlayerID;
                    getPlayerInfo($scope.compare.right).then(function() {
                        $scope.compare.isReady = true
                    })
                });
                return
            }
        }
    });
    //mobile nav
    $scope.pages = [{
        value: "/advanced/",
        text: "Advanced"
    }, {
        value: "/misc/",
        text: "Misc"
    }, {
        value: "/scoring/",
        text: "Scoring"
    }, {
        value: "/usage/",
        text: "Usage"
    }];
    $scope.onNavChange = function() {
        var selectedLink = $("#section-links option:selected").val();
        $location.path(selectedLink)
    };
    getAllPlayers()
}]); /*global $, angular, console, stats */
stats.controller("FantasyCompareUsageCtrl", ["$scope", "$location", "Splits", "FantasyCompareService", "SEASONS", function($scope, $location, Splits, FantasyCompareService, SEASONS) {
    "use strict";
    var splits = [{
        name: "Season",
        initial: SEASONS.playerVsPlayerStats.Season,
        seasonRange: $location.search().range
    }, {
        name: "SeasonType",
        initial: SEASONS.playerVsPlayerStats.SeasonType,
        without: ["Pre Season"]
    }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo", "PlayerIDList", "VsPlayerIDList"];
    $scope.splits = Splits.get(splits);
    $scope.params = {
        MeasureType: "Usage",
        LeagueID: "00",
        Season: $scope.splits.Season.selected.val,
        SeasonType: $scope.splits.SeasonType.selected.val,
        PerMode: "Totals",
        PlusMinus: $scope.splits.PlusMinus.selected.val,
        PaceAdjust: $scope.splits.PaceAdjust.selected.val,
        Rank: $scope.splits.Rank.selected.val,
        Outcome: $scope.splits.Outcome.selected.val,
        Location: $scope.splits.Location.selected.val,
        Month: $scope.splits.Month.selected.val,
        SeasonSegment: $scope.splits.SeasonSegment.selected.val,
        OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
        VsConference: $scope.splits.VsConference.selected.val,
        VsDivision: $scope.splits.VsDivision.selected.val,
        GameSegment: $scope.splits.GameSegment.selected.val,
        Period: $scope.splits.Period.selected.val,
        LastNGames: $scope.splits.LastNGames.selected.val,
        DateFrom: "",
        DateTo: "",
        PlayerIDList: 0,
        VsPlayerIDList: 0
    };
    $scope.showCol = {
        MIN: {
            visible: false,
            index: 0,
            label: "MIN",
            format: "number",
            invert: false
        },
        USG_PCT: {
            visible: true,
            index: 1,
            label: "USG%",
            format: "percent",
            invert: false
        },
        PCT_FGM: {
            visible: true,
            index: 2,
            label: "%FGM",
            format: "percent",
            invert: false
        },
        PCT_FGA: {
            visible: true,
            index: 3,
            label: "%FGA",
            format: "percent",
            invert: false
        },
        PCT_FG3M: {
            visible: true,
            index: 4,
            label: "%3PM",
            format: "percent",
            invert: false
        },
        PCT_FG3A: {
            visible: true,
            index: 5,
            label: "%3PA",
            format: "percent",
            invert: false
        },
        PCT_FTM: {
            visible: true,
            index: 6,
            label: "%FTM",
            format: "percent",
            invert: false
        },
        PCT_FTA: {
            visible: false,
            index: 7,
            label: "%FTA",
            format: "percent",
            invert: false
        },
        PCT_OREB: {
            visible: false,
            index: 8,
            label: "%OREB",
            format: "percent",
            invert: false
        },
        PCT_DREB: {
            visible: false,
            index: 9,
            label: "%DREB",
            format: "percent",
            invert: false
        },
        PCT_REB: {
            visible: false,
            index: 10,
            label: "%REB",
            format: "percent",
            invert: true
        },
        PCT_AST: {
            visible: false,
            index: 11,
            label: "%AST",
            format: "percent",
            invert: false
        },
        PCT_TOV: {
            visible: false,
            index: 12,
            label: "%TOV",
            format: "percent",
            invert: false
        },
        PCT_STL: {
            visible: false,
            index: 13,
            label: "%STL",
            format: "percent",
            invert: false
        },
        PCT_BLK: {
            visible: false,
            index: 14,
            label: "%BLK",
            format: "percent",
            invert: false
        },
        PCT_BLKA: {
            visible: false,
            index: 15,
            label: "%BLKA",
            format: "percent",
            invert: false
        },
        PCT_PF: {
            visible: false,
            index: 15,
            label: "%PF",
            format: "percent",
            invert: false
        },
        PCT_PFD: {
            visible: false,
            index: 15,
            label: "%PFD",
            format: "percent",
            invert: false
        },
        PCT_PTS: {
            visible: false,
            index: 15,
            label: "%PTS",
            format: "percent",
            invert: false
        }
    };
    $scope.columns = [];
    for (var i in $scope.showCol) {
        $scope.showCol[i].name = i;
        $scope.columns.push($scope.showCol[i])
    }
    $scope.onrunit = function() {
        $location.search().Split = [];
        for (var i in $scope.splits) {
            var val = $scope.splits[i].selected.val;
            if (val != $scope.splits[i].default) {
                $location.search().Split.push(val)
            }
            $scope.params[i] = $scope.splits[i].selected.val
        }
        var playerIDs = $scope.compare.left.lineupIDs;
        playerIDs = JSON.stringify(playerIDs).replace("[", "").replace("]", "").replace('"', "").replace('"', "");
        var vsPlayerIDs = $scope.compare.right.lineupIDs;
        vsPlayerIDs = JSON.stringify(vsPlayerIDs).replace("[", "").replace("]", "").replace('"', "").replace('"', "");
        $scope.params.PlayerIDList = playerIDs;
        $scope.params.VsPlayerIDList = vsPlayerIDs;
        FantasyCompareService.getStats($scope);
        $location.search()
    };
    $scope.$watch("compare", function() {
        if ($scope.compare.isReady) {
            var playerIDs = $scope.compare.left.lineupIDs;
            playerIDs = JSON.stringify(playerIDs).replace("[", "").replace("]", "").replace('"', "").replace('"', "");
            var vsPlayerIDs = $scope.compare.right.lineupIDs;
            vsPlayerIDs = JSON.stringify(vsPlayerIDs).replace("[", "").replace("]", "").replace('"', "").replace('"', "");
            $scope.params.PlayerIDList = playerIDs;
            $scope.params.VsPlayerIDList = vsPlayerIDs;
            FantasyCompareService.getStats($scope);
            splits[0].seasonRange = $location.search().range;
            $scope.splits = Splits.get(splits)
        }
    }, true)
}]);
(function() {
    stats.controller("FantasyDashboardCtrl", FantasyDashboardCtrl);
    FantasyDashboardCtrl.$inject = ["$scope", "$filter", "$timeout", "FantasyCompareService", "FantasyNewsService", "FantasyWidgetService", "PlayerFantasyBarGraphService", "PlayerListService", "PlayerSummaryService", "PlayerUpcomingGamesService", "SEASONS", "TEAMS"];

    function FantasyDashboardCtrl($scope, $filter, $timeout, FantasyCompareService, FantasyNewsService, FantasyWidgetService, PlayerFantasyBarGraphService, PlayerListService, PlayerSummaryService, PlayerUpcomingGamesService, SEASONS, TEAMS) {
        $scope.search = "";
        $scope.templates = {
            comparePlayer: "/comparePlayerTemplate.html",
            leaderTile: "/leaderTileTemplate.html"
        };
        $scope.onSearchBlur = onSearchBlur;
        $scope.onCompareSearchBlur = onCompareSearchBlur;
        $scope.onSearchKeydown = onSearchKeydown;
        $scope.onPlayerCompareSearchChange = onPlayerCompareSearchChange;
        $scope.getLeaderForCat = getLeaderForCat;
        $scope.setLastNGames = setLastNGames;
        $scope.firstLoad = true;
        $scope.compare = {
            left: {
                side: "left",
                id: ""
            },
            right: {
                side: "right",
                id: ""
            }
        };
        $scope.compareSearch = {
            left: {
                side: "left",
                search: ""
            },
            right: {
                side: "right",
                search: ""
            }
        };
        $scope.comparePlayer = {
            left: {
                side: "left",
                searchIndex: 0
            },
            right: {
                side: "right",
                searchIndex: 0
            }
        };
        $scope.isCompareLoading = true;
        $scope.$watch("search", onSearchUpdate, true);
        $scope.$watch("compare.left", onPlayerCompareChange, true);
        $scope.$watch("compare.right", onPlayerCompareChange, true);
        $scope.fantasyWidgetParams = {
            LeagueID: SEASONS.site.LeagueID,
            Season: SEASONS.site.Season,
            SeasonType: SEASONS.site.SeasonType,
            TodaysPlayers: "N",
            TodaysOpponent: 0,
            ActivePlayers: "Y",
            LastNGames: 3
        };
        var playerListServiceParams = {
            Season: SEASONS.site.Season,
            LeagueID: "00",
            IsOnlyCurrentSeason: "1"
        };
        PlayerListService.get(playerListServiceParams).then(function(players) {
            $scope.players = players
        });
        FantasyNewsService.get().then(function(news) {
            $scope.news = news.slice(0, 7)
        });
        getLeaderStats();

        function getLeaderStats() {
            $scope.isLoading = true;
            FantasyWidgetService.get($scope.fantasyWidgetParams).then(function(data) {
                $scope.isLoading = false;
                var dt = data.FantasyWidgetResult.datatable;
                $scope.leaders = {
                    all: {
                        rows: data.FantasyWidgetResult.datatable
                    }
                };
                $scope.leaders.fdl = getLeaderForCat("FAN_DUEL_PTS", "FANTASY POINTS", true, false);
                $scope.leaders.pts = getLeaderForCat("PTS", "POINTS PER GAME", true, "http://stats.nba.com/league/player/#!/?Season=2015-16&SeasonType=Regular%20Season&LastNGames=" + $scope.fantasyWidgetParams.LastNGames + "&sort=PTS&dir=1");
                $scope.leaders.reb = getLeaderForCat("REB", "REBOUNDS PER GAME", true, "http://stats.nba.com/league/player/#!/?Season=2015-16&SeasonType=Regular%20Season&LastNGames=" + $scope.fantasyWidgetParams.LastNGames + "&sort=REB&dir=1");
                $scope.leaders.ast = getLeaderForCat("AST", "ASSISTS PER GAME", true, "http://stats.nba.com/league/player/#!/?Season=2015-16&SeasonType=Regular%20Season&LastNGames=" + $scope.fantasyWidgetParams.LastNGames + "&sort=AST&dir=1");
                $scope.leaders.tpm = getLeaderForCat("FG3M", "THREE POINTERS MADE", true, "http://stats.nba.com/league/player/#!/?Season=2015-16&SeasonType=Regular%20Season&LastNGames=" + $scope.fantasyWidgetParams.LastNGames + "&sort=FG3M&dir=1");
                $scope.leaders.ftp = getLeaderForCat("FT_PCT", "FREE THROW PERCENT", true, "http://stats.nba.com/league/player/#!/?Season=2015-16&SeasonType=Regular%20Season&LastNGames=" + $scope.fantasyWidgetParams.LastNGames + "&sort=FG_PCT&dir=1");
                $scope.leaders.stl = getLeaderForCat("STL", "STEALS PER GAME", true, "http://stats.nba.com/league/player/#!/?Season=2015-16&SeasonType=Regular%20Season&LastNGames=" + $scope.fantasyWidgetParams.LastNGames + "&sort=STL&dir=1");
                $scope.leaders.blk = getLeaderForCat("BLK", "BLOCKS PER GAME", true, "http://stats.nba.com/league/player/#!/?Season=2015-16&SeasonType=Regular%20Season&LastNGames=" + $scope.fantasyWidgetParams.LastNGames + "&sort=BLK&dir=1");
                $scope.leaders.tov = getLeaderForCat("TOV", "TURNOVERS PER GAME", true, "http://stats.nba.com/league/player/#!/?Season=2015-16&SeasonType=Regular%20Season&LastNGames=" + $scope.fantasyWidgetParams.LastNGames + "&sort=TOV&dir=1");
                $scope.leaders.fgp = getLeaderForCat("FG_PCT", "FIELD GOAL PERCENT", true, "http://stats.nba.com/league/player/#!/?Season=2015-16&SeasonType=Regular%20Season&LastNGames=" + $scope.fantasyWidgetParams.LastNGames + "&sort=FG_PCT&dir=1");
                if ($scope.firstLoad) {
                    $scope.compare.left.id = $scope.leaders.fdl.rows[0].PLAYER_ID;
                    $scope.compare.right.id = $scope.leaders.fdl.rows[1].PLAYER_ID;
                    $scope.firstLoad = false
                }
            })
        }

        function getLeaderForCat(cat, name, isDescending, link) {
            var dt = $scope.leaders.all.rows.slice(0);
            var isPct = cat.indexOf("_PCT") > -1;
            if (isPct) {
                var attempts = cat.substr(0, 2) + "A";
                dt = dt.filter(function(n) {
                    return n[attempts] > 3
                })
            }
            var arr = dt.sort(sortByField.bind("", cat, isDescending)).slice(0, 5);
            var obj = {
                stat: cat,
                rows: arr,
                name: name,
                leader: arr[0],
                isPct: isPct,
                link: link
            };
            return obj
        }

        function setLastNGames(n) {
            $scope.fantasyWidgetParams.LastNGames = n;
            getLeaderStats()
        }

        function setStatBarWidths() {
            var left = $scope.comparePlayer.left;
            var right = $scope.comparePlayer.right;
            var cats = ["PTS", "REB", "AST", "STL"];
            var max = 0;
            if (!left.stats || !right.stats) {
                return
            }
            for (var i in cats) {
                var cat = cats[i];
                max = Math.max(max, left.stats[cat], right.stats[cat])
            }
            for (var i in cats) {
                var cat = cats[i];
                var pct = cat + "_pct";
                left.stats[pct] = left.stats[cat] / max * 60; // max 60%
                right.stats[pct] = right.stats[cat] / max * 60; // max 60%
                left.stats[pct] = Math.max(2, left.stats[pct]); // min 2%
                right.stats[pct] = Math.max(2, right.stats[pct])
            }
        }

        function sortByField(field, desc, a, b) {
            if (desc) {
                return b[field] - a[field]
            } else {
                return a[field] - b[field]
            }
        }

        function onSearchUpdate(s) {
            if (!$scope.players) {
                return
            }
            if (s.length < 3) {
                $scope.showResults = false;
                return
            }
            $scope.activeIndex = 0;
            var terms = s.split(" ");
            var players = $scope.players.slice(0);
            for (var i in terms) {
                var term = terms[i];
                players = $filter("filter")(players, {
                    DISPLAY_LAST_COMMA_FIRST: term
                }, false)
            }
            $scope.searchPlayers = players;
            $scope.hasResults = $scope.searchPlayers.length;
            $scope.showResults = true
        }

        function onSearchBlur() {
            $timeout(function() {
                $scope.showResults = false;
                $scope.search = ""
            }, 250)
        }

        function onCompareSearchBlur(player) {
            $timeout(function() {
                player.search = ""
            }, 250)
        }

        function onPlayerCompareChange(side) {
            if (!side || !side.id) {
                return
            }
            var player = $scope.comparePlayer[side.side];
            var params = {
                MeasureType: "Base",
                LeagueID: "00",
                PlayerID: side.id,
                Season: SEASONS.playerFantasy.Season,
                SeasonType: SEASONS.playerFantasy.SeasonType,
                PerMode: "PerGame",
                PlusMinus: "N",
                PaceAdjust: "N",
                Rank: "N",
                Outcome: "",
                Location: "",
                Month: 0,
                SeasonSegment: "",
                OpponentTeamID: 0,
                VsConference: "",
                VsDivision: "",
                GameSegment: "",
                Period: 0,
                LastNGames: 0,
                DateFrom: "",
                DateTo: "",
                PORound: 0,
                ShotClockRange: "",
                NumberOfGames: 1
            };
            PlayerSummaryService.get(params).then(function(results) {
                player.info = results.playerInfo;
                $scope.isCompareLoading = false
            });
            PlayerFantasyBarGraphService.get(params).then(function(results) {
                player.stats = results.SeasonAvg.datatable[0];
                setStatBarWidths()
            });
            PlayerUpcomingGamesService.get(params).then(function(results) {
                player.nextGame = results.NextNGames.datatable[0]
            })
        }

        function onSearchKeydown($event, player) {
            switch ($event.keyCode) {
                case 13: // enter
                    $scope.compare[player.side].id = player.filtered[player.searchIndex].PERSON_ID;
                    player.searchIndex = 0;
                    player.search = "";
                    $event.preventDefault();
                    break;
                case 38: // up
                    player.searchIndex = Math.max(0, player.searchIndex - 1);
                    $event.preventDefault();
                    break;
                case 40: // down
                    player.searchIndex = Math.min(player.filtered.length - 1, player.searchIndex + 1);
                    $event.preventDefault();
                    break
            }
        }

        function onPlayerCompareSearchChange(player) {
            player.searchIndex = 0;
            if (player.search.length < 3) {
                return
            }
            var terms = player.search.split(" ");
            var players = $scope.players.slice(0);
            for (var i in terms) {
                var term = terms[i];
                players = $filter("filter")(players, {
                    DISPLAY_LAST_COMMA_FIRST: term
                }, false)
            }
            player.filtered = players
        }
    }
})(); /* NO - 12/2 use FantaysNewsService */
(function() {
    stats.controller("FantasyNewsCtrl", FantasyNewsCtrl);
    FantasyNewsCtrl.$inject = ["$scope", "$filter", "$http", "$location", "TEAMS"];

    function FantasyNewsCtrl($scope, $filter, $http, $location, TEAMS) {
        $scope.isLoading = true;
        var TeamID = $location.search().TeamID;
        var fantasyNewsURL = "";
        var profileURL = "";
        if (TeamID) {
            fantasyNewsURL = "/feeds/RotoWirePlayers-583598/" + TeamID + ".json";
            profileURL = "/feeds/teams/profile/" + TeamID + "_TeamProfile.js"
        } else {
            fantasyNewsURL = "/feeds/RotoWirePlayers-583598/masterlist.json"
        }
        $http({
            method: "GET",
            url: fantasyNewsURL
        }).then(onFantasyNewsResponse);

        function onFantasyNewsResponse(response) {
            var data = response.data;
            var getToday = new Date;
            var yesterday = new Date(getToday.getTime() - 24 * 60 * 60 * 1e3);
            var getYesterday = $filter("date")(yesterday, "MM/dd/yyyy h:mm:ss a");
            var getData = [];
            var i = 0;
            var dataset = TeamID ? data.TeamRotowires : data.ListItems;
            dataset.forEach(function(item) {
                if (item.ListItemPubDate <= getYesterday) {
                    return
                }
                getData.push({
                    ListItemCaption: item.ListItemCaption,
                    ListItemDescription: item.ListItemDescription,
                    ListItemPubDate: item.ListItemPubDate,
                    PlayerID: item.PlayerID,
                    FirstName: item.FirstName,
                    LastName: item.LastName
                })
            });
            if (profileURL) {
                $http({
                    method: "GET",
                    url: profileURL
                }).then(function(response) {
                    var TeamName = response.data.TeamDetails[0].Details[0];
                    $scope.TeamName = TeamName.City + " " + TeamName.Nickname
                })
            }
            $scope.data = getData;
            $scope.isLoading = false
        }
    }
})();
(function() {
    stats.controller("FeaturedArchiveCtrl", FeaturedArchiveCtrl);
    FeaturedArchiveCtrl.$inject = ["$scope", "$http", "$location", "$sce"];

    function FeaturedArchiveCtrl($scope, $http, $location, $sce) {
        $scope.isLoading = true;
        $http({
            method: "GET",
            url: "/feeds/StatsBeyondTheNumbersV2-594371/json.js"
        }).then(function(response) {
            $scope.currentPage = 0;
            $scope.itemsPerPage = 10;
            $scope.items = response.data.ListItems;
            $scope.trustAsHtml = $sce.trustAsHtml;
            $scope.isLoading = false;
            $scope.totalItems = $scope.items.length;
            $scope.numberOfPages = Math.ceil($scope.items.length / $scope.itemsPerPage)
        })
    }
})();
(function() {
    stats.controller("BoxscoreGameChartsCtrl", BoxscoreGameChartsCtrl);
    BoxscoreGameChartsCtrl.$inject = ["$scope", "$filter", "boxscoreAdvancedService", "boxscoreTraditionalService", "BoxscoreWinProbabilityService", "BoxscoreFanduelStatsService"];

    function BoxscoreGameChartsCtrl($scope, $filter, boxscoreAdvancedService, boxscoreTraditionalService, BoxscoreWinProbabilityService, BoxscoreFanduelStatsService) {
        $scope.noData = false;
        $scope.hasFanduel = false;
        $scope.hasBoxscore = false;
        $scope.hasLinescore = false;
        $scope.hasGameflow = false;

        function getGameFlowData() {
            $scope.hasGameflow = false;
            var params = {
                GameID: $scope.GameID,
                RunType: "each second"
            };
            BoxscoreWinProbabilityService.get(params).then(function(summary) {
                $scope.hasGameflow = true;
                $scope.summary = summary;
                $scope.summary.otherStats = $scope.boxscore.otherStats
            })
        }

        function getStats() {
            $scope.isLoading = true;
            $scope.hasLinescore = false;
            boxscoreTraditionalService.get($scope.params, $scope.boxscore.summary.HOME_TEAM_ID, $scope.boxscore.summary.VISITOR_TEAM_ID).then(function(linescores) {
                $scope.hasLinescore = true;
                $scope.linescores = linescores;
                $scope.vtm.players = linescores.vtm.datatable;
                $scope.vtm.starters = $filter("filter")(linescores.vtm.datatable, filterStarter);
                $scope.vtm.bench = $filter("filter")(linescores.vtm.datatable, filterBench);
                $scope.vtm.linescore = linescores.vtm.datafooter[0];
                $scope.htm.players = linescores.htm.datatable;
                $scope.htm.starters = $filter("filter")(linescores.htm.datatable, filterStarter);
                $scope.htm.bench = $filter("filter")(linescores.htm.datatable, filterBench);
                $scope.htm.linescore = linescores.htm.datafooter[0];
                $scope.starterStats = parseLinescoreForTeams($scope.vtm.starters, $scope.htm.starters);
                $scope.benchStats = parseLinescoreForTeams($scope.vtm.bench, $scope.htm.bench);
                $scope.teamStats = parseLinescoreForTeams($scope.vtm.players, $scope.htm.players);
                $scope.playerStatsBasic = {
                    vtm: angular.extend({}, $scope.boxscore.teamInfo.vtm, {
                        players: linescores.vtm.datatable
                    }),
                    htm: angular.extend({}, $scope.boxscore.teamInfo.htm, {
                        players: linescores.htm.datatable
                    })
                }
            })
        }

        function getFanduelStats() {
            var params = {
                GameID: $scope.GameID
            };
            $scope.hasFanduel = false;
            BoxscoreFanduelStatsService.get(params).then(function(data) {
                var p = data.FanDuelPlayer.datatable;
                $scope.hasFanduel = p.length > 0;
                $scope.vtm.fanduelPlayers = $filter("filter")(p, {
                    TEAM_ID: $scope.vtm.id
                });
                $scope.htm.fanduelPlayers = $filter("filter")(p, {
                    TEAM_ID: $scope.htm.id
                });
                $scope.vtm.fanduelLeader = $scope.vtm.fanduelPlayers.sort(sortByFanduelPoints)[0];
                $scope.htm.fanduelLeader = $scope.htm.fanduelPlayers.sort(sortByFanduelPoints)[0];
                $scope.fanduelStats = {
                    vtm: {
                        player: $scope.vtm.fanduelLeader,
                        team: $scope.vtm
                    },
                    htm: {
                        player: $scope.htm.fanduelLeader,
                        team: $scope.htm
                    }
                }
            })
        }

        function filterStarter(player) {
            return player.START_POSITION !== ""
        }

        function filterBench(player) {
            return player.START_POSITION === ""
        }

        function sortByFanduelPoints(a, b) {
            return b.FAN_DUEL_PTS - a.FAN_DUEL_PTS
        }

        function parseLinescoreForTeams(vtm, htm) {
            var cats = "PTS REB AST STL BLK TO FGA FGM FG3A FG3M FTA FTM".split(" ");
            var disp = "PTS REB AST STL BLK TOV FG% 3P% FT%".split(" ");
            var teams = ["vtm", "htm"];
            var data = {
                vtm: vtm,
                htm: htm
            };
            var stats = [];
            var obj = {};
            var t, team;
            for (t in teams) {
                team = teams[t];
                obj[team] = {};
                for (var i in cats) {
                    var cat = cats[i];
                    obj[team][cat] = 0;
                    for (var j in data[team]) {
                        var row = data[team][j];
                        obj[team][cat] += row[cat] || 0
                    }
                }
            }
            for (t in teams) {
                team = teams[t];
                obj[team]["TOV"] = obj[team]["TO"];
                obj[team]["FG%"] = obj[team]["FGM"] / obj[team]["FGA"] * 100;
                obj[team]["3P%"] = obj[team]["FG3M"] / obj[team]["FG3A"] * 100;
                obj[team]["FT%"] = obj[team]["FTM"] / obj[team]["FTA"] * 100
            }
            for (var d in disp) {
                var dc = disp[d];
                var o = {
                    label: dc
                };
                for (t in teams) {
                    team = teams[t];
                    o[team] = obj[team][dc]
                }
                stats.push(o)
            }
            return stats
        }
        $scope.$watch("boxscore", function(boxscore) {
            if (!boxscore) {
                return
            }
            $scope.hasBoxscore = true;
            $scope.GameID = boxscore.summary.GAME_ID;
            $scope.vtm = angular.extend({}, $scope.boxscore.teamInfo.vtm);
            $scope.htm = angular.extend({}, $scope.boxscore.teamInfo.htm);
            $scope.pitpStats = {
                label: "PTS IN THE PAINT",
                vtm: angular.extend({}, $scope.boxscore.teamInfo.vtm, {
                    value: $scope.boxscore.otherStats.vtm.PTS_PAINT
                }),
                htm: angular.extend({}, $scope.boxscore.teamInfo.htm, {
                    value: $scope.boxscore.otherStats.htm.PTS_PAINT
                })
            };
            $scope.scStats = {
                label: "SECOND CHANCE PTS",
                vtm: angular.extend({}, $scope.boxscore.teamInfo.vtm, {
                    value: $scope.boxscore.otherStats.vtm.PTS_2ND_CHANCE
                }),
                htm: angular.extend({}, $scope.boxscore.teamInfo.htm, {
                    value: $scope.boxscore.otherStats.htm.PTS_2ND_CHANCE
                })
            };
            $scope.fbStats = {
                label: "FASTBREAK PTS",
                vtm: angular.extend({}, $scope.boxscore.teamInfo.vtm, {
                    value: $scope.boxscore.otherStats.vtm.PTS_FB
                }),
                htm: angular.extend({}, $scope.boxscore.teamInfo.htm, {
                    value: $scope.boxscore.otherStats.htm.PTS_FB
                })
            };
            $scope.params = {
                GameID: $scope.GameID,
                SeasonType: $filter("seasontype")($scope.GameID),
                Season: $filter("seasonid")($scope.GameID),
                RangeType: 0,
                StartPeriod: 1,
                EndPeriod: 10,
                StartRange: 0,
                EndRange: 1e4
            };
            getStats();
            getGameFlowData();
            getFanduelStats()
        })
    }
})(); // NO 11/11 - needs to be de-derekified
(function() {
    stats.controller("BoxscoreAdvancedCtrl", BoxscoreAdvancedCtrl);
    BoxscoreAdvancedCtrl.$inject = ["$scope", "$filter", "boxscoreCommonFactory", "boxscoreAdvancedService", "DeepLinksFactory"];

    function BoxscoreAdvancedCtrl($scope, $filter, boxscoreCommonFactory, boxscoreAdvancedService, DeepLinksFactory) {
        /**
         * @var {Object} _locationSearchObj - Private variable. The $location query string object.
         * @var {Boolean} _hasDeepLink - Private variable. True if _locationSearchObj has 1 or more keys.
         */
        var _locationSearchObj = DeepLinksFactory.getSearchURL();
        var _hasDeepLink = Object.keys(_locationSearchObj).length;
        $scope.isLoading = true;
        $scope.showSplits = _hasDeepLink ? true : false;
        $scope.noData = false;
        $scope.hasError = false;
        // show regular periods only
        $scope.periods = boxscoreCommonFactory.getPeriods();
        $scope.period = _locationSearchObj.ID ? $scope.periods[_locationSearchObj.ID] : $scope.periods[0];
        $scope.didPlay = function(row) {
            return row.COMMENT === ""
        };
        $scope.didNotPlay = function(row) {
            return row.COMMENT !== ""
        };
        $scope.gametimeFormatter = function(value) {
            if (!value) {
                return value
            } else {
                return $filter("countdownClock")(value)
            }
        };
        /*
         *
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            boxscoreAdvancedService.get($scope.params, $scope.boxscore.summary.HOME_TEAM_ID, $scope.boxscore.summary.VISITOR_TEAM_ID).then(function(linescores) {
                $scope.datasets = [linescores.vtm, linescores.htm];
                $scope.isLoading = false;
                if ($scope.datasets[0].datatable.length === 0 || $scope.datasets[1].datatable.length === 0) {
                    $scope.noData = true
                }
            })
        }
        $scope.onrunit = function() {
            $scope.params.RangeType = 2;
            DeepLinksFactory.resetSearchURL();
            DeepLinksFactory.setSearchURL({
                ID: $scope.period.id,
                StartRange: $scope.params.StartRange,
                EndRange: $scope.params.EndRange,
                RangeType: $scope.params.RangeType
            });
            getStats()
        };
        $scope.$watch("period", function(period) {
            $scope.params.StartRange = period.StartRange;
            $scope.params.EndRange = period.EndRange
        });
        $scope.$watch("boxscore", function(boxscore) {
            if (!boxscore) {
                return
            }
            var GameID = boxscore.summary.GAME_ID;
            $scope.sliderStartRange = 0;
            $scope.sliderEndRange = $filter("decimalTime")(boxscore.summary.LIVE_PERIOD);
            // set periods based on game data
            $scope.periods = boxscoreCommonFactory.getPeriods($scope.sliderEndRange);
            $scope.periods[0].EndRange = $scope.sliderEndRange;
            if ($scope.sliderEndRange > 28800) {
                $scope.periods[$scope.periods.length - 1].EndRange = $scope.periods[8].EndRange = $scope.periods[0].EndRange
            }
            $scope.params = {
                GameID: GameID,
                SeasonType: $filter("seasontype")(GameID),
                Season: $filter("seasonid")(GameID),
                RangeType: _locationSearchObj.RangeType || 0,
                StartPeriod: _locationSearchObj.StartPeriod || 1,
                EndPeriod: _locationSearchObj.EndPeriod || 10,
                StartRange: _locationSearchObj.StartRange || $scope.sliderStartRange,
                EndRange: _locationSearchObj.EndRange || $scope.sliderEndRange
            };
            getStats()
        })
    }
})(); // NO 11/11 - needs to be de-derekified
(function() {
    stats.controller("BoxscoreFourFactorsCtrl", BoxscoreFourFactorsCtrl);
    BoxscoreFourFactorsCtrl.$inject = ["$scope", "$filter", "boxscoreCommonFactory", "boxscoreFourFactorsService", "DeepLinksFactory"];

    function BoxscoreFourFactorsCtrl($scope, $filter, boxscoreCommonFactory, boxscoreFourFactorsService, DeepLinksFactory) {
        /**
         * @var {Object} _locationSearchObj - Private variable. The $location query string object.
         * @var {Boolean} _hasDeepLink - Private variable. True if _locationSearchObj has 1 or more keys.
         */
        var _locationSearchObj = DeepLinksFactory.getSearchURL();
        var _hasDeepLink = Object.keys(_locationSearchObj).length;
        $scope.isLoading = true;
        $scope.showSplits = _hasDeepLink ? true : false;
        $scope.noData = false;
        $scope.hasError = false;
        // show regular periods only
        $scope.periods = boxscoreCommonFactory.getPeriods();
        $scope.period = _locationSearchObj.ID ? $scope.periods[_locationSearchObj.ID] : $scope.periods[0];
        $scope.didPlay = function(row) {
            return row.COMMENT === ""
        };
        $scope.didNotPlay = function(row) {
            return row.COMMENT !== ""
        };
        $scope.gametimeFormatter = function(value) {
            if (!value) {
                return value
            } else {
                return $filter("countdownClock")(value)
            }
        };
        /*
         *
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            boxscoreFourFactorsService.get($scope.params, $scope.boxscore.summary.HOME_TEAM_ID, $scope.boxscore.summary.VISITOR_TEAM_ID).then(function(linescores) {
                $scope.datasets = [linescores.vtm, linescores.htm];
                $scope.isLoading = false;
                if ($scope.datasets[0].datatable.length === 0 || $scope.datasets[1].datatable.length === 0) {
                    $scope.noData = true
                }
            })
        }
        $scope.onrunit = function() {
            $scope.params.RangeType = 2;
            DeepLinksFactory.resetSearchURL();
            DeepLinksFactory.setSearchURL({
                ID: $scope.period.id,
                StartRange: $scope.params.StartRange,
                EndRange: $scope.params.EndRange,
                RangeType: $scope.params.RangeType
            });
            getStats()
        };
        $scope.$watch("period", function(period) {
            $scope.params.StartRange = period.StartRange;
            $scope.params.EndRange = period.EndRange
        });
        $scope.$watch("boxscore", function(boxscore) {
            if (!boxscore) {
                return
            }
            var GameID = boxscore.summary.GAME_ID;
            $scope.sliderStartRange = 0;
            $scope.sliderEndRange = $filter("decimalTime")(boxscore.summary.LIVE_PERIOD);
            // set periods based on game data
            $scope.periods = boxscoreCommonFactory.getPeriods($scope.sliderEndRange);
            $scope.periods[0].EndRange = $scope.sliderEndRange;
            if ($scope.sliderEndRange > 28800) {
                $scope.periods[$scope.periods.length - 1].EndRange = $scope.periods[8].EndRange = $scope.periods[0].EndRange
            }
            $scope.params = {
                GameID: GameID,
                SeasonType: $filter("seasontype")(GameID),
                Season: $filter("seasonid")(GameID),
                RangeType: _locationSearchObj.RangeType || 0,
                StartPeriod: _locationSearchObj.StartPeriod || 1,
                EndPeriod: _locationSearchObj.EndPeriod || 10,
                StartRange: _locationSearchObj.StartRange || $scope.sliderStartRange,
                EndRange: _locationSearchObj.EndRange || $scope.sliderEndRange
            };
            getStats()
        })
    }
})(); // NO 11/11 - needs to be de-derekified
(function() {
    stats.controller("BoxscoreMiscCtrl", BoxscoreMiscCtrl);
    BoxscoreMiscCtrl.$inject = ["$scope", "$filter", "boxscoreCommonFactory", "boxscoreMiscService", "DeepLinksFactory"];

    function BoxscoreMiscCtrl($scope, $filter, boxscoreCommonFactory, boxscoreMiscService, DeepLinksFactory) {
        /**
         * @var {Object} _locationSearchObj - Private variable. The $location query string object.
         * @var {Boolean} _hasDeepLink - Private variable. True if _locationSearchObj has 1 or more keys.
         */
        var _locationSearchObj = DeepLinksFactory.getSearchURL();
        var _hasDeepLink = Object.keys(_locationSearchObj).length;
        $scope.isLoading = true;
        $scope.showSplits = _hasDeepLink ? true : false;
        $scope.noData = false;
        $scope.hasError = false;
        // show regular periods only
        $scope.periods = boxscoreCommonFactory.getPeriods();
        $scope.period = _locationSearchObj.ID ? $scope.periods[_locationSearchObj.ID] : $scope.periods[0];
        $scope.didPlay = function(row) {
            return row.COMMENT === ""
        };
        $scope.didNotPlay = function(row) {
            return row.COMMENT !== ""
        };
        $scope.gametimeFormatter = function(value) {
            if (!value) {
                return value
            } else {
                return $filter("countdownClock")(value)
            }
        };
        /*
         *
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            boxscoreMiscService.get($scope.params, $scope.boxscore.summary.HOME_TEAM_ID, $scope.boxscore.summary.VISITOR_TEAM_ID).then(function(linescores) {
                $scope.datasets = [linescores.vtm, linescores.htm];
                $scope.isLoading = false;
                if ($scope.datasets[0].datatable.length === 0 || $scope.datasets[1].datatable.length === 0) {
                    $scope.noData = true
                }
            })
        }
        $scope.onrunit = function() {
            $scope.params.RangeType = 2;
            DeepLinksFactory.resetSearchURL();
            DeepLinksFactory.setSearchURL({
                ID: $scope.period.id,
                StartRange: $scope.params.StartRange,
                EndRange: $scope.params.EndRange,
                RangeType: $scope.params.RangeType
            });
            getStats()
        };
        $scope.$watch("period", function(period) {
            $scope.params.StartRange = period.StartRange;
            $scope.params.EndRange = period.EndRange
        });
        $scope.$watch("boxscore", function(boxscore) {
            if (!boxscore) {
                return
            }
            var GameID = boxscore.summary.GAME_ID;
            $scope.sliderStartRange = 0;
            $scope.sliderEndRange = $filter("decimalTime")(boxscore.summary.LIVE_PERIOD);
            // set periods based on game data
            $scope.periods = boxscoreCommonFactory.getPeriods($scope.sliderEndRange);
            $scope.periods[0].EndRange = $scope.sliderEndRange;
            if ($scope.sliderEndRange > 28800) {
                $scope.periods[$scope.periods.length - 1].EndRange = $scope.periods[8].EndRange = $scope.periods[0].EndRange
            }
            $scope.params = {
                GameID: GameID,
                SeasonType: $filter("seasontype")(GameID),
                Season: $filter("seasonid")(GameID),
                RangeType: _locationSearchObj.RangeType || 0,
                StartPeriod: _locationSearchObj.StartPeriod || 1,
                EndPeriod: _locationSearchObj.EndPeriod || 10,
                StartRange: _locationSearchObj.StartRange || $scope.sliderStartRange,
                EndRange: _locationSearchObj.EndRange || $scope.sliderEndRange
            };
            getStats()
        })
    }
})(); // NO 11/11 - needs to be de-derekified
(function() {
    stats.controller("BoxscoreScoringCtrl", BoxscoreScoringCtrl);
    BoxscoreScoringCtrl.$inject = ["$scope", "$filter", "boxscoreCommonFactory", "boxscoreScoringService", "DeepLinksFactory"];

    function BoxscoreScoringCtrl($scope, $filter, boxscoreCommonFactory, boxscoreScoringService, DeepLinksFactory) {
        /**
         * @var {Object} _locationSearchObj - Private variable. The $location query string object.
         * @var {Boolean} _hasDeepLink - Private variable. True if _locationSearchObj has 1 or more keys.
         */
        var _locationSearchObj = DeepLinksFactory.getSearchURL();
        var _hasDeepLink = Object.keys(_locationSearchObj).length;
        $scope.isLoading = true;
        $scope.showSplits = _hasDeepLink ? true : false;
        $scope.noData = false;
        $scope.hasError = false;
        // show regular periods only
        $scope.periods = boxscoreCommonFactory.getPeriods();
        $scope.period = _locationSearchObj.ID ? $scope.periods[_locationSearchObj.ID] : $scope.periods[0];
        $scope.didPlay = function(row) {
            return row.COMMENT === ""
        };
        $scope.didNotPlay = function(row) {
            return row.COMMENT !== ""
        };
        $scope.gametimeFormatter = function(value) {
            if (!value) {
                return value
            } else {
                return $filter("countdownClock")(value)
            }
        };
        /*
         *
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            boxscoreScoringService.get($scope.params, $scope.boxscore.summary.HOME_TEAM_ID, $scope.boxscore.summary.VISITOR_TEAM_ID).then(function(linescores) {
                $scope.datasets = [linescores.vtm, linescores.htm];
                $scope.isLoading = false;
                if ($scope.datasets[0].datatable.length === 0 || $scope.datasets[1].datatable.length === 0) {
                    $scope.noData = true
                }
            })
        }
        $scope.onrunit = function() {
            $scope.params.RangeType = 2;
            DeepLinksFactory.resetSearchURL();
            DeepLinksFactory.setSearchURL({
                ID: $scope.period.id,
                StartRange: $scope.params.StartRange,
                EndRange: $scope.params.EndRange,
                RangeType: $scope.params.RangeType
            });
            getStats()
        };
        $scope.$watch("period", function(period) {
            $scope.params.StartRange = period.StartRange;
            $scope.params.EndRange = period.EndRange
        });
        $scope.$watch("boxscore", function(boxscore) {
            if (!boxscore) {
                return
            }
            var GameID = boxscore.summary.GAME_ID;
            $scope.sliderStartRange = 0;
            $scope.sliderEndRange = $filter("decimalTime")(boxscore.summary.LIVE_PERIOD);
            // set periods based on game data
            $scope.periods = boxscoreCommonFactory.getPeriods($scope.sliderEndRange);
            $scope.periods[0].EndRange = $scope.sliderEndRange;
            if ($scope.sliderEndRange > 28800) {
                $scope.periods[$scope.periods.length - 1].EndRange = $scope.periods[8].EndRange = $scope.periods[0].EndRange
            }
            $scope.params = {
                GameID: GameID,
                SeasonType: $filter("seasontype")(GameID),
                Season: $filter("seasonid")(GameID),
                RangeType: _locationSearchObj.RangeType || 0,
                StartPeriod: _locationSearchObj.StartPeriod || 1,
                EndPeriod: _locationSearchObj.EndPeriod || 10,
                StartRange: _locationSearchObj.StartRange || $scope.sliderStartRange,
                EndRange: _locationSearchObj.EndRange || $scope.sliderEndRange
            };
            getStats()
        })
    }
})(); // NO 11/11 - needs to be de-derekified
(function() {
    stats.controller("BoxscoreTraditionalCtrl", BoxscoreTraditionalCtrl);
    BoxscoreTraditionalCtrl.$inject = ["$scope", "$filter", "boxscoreCommonFactory", "boxscoreTraditionalService", "DeepLinksFactory"];

    function BoxscoreTraditionalCtrl($scope, $filter, boxscoreCommonFactory, boxscoreTraditionalService, DeepLinksFactory) {
        /**
         * @var {Object} _locationSearchObj - Private variable. The $location query string object.
         * @var {Boolean} _hasDeepLink - Private variable. True if _locationSearchObj has 1 or more keys.
         */
        var _locationSearchObj = DeepLinksFactory.getSearchURL();
        var _hasDeepLink = Object.keys(_locationSearchObj).length;
        $scope.isLoading = true;
        $scope.showSplits = _hasDeepLink ? true : false;
        $scope.noData = false;
        $scope.hasError = false;
        $scope.ai = {};
        // show regular periods only
        $scope.periods = boxscoreCommonFactory.getPeriods();
        $scope.period = _locationSearchObj.ID ? $scope.periods[_locationSearchObj.ID] : $scope.periods[0];
        $scope.didPlay = function(row) {
            return row.COMMENT === ""
        };
        $scope.didNotPlay = function(row) {
            return row.COMMENT !== ""
        };
        $scope.gametimeFormatter = function(value) {
            if (!value) {
                return value
            } else {
                return $filter("countdownClock")(value)
            }
        };
        /*
         *
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            boxscoreTraditionalService.get($scope.params, $scope.boxscore.summary.HOME_TEAM_ID, $scope.boxscore.summary.VISITOR_TEAM_ID).then(function(linescores) {
                $scope.datasets = [linescores.vtm, linescores.htm];
                $scope.isLoading = false;
                if ($scope.datasets[0].datatable.length === 0 || $scope.datasets[1].datatable.length === 0) {
                    $scope.noData = true
                }
            })
        }
        $scope.onrunit = function() {
            $scope.params.RangeType = 2;
            DeepLinksFactory.resetSearchURL();
            DeepLinksFactory.setSearchURL({
                ID: $scope.period.id,
                StartRange: $scope.params.StartRange,
                EndRange: $scope.params.EndRange,
                RangeType: $scope.params.RangeType
            });
            getStats()
        };
        $scope.$watch("period", function(period) {
            $scope.params.StartRange = period.StartRange;
            $scope.params.EndRange = period.EndRange
        });
        $scope.$watch("boxscore", function(boxscore) {
            if (!boxscore) {
                return
            }
            var GameID = boxscore.summary.GAME_ID;
            $scope.sliderStartRange = 0;
            $scope.sliderEndRange = $filter("decimalTime")(boxscore.summary.LIVE_PERIOD);
            // set periods based on game data
            $scope.periods = boxscoreCommonFactory.getPeriods($scope.sliderEndRange);
            $scope.periods[0].EndRange = $scope.sliderEndRange;
            if ($scope.sliderEndRange > 28800) {
                $scope.periods[$scope.periods.length - 1].EndRange = $scope.periods[8].EndRange = $scope.periods[0].EndRange
            }
            $scope.params = {
                GameID: GameID,
                SeasonType: $filter("seasontype")(GameID),
                Season: $filter("seasonid")(GameID),
                RangeType: _locationSearchObj.RangeType || 0,
                StartPeriod: _locationSearchObj.StartPeriod || 1,
                EndPeriod: _locationSearchObj.EndPeriod || 10,
                StartRange: _locationSearchObj.StartRange || $scope.sliderStartRange,
                EndRange: _locationSearchObj.EndRange || $scope.sliderEndRange
            };
            $scope.ai = {
                gamedate: boxscore.gameInfo.GAME_DATE,
                gamename: boxscore.teams.vtm.TEAM_CITY_NAME + " " + boxscore.teams.vtm.TEAM_NICKNAME + " @ " + boxscore.teams.htm.TEAM_CITY_NAME + " " + boxscore.teams.htm.TEAM_NICKNAME
            };
            getStats()
        })
    }
})(); // NO 11/11 - needs to be de-derekified
(function() {
    stats.controller("BoxscoreUsageCtrl", BoxscoreUsageCtrl);
    BoxscoreUsageCtrl.$inject = ["$scope", "$filter", "boxscoreCommonFactory", "boxscoreUsageService", "DeepLinksFactory"];

    function BoxscoreUsageCtrl($scope, $filter, boxscoreCommonFactory, boxscoreUsageService, DeepLinksFactory) {
        /**
         * @var {Object} _locationSearchObj - Private variable. The $location query string object.
         * @var {Boolean} _hasDeepLink - Private variable. True if _locationSearchObj has 1 or more keys.
         */
        var _locationSearchObj = DeepLinksFactory.getSearchURL();
        var _hasDeepLink = Object.keys(_locationSearchObj).length;
        $scope.isLoading = true;
        $scope.showSplits = _hasDeepLink ? true : false;
        $scope.noData = false;
        $scope.hasError = false;
        // show regular periods only
        $scope.periods = boxscoreCommonFactory.getPeriods();
        $scope.period = _locationSearchObj.ID ? $scope.periods[_locationSearchObj.ID] : $scope.periods[0];
        $scope.didPlay = function(row) {
            return row.COMMENT === ""
        };
        $scope.didNotPlay = function(row) {
            return row.COMMENT !== ""
        };
        $scope.gametimeFormatter = function(value) {
            if (!value) {
                return value
            } else {
                return $filter("countdownClock")(value)
            }
        };
        /*
         *
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            boxscoreUsageService.get($scope.params, $scope.boxscore.summary.HOME_TEAM_ID, $scope.boxscore.summary.VISITOR_TEAM_ID).then(function(linescores) {
                $scope.datasets = [linescores.vtm, linescores.htm];
                $scope.isLoading = false;
                if ($scope.datasets[0].datatable.length === 0 || $scope.datasets[1].datatable.length === 0) {
                    $scope.noData = true
                }
            })
        }
        $scope.onrunit = function() {
            $scope.params.RangeType = 2;
            DeepLinksFactory.resetSearchURL();
            DeepLinksFactory.setSearchURL({
                ID: $scope.period.id,
                StartRange: $scope.params.StartRange,
                EndRange: $scope.params.EndRange,
                RangeType: $scope.params.RangeType
            });
            getStats()
        };
        $scope.$watch("period", function(period) {
            $scope.params.StartRange = period.StartRange;
            $scope.params.EndRange = period.EndRange
        });
        $scope.$watch("boxscore", function(boxscore) {
            if (!boxscore) {
                return
            }
            var GameID = boxscore.summary.GAME_ID;
            $scope.sliderStartRange = 0;
            $scope.sliderEndRange = $filter("decimalTime")(boxscore.summary.LIVE_PERIOD);
            // set periods based on game data
            $scope.periods = boxscoreCommonFactory.getPeriods($scope.sliderEndRange);
            $scope.periods[0].EndRange = $scope.sliderEndRange;
            if ($scope.sliderEndRange > 28800) {
                $scope.periods[$scope.periods.length - 1].EndRange = $scope.periods[8].EndRange = $scope.periods[0].EndRange
            }
            $scope.params = {
                GameID: GameID,
                SeasonType: $filter("seasontype")(GameID),
                Season: $filter("seasonid")(GameID),
                RangeType: _locationSearchObj.RangeType || 0,
                StartPeriod: _locationSearchObj.StartPeriod || 1,
                EndPeriod: _locationSearchObj.EndPeriod || 10,
                StartRange: _locationSearchObj.StartRange || $scope.sliderStartRange,
                EndRange: _locationSearchObj.EndRange || $scope.sliderEndRange
            };
            getStats()
        })
    }
})();
(function() {
    stats.controller("BoxscoreNavCtrl", BoxscoreNavCtrl);
    BoxscoreNavCtrl.$inject = ["$scope", "$filter", "$location", "$route"];

    function BoxscoreNavCtrl($scope, $filter, $location, $route) {
        $scope.$on("$routeChangeSuccess", function(event, routeData) {
            setSelectedPage()
        });
        $scope.showStats = false;
        $scope.tabCount = 4;
        $scope.pages = [{
            page: "boxscore",
            path: "",
            text: "Traditional Boxscore",
            type: "stat"
        }, {
            page: "advanced",
            path: "advanced",
            text: "Advanced Stats",
            type: "advanced"
        }, {
            page: "misc",
            path: "misc",
            text: "Misc Stats",
            type: "advanced"
        }, {
            page: "scoring",
            path: "scoring",
            text: "Scoring Stats",
            type: "advanced"
        }, {
            page: "usage",
            path: "usage",
            text: "Usage Stats",
            type: "advanced"
        }, {
            page: "fourfactors",
            path: "fourfactors",
            text: "Four Factors",
            type: "advanced"
        }, {
            page: "playbyplay",
            path: "playbyplay",
            text: "Play By Play",
            type: "playbyplay"
        }, {
            page: "playertracking",
            path: "playertracking",
            text: "Player Tracking",
            type: "tracking"
        }, {
            page: "gamecharts",
            path: "gamecharts",
            text: "Game Charts",
            type: "gamecharts"
        }];
        $scope.onNavChange = function() {
            $location.path($scope.GameID + "/" + $scope.selected.path)
        };

        function setSelectedPage() {
            if (!$scope.pages) {
                return
            }
            $scope.page = $route.current.page;
            $scope.selected = $scope.pages.filter(function(n) {
                return n.page == $scope.page
            })[0]
        }
        $scope.$watch("availableStats", function(availableStats) {
            if (!availableStats) {
                return
            }
            $scope.tabCount = 4;
            $scope.tabCount -= availableStats.playByPlay ? 0 : 1;
            $scope.tabCount -= availableStats.playerTracking ? 0 : 1;
            $scope.tabCount -= availableStats.gameCharts ? 0 : 1;
            $scope.pages = $scope.pages.slice(0);
            if (!availableStats.advancedStats) {
                $scope.pages = $filter("filter")($scope.pages, {
                    type: "!advanced"
                })
            }
            if (!availableStats.playByPlay) {
                $scope.pages = $filter("filter")($scope.pages, {
                    type: "!playbyplay"
                })
            }
            if (!availableStats.playerTracking) {
                $scope.pages = $filter("filter")($scope.pages, {
                    type: "!tracking"
                })
            }
            if (!availableStats.gameCharts) {
                $scope.pages = $filter("filter")($scope.pages, {
                    type: "!gamecharts"
                })
            }
            setSelectedPage()
        })
    }
})(); // NO 11/11 - needs to be de-derekified
(function() {
    stats.controller("BoxscorePlayByPlayCtrl", BoxscorePlayByPlayCtrl);
    BoxscorePlayByPlayCtrl.$inject = ["$scope", "$filter", "$anchorScroll", "boxscorePlayByPlayService", "$timeout", "DeepLinksFactory"];

    function BoxscorePlayByPlayCtrl($scope, $filter, $anchorScroll, boxscorePlayByPlayService, $timeout, DeepLinksFactory) {
        /**
         * @var {boolean} _hasHashURL - Private variable. True if hash fragment exists.
         * @var {boolean} _hasTilde - Private variable. True if hash fragment includes `~`.
         * @var {string} _oldHash - Private variable. The hash fragment including `~`.
         * @var {string} _newHash - Private variable. The hash fragment excluding `~`.
         */
        var _hasHashURL = !!DeepLinksFactory.getHashURL();
        var _oldHash = _hasHashURL ? DeepLinksFactory.getHashURL() : null;
        var _hasTilde = _hasHashURL ? _oldHash.indexOf("~") > -1 : null;
        if (_hasHashURL && _hasTilde) {
            var _newHash = _oldHash.substr(0, _oldHash.length - 1);
            DeepLinksFactory.setHashURL(_newHash)
        }
        $scope.isLoading = true;
        $scope.showSplits = false;
        $scope.noData = false;
        $scope.wait = 20;
        /**
         * setDeepLink()
         *
         * @param {number} $index - The row index in the play-by-play table.
         *
         * @var {string} _hash - Private variable. The new hash fragment.
         *
         *    Adds `~` to the end of the hash to prevent "browser jump"
         *    when the user clicks a video link.
         *
         *    The `~` is removed on page load.
         *
         */
        $scope.setDeepLink = function($index) {
            var _hash = "play" + $index + "~";
            DeepLinksFactory.setHashURL(_hash)
        };
        var periods = [{
            text: "Q1",
            period: 1
        }, {
            text: "Q2",
            period: 2
        }, {
            text: "Q3",
            period: 3
        }, {
            text: "Q4",
            period: 4
        }, {
            text: "OT1",
            period: 5
        }, {
            text: "OT2",
            period: 6
        }, {
            text: "OT3",
            period: 7
        }, {
            text: "OT4",
            period: 8
        }, {
            text: "OT5",
            period: 9
        }, {
            text: "OT6",
            period: 10
        }, {
            text: "OT7",
            period: 11
        }, {
            text: "OT8",
            period: 12
        }, {
            text: "OT9",
            period: 13
        }, {
            text: "OT10",
            period: 14
        }];
        /*
         *
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            boxscorePlayByPlayService.get($scope.params).then(function(plays) {
                $scope.plays = plays;
                $scope.noData = plays.length === 0;
                if ($scope.noData) {
                    $scope.isLoading = false;
                    return
                }
                var numPeriods = plays.slice(-1)[0].PERIOD;
                $scope.periods = periods.slice(0, numPeriods);
                addToDom()
            })
        }
        var addToDom = function() {
            var stopped;
            $scope.isLoading = true;
            stopped = $timeout(function() {
                $scope.isLoading = false;
                $scope.wait += 50;
                addToDom()
            }, 500);
            $scope.$watch("wait", function() {
                if ($scope.wait > $scope.plays.length / 10) {
                    $scope.lazyLoading = true;
                    $scope.isLoading = false
                }
                if ($scope.wait > $scope.plays.length) {
                    $timeout.cancel(stopped);
                    $scope.lazyLoading = false;
                    if (_hasHashURL) {
                        $timeout(function() {
                            $anchorScroll()
                        }, 0)
                    }
                }
            })
        };
        $scope.setPeriod = function(p) {
            var _hash = "qtr" + p;
            DeepLinksFactory.setHashURL(_hash);
            $anchorScroll()
        };
        $scope.$watch("boxscore", function(boxscore) {
            if (!boxscore) {
                return
            }
            var GameID = boxscore.summary.GAME_ID;
            $scope.params = {
                GameID: GameID,
                SeasonType: $filter("seasontype")(GameID),
                Season: $filter("seasonid")(GameID),
                RangeType: 2,
                StartPeriod: 1,
                EndPeriod: 10,
                StartRange: 0,
                EndRange: 55800
            };
            $scope.ai = {
                gamedate: boxscore.gameInfo.GAME_DATE,
                gamename: boxscore.teams.vtm.TEAM_CITY_NAME + " " + boxscore.teams.vtm.TEAM_NICKNAME + " @ " + boxscore.teams.htm.TEAM_CITY_NAME + " " + boxscore.teams.htm.TEAM_NICKNAME
            };
            getStats()
        })
    }
})();
(function() {
    stats.controller("BoxscorePlayerTrackingCtrl", BoxscorePlayerTrackingCtrl);
    BoxscorePlayerTrackingCtrl.$inject = ["$scope", "$filter", "boxscorePlayerTrackingService"];

    function BoxscorePlayerTrackingCtrl($scope, $filter, boxscorePlayerTrackingService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        $scope.noData = false;
        $scope.hasError = false;
        $scope.didPlay = function(row) {
            return row.COMMENT === ""
        };
        $scope.didNotPlay = function(row) {
            return row.COMMENT !== ""
        };
        /*
         *
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            boxscorePlayerTrackingService.get($scope.params, $scope.boxscore.summary.HOME_TEAM_ID, $scope.boxscore.summary.VISITOR_TEAM_ID).then(function(linescores) {
                $scope.datasets = [linescores.vtm, linescores.htm];
                $scope.isLoading = false
            })
        }
        $scope.$watch("boxscore", function(boxscore) {
            if (!boxscore) {
                return
            }
            var GameID = boxscore.summary.GAME_ID;
            $scope.params = {
                GameID: GameID,
                SeasonType: $filter("seasontype")(GameID),
                Season: $filter("seasonid")(GameID),
                RangeType: 2,
                StartPeriod: 1,
                EndPeriod: 10,
                StartRange: 0,
                EndRange: 55800
            };
            getStats()
        })
    }
})();
(function() {
    stats.controller("GameSummaryCtrl", GameSummaryCtrl);
    GameSummaryCtrl.$inject = ["$scope", "$routeParams", "boxscoreSummaryService", "SEASONS", "SEOFactory", "StatsRequest", "ScoresService"];

    function GameSummaryCtrl($scope, $routeParams, boxscoreSummaryService, SEASONS, SEOFactory, StatsRequest, ScoresService) {
        $scope.isLoading = true;
        $scope.getGameHref = getGameHref;
        $scope.navPrev = navPrev;
        $scope.navNext = navNext;
        $scope.scrollLeft = 0;

        function getStats() {
            $scope.isLoading = true;
            boxscoreSummaryService.get($scope.params).then(function(boxscore) {
                $scope.isLoading = false;
                $scope.boxscore = boxscore;
                $scope.summary = boxscore.summary;
                $scope.officials = boxscore.officials;
                $scope.gameInfo = boxscore.gameInfo;
                $scope.av = boxscore.av;
                $scope.teams = boxscore.teams;
                $scope.linescores = boxscore.teams;
                $scope.otherStats = boxscore.otherStats;
                $scope.teamInfo = boxscore.teamInfo;
                $scope.thisSeason = boxscore.season;
                $scope.seasonYear = parseInt(boxscore.season.substr(0, 4), 10);
                $scope.seasonType = boxscore.seasontype;
                $scope.availableStats = {
                    advancedStats: boxscore.av.hasAdvancedStats || false,
                    playerTracking: boxscore.av.hasTracking || false,
                    playByPlay: $scope.seasonYear >= SEASONS.boxscorePlayByPlay.SeasonYear,
                    gameCharts: $scope.seasonYear >= SEASONS.boxscoreCharts.SeasonYear
                };
                var pageTitle = [boxscore.otherStats.vtm.TEAM_CITY, " ", boxscore.otherStats.vtm.TEAM_NAME, " vs ", boxscore.otherStats.htm.TEAM_CITY, " ", boxscore.otherStats.htm.TEAM_NAME, " - ", boxscore.gameInfo.GAME_DATE].join("");
                SEOFactory.appendTitle(pageTitle);
                getPlayoffSeriesData($scope.params);
                getScoreboardForDate($scope.summary.GAMECODE)
            })
        }
        $scope.$on("$routeChangeSuccess", function(event, routeData) {
            if (!$routeParams.GameID || $routeParams.GameID == $scope.GameID) {
                return
            }
            $scope.GameID = $routeParams.GameID;
            $scope.params = {
                GameID: $scope.GameID
            };
            getStats()
        });
        /**
         * formatGameID()
         *
         * @returns {string} - The game ID with padding.
         */
        function formatGameID(number) {
            return ("00000" + number).slice(-10)
        }
        /**
         * getPlayoffSeriesData()
         *
         * @param {Object} params - The $scope.params object.
         * @returns {Object} $scope.playoffGames - Attaches current and total series data.
         */
        function getPlayoffSeriesData(params) {
            var _season = $scope.thisSeason;
            var _series = params.GameID.substr(0, 9);
            // Is the Game ID a number already?
            var _isNumber = typeof params.GameID === "number";
            // Convert the GameID to a number if needed
            var _GameID = _isNumber ? params.GameID : parseInt($scope.params.GameID, 10);
            StatsRequest.get("boxscorePlayoffSeries", "", {
                LeagueID: "00",
                Season: _season,
                SeriesID: _series
            }).then(function(response) {
                var results = response.resultSets;
                $scope.playoffGames = {};
                // Last digit of game ID as a number.
                $scope.playoffGames.current = parseInt(params.GameID.substr(-1, 1));
                // Length of rowSet array as a number.
                $scope.playoffGames.total = parseInt(results[0].rowSet.length);
                // Convert nunbers back into strings and attach to scope.
                $scope.playoffGames.nextGame = formatGameID(_GameID + 1);
                $scope.playoffGames.prevGame = formatGameID(_GameID - 1);
                // Set booleans
                $scope.playoffGames.isPlayoffGame = !!results[0].rowSet.length;
                $scope.playoffGames.isFirstGame = $scope.playoffGames.current === 1;
                $scope.playoffGames.isLastGame = $scope.playoffGames.current === $scope.playoffGames.total
            })
        }
        /**
         * getScoreboardForDate ()
         *
         * @param {string} gamecode
         */
        function getScoreboardForDate(gamecode) {
            var gc = gamecode;
            // gamedate string in MM/dd/YYYY format
            var gdate = gc.substr(4, 2) + "/" + gc.substr(6, 2) + "/" + gc.substr(0, 4);
            var params = {
                LeagueID: "00",
                DayOffset: "0",
                gameDate: gdate
            };
            ScoresService.get(params).then(function(data) {
                if (!data.games) {
                    return
                }
                //filter out current game
                $scope.dailyScoreboard = data.games.filter(function(n) {
                    return n.GAMECODE != gamecode
                });
                $scope.scoreboardMax = ($scope.dailyScoreboard.length + 1) * 120;
                $scope.scoreboardInnerStyle = {
                    width: $scope.scoreboardMax + "px"
                }
            })
        }

        function getGameHref(game) {
            if (game.GAME_STATUS_ID === 3) {
                return "/game/#!/" + game.GAME_ID
            } else {
                return ""
            }
        }

        function navPrev(e) {
            e.preventDefault();
            var $sb = $(".stats-game-scoreboard__holder");
            var left = $sb.scrollLeft();
            $scope.scrollLeft = Math.max(0, left - 130)
        }

        function navNext(e) {
            e.preventDefault();
            var $sb = $(".stats-game-scoreboard__holder");
            var left = $sb.scrollLeft();
            $scope.scrollLeft = Math.min($scope.scoreboardMax, left + 120);
            console.log($scope.scoreboardMax, $scope.scrollLeft)
        }
    }
})();
(function() {
    stats.controller("GlossaryCtrl", GlossaryCtrl);
    GlossaryCtrl.$inject = ["$scope", "$http"];

    function GlossaryCtrl($scope, $http) {
        $scope.isLoading = true;
        var groupCategories = function(data) {
            var obj = {};
            for (var i in data) {
                var item = data[i];
                var cat = item.ListItemImageCaption;
                if (!obj[cat]) {
                    obj[cat] = []
                }
                obj[cat].push(item)
            }
            return obj
        };
        $http({
            method: "GET",
            url: "/feeds/statsv2-glossary-585341/json.js"
        }).then(function(response) {
            $scope.isLoading = false;
            var data = response.data.ListItems;
            $scope.categories = groupCategories(data)
        })
    }
})();
(function() {
    stats.controller("VideoStatusCtrl", VideoStatusCtrl);
    VideoStatusCtrl.$inject = ["$scope", "$location", "VideoStatusService"];

    function VideoStatusCtrl($scope, $location, VideoStatusService) {
        $scope.isLoading = true;
        $scope.hasGames = false;
        $scope.params = {
            LeagueID: "00",
            gameDate: ""
        };
        $scope.$watch(function() {
            return $location.path()
        }, function() {
            if ($location.path().slice(1)) {
                $scope.params.gameDate = $location.path().slice(1);
                getStats()
            }
        });
        /*
         *
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            VideoStatusService.get($scope.params).then(function(datasets) {
                $scope.isLoading = false;
                $scope.datasets = datasets;
                $scope.hasGames = !!$scope.datasets.VideoStatus.datatable.length
            })
        }
    }
})();
(function() {
    stats.controller("HelpWhatsNewCtrl", HelpWhatsNewCtrl);
    HelpWhatsNewCtrl.$inject = ["$scope", "$http", "$sce"];

    function HelpWhatsNewCtrl($scope, $http, $sce) {
        $scope.isLoading = true;
        $scope.renderHtml = function(data) {
            return $sce.trustAsHtml(data)
        };
        $http({
            method: "GET",
            url: "/feeds/StatsWhatsNew-589235/json.js"
        }).then(function(response) {
            $scope.isLoading = false;
            $scope.data = response.data.ListItems
        })
    }
})();
(function() {
    stats.controller("FranchiseHistoryCtrl", FranchiseHistoryCtrl);
    FranchiseHistoryCtrl.$inject = ["$scope", "FranchiseHistoryService"];

    function FranchiseHistoryCtrl($scope, FranchiseHistoryService) {
        $scope.isLoading = true;
        $scope.rowsPerPage = 1e3;
        $scope.params = {
            LeagueID: "00"
        };
        $scope.datasets = {};

        function getStats() {
            $scope.isLoading = true;
            FranchiseHistoryService.get($scope.params).then(function(datasets) {
                $scope.isLoading = false;
                $scope.datasets = datasets
            })
        }
        // init
        getStats()
    }
})();
(function() {
    stats.controller("HomepageBeyondTheNumbersCtrl", HomepageBeyondTheNumbersCtrl);
    HomepageBeyondTheNumbersCtrl.$inject = ["$scope", "$http", "$sce"];

    function HomepageBeyondTheNumbersCtrl($scope, $http, $sce) {
        $scope.isLoading = true;
        $http({
            method: "GET",
            url: "/feeds/StatsBeyondTheNumbersV2-594371/json.js"
        }).then(function(response) {
            var slides = response.data.ListItems;
            $scope.trustAsHtml = $sce.trustAsHtml;
            $scope.slides = slides.slice(0, 5);
            $scope.isLoading = false
        })
    }
})();
(function() {
    stats.controller("HomepageBoxScoresCtrl", HomepageBoxScoresCtrl);
    HomepageBoxScoresCtrl.$inject = ["$scope", "$filter", "$http"];

    function HomepageBoxScoresCtrl($scope, $filter, $http) {
        $scope.isLoading = true;
        $http({
            method: "GET",
            url: "/feeds/StatsV2BoxScores-589802/json.js"
        }).then(function(response) {
            var data = response.data.ListItems;
            $scope.data = data.slice(0, 6);
            $scope.isLoading = false
        });
        var today = new Date;
        $scope.month = $filter("date")(today, "M");
        $scope.day = $filter("date")(today, "d");
        $scope.year = $filter("date")(today, "yyyy");
        //form submit
        $scope.submit = function() {
            var url = "/scores/#!/" + $scope.month + "/" + $scope.day + "/" + $scope.year;
            location.href = url
        }
    }
})();
(function() {
    stats.controller("HomepageBreakingNewsCtrl", HomepageBreakingNewsCtrl);
    HomepageBreakingNewsCtrl.$inject = ["$scope", "$http", "$sce"];

    function HomepageBreakingNewsCtrl($scope, $http, $sce) {
        $http.get("/frags/homepage-breaking-news.html").then(function(resp) {
            $scope.breakingNews = $sce.trustAsHtml(resp.data)
        })
    }
})();
(function() {
    stats.controller("HomepageFantasyNewsCtrl", HomepageFantasyNewsCtrl);
    HomepageFantasyNewsCtrl.$inject = ["$scope", "$filter", "$http"];

    function HomepageFantasyNewsCtrl($scope, $filter, $http) {
        $http({
            method: "GET",
            url: "/feeds/RotoWirePlayers-583598/masterslimlist.json"
        }).then(function(response) {
            var data = response.data;
            var getToday = new Date;
            var getYesterday = $filter("date")(new Date(getToday.getTime() - 24 * 60 * 60 * 1e3), "MM/dd/yyyy h:mm:ss a");
            var getData = [];
            data.ListItems.forEach(function(item) {
                if (item.ListItemPubDate <= getYesterday) {
                    return
                }
                getData.push({
                    ListItemCaption: item.ListItemCaption,
                    ListItemDescription: item.ListItemDescription,
                    ListItemPubDate: item.ListItemPubDate,
                    PlayerID: item.PlayerID
                })
            });
            $scope.data = getData.slice(0, 3);
            $scope.isLoading = false
        })
    }
})();
(function() {
    stats.controller("HomepageGlossaryCtrl", HomepageGlossaryCtrl);
    HomepageGlossaryCtrl.$inject = ["$scope", "$http"];

    function HomepageGlossaryCtrl($scope, $http) {
        $scope.isLoading = true;
        $http({
            method: "GET",
            url: "/feeds/statsv2-glossary-585341/json.js"
        }).then(function(response) {
            var data = response.data.ListItems;
            $scope.data = data.slice(0, 1);
            $scope.isLoading = false
        })
    }
})();
(function() {
    stats.controller("HomepageHeadlinesCtrl", HomepageHeadlinesCtrl);
    HomepageHeadlinesCtrl.$inject = ["$scope", "$http"];

    function HomepageHeadlinesCtrl($scope, $http) {
        $scope.isLoading = true;
        $http({
            method: "GET",
            url: "/feeds/StatsV2Headlnes-589800/json.js"
        }).then(function(response) {
            var data = response.data.ListItems;
            $scope.data = data.slice(0, 5);
            $scope.isLoading = false
        })
    }
})();
(function() {
    angular.module("stats").controller("HomepageAssistTrackerCtrl", HomepageAssistTrackerCtrl);
    HomepageAssistTrackerCtrl.$inject = ["$scope", "$http", "$sce", "SEASONS", "AssistTrackerService"];

    function HomepageAssistTrackerCtrl($scope, $http, $sce, SEASONS, AssistTrackerService) {
        var trackerParams = {
            LeagueID: "00",
            PerMode: "Totals",
            Season: SEASONS.site.Season,
            SeasonType: SEASONS.site.SeasonType
        };
        AssistTrackerService.get(trackerParams).then(function(data) {
            $scope.totalAssists = data.ASSISTS
        });
        $http({
            method: "GET",
            url: "/feeds/StateFarmAssistLeader-668786/json.js"
        }).then(function(response) {
            $scope.assistLeader = response.data.ListItems[0];
            $scope.assistLeader.description = $sce.trustAsHtml($scope.assistLeader.ListItemDescription)
        })
    }
})();
(function() {
    stats.controller("HomepageLeadersCtrl", HomepageLeadersCtrl);
    HomepageLeadersCtrl.$inject = ["$scope", "$location", "SEASONS", "HomepageLeadersService"];

    function HomepageLeadersCtrl($scope, $location, SEASONS, HomepageLeadersService) {
        // $scope properties
        $scope.currentIndex = 0;
        $scope.showMoreStats = false;
        $scope.noData = false;
        // $scope methods
        $scope.setPlayerOrTeam = setPlayerOrTeam;
        $scope.setStatType = setStatType;
        $scope.setSeasonType = setSeasonType;
        $scope.setGameScope = setGameScope;
        // params object
        $scope.params = {
            LeagueID: "00",
            PlayerScope: "All Players",
            Season: $location.search().Season || SEASONS.homepageLeaders.Season,
            SeasonType: $location.search().SeasonType || SEASONS.homepageLeaders.SeasonType,
            GameScope: $location.search().GameScope || SEASONS.homepageLeaders.GameScope,
            PlayerOrTeam: $location.search().PlayerOrTeam || "Player",
            StatType: $location.search().StatType || "Traditional"
        };
        // init
        getStats();
        /**
         * getStats ()
         * Requets homepages leaders data.
         */
        function getStats() {
            $scope.isLoading = true;
            $scope.noData = false;
            $scope.showMoreStats = false;
            HomepageLeadersService.get($scope.params).then(function(datasets) {
                $scope.isLoading = false;
                if (!datasets[0] || !datasets[0].datatable || datasets[0].datatable.length === 0) {
                    $scope.noData = true
                }
                $scope.datasets = datasets
            })
        }
        /**
         * setPlayerOrTeam()
         * set PlayerOrTeam param based on user input and get stats.
         *
         * @param {string} type - 'Player' | 'Team'
         */
        function setPlayerOrTeam(pt) {
            $scope.params.PlayerOrTeam = pt;
            $location.search("PlayerOrTeam", pt);
            getStats()
        }
        /**
         * setStatType()
         * set StatType based on user input and get stats
         *
         * @param {string} type - 'Traditional' | 'Advanced'
         */
        function setStatType(stattype) {
            $scope.params.StatType = stattype;
            $location.search("StatType", stattype);
            getStats()
        }
        /**
         * setSeasonType()
         * set StatType based on user input and get stats
         *
         * @param {string} type - 'Regular Season' | 'Playoffs' | 'Finals' | 'Pre Season'
         */
        function setSeasonType(seasontype) {
            $scope.params.SeasonType = seasontype;
            $location.search("SeasonType", seasontype);
            getStats()
        }
        /**
         * setGameScope()
         *
         * @param {string} range - 'Season' | 'Yesterday' | 'Last10'
         */
        function setGameScope(gamescope) {
            $scope.params.GameScope = gamescope;
            $location.search("GameScope", gamescope);
            getStats()
        }
        // scope watchers
        // emitted by statsHomepageTile
        $scope.$on("statsHomepagePanelDidChange", statsHomepagePanelDidChangeFn);
        /**
         * statsHomepagePanelDidChangeFn()
         * set $scope.currentIndex based on page state
         *
         * @param {Object} event - the jQuery event object
         * @param {number} num - '1', '-1'
         */
        function statsHomepagePanelDidChangeFn(event, num) {
            var index = $scope.currentIndex;
            // 8 is the total number of <stats-season-tile> directives on the page
            var TOTAL = 8;
            // http://javascript.about.com/od/problemsolving/a/modulobug.htm
            $scope.currentIndex = ((index + num) % TOTAL + TOTAL) % TOTAL
        }
    }
})(); // NO 11/11 - another dp special 
(function() {
    stats.controller("HomepagePlayerListCtrl", HomepagePlayerListCtrl);
    HomepagePlayerListCtrl.$inject = ["$scope", "$timeout", "SEASONS", "StatsRequest", "$window"];

    function HomepagePlayerListCtrl($scope, $timeout, SEASONS, StatsRequest, $window) {
        $scope.isLoading = true;
        $scope.currentFilter = "a";
        $scope.currentFilterString = "";
        $scope.rosterStatus = "Active";
        $scope.players = [];
        var params = {
            // 'Season': SEASONS.site.Season,
            Season: "2015-16",
            LeagueID: "00",
            IsOnlyCurrentSeason: "0"
        };
        var players = [];
        var rosterPlayers = [];
        var mobilePlayers = {};
        var searched = false;
        var filterInactive = function(n) {
            return n.ROSTERSTATUS === 1
        };
        var filterByLastName = function(n) {
            return true;
            n.DISPLAY_LAST_COMMA_FIRST.charAt(0).toLowerCase() == $scope.currentFilter
        };
        var filterByString = function(n) {
            return n.DISPLAY_LAST_COMMA_FIRST.charAt(0).toLowerCase() == $scope.currentFilterString
        };
        var isVisible = function(e) {
            var h = $(window).height() + 10;
            var top = $(window).scrollTop() - 10;
            var y = $(e).offset().top;
            return y > top && y < top + h && y + $(e).height() < top + h
        };
        $scope.buildMobilePlayers = function() {
            rosterPlayers.forEach(function(j) {
                var char = j.DISPLAY_LAST_COMMA_FIRST.charAt(0).toLowerCase();
                if (!mobilePlayers[char]) mobilePlayers[char] = [];
                mobilePlayers[char].push(j)
            })
        };
        var filterByFirstLetterLastName = function(l) {
            var char = $scope.currentFilter;
            var pattern = "^" + char.toUpperCase();
            var regex = new RegExp(pattern);
            if (l.DISPLAY_LAST_COMMA_FIRST.match(regex)) {
                return l.DISPLAY_LAST_COMMA_FIRST
            }
        };
        $scope.filterPlayersByLastNameOnClick = function(v) {
            $scope.currentFilter = v;
            $scope.players = rosterPlayers.filter(filterByFirstLetterLastName)
        };
        $scope.filterPlayersByLastName = function(v) {
            $scope.currentFilter = v;
            $scope.players = rosterPlayers.filter(filterByLastName)
        };
        $scope.filterPlayersByString = function() {
            $scope.currentFilterString = "";
            $scope.players = rosterPlayers.filter(filterByString)
        };
        $scope.filterRosterStatus = function(status) {
            $scope.rosterStatus = status;
            //show all players
            if (status == "Active") rosterPlayers = players;
            else rosterPlayers = players;
            $scope.filterPlayersByLastName($scope.currentFilter);
            $scope.buildMobilePlayers()
        }; /* VERY UGLY. I'M SORRY ;~; */
        var handleScroll = function() {
            angular.element(".player-alpha").toArray().reverse().forEach(function(elem) {
                if (isVisible(elem)) $scope.current = elem.id
            });
            angular.element(".letter").removeClass("letter-bold");
            angular.element("#letter-" + $scope.current).addClass("letter-bold");
            /*
                if(history.pushState)
                   history.pushState(null, null, '#' + $scope.current);
                else
                  location.hash = '#' + $scope.current;
            */
            handleResize();
            $scope.$apply()
        };
        var handleResize = function() {
            angular.element(".letter-nav").css("height", Math.max(document.documentElement.clientHeight, window.innerHeight || 0) + "px");
            angular.element(".letter-nav").css("top", Math.max($($(".list.row")[0]).offset().top - window.scrollY, 0) + "px")
        };
        $scope.current = "a";
        $scope.mobilePlayers = mobilePlayers;
        $scope.IS_MOBILE = false;
        $scope.$watch(function() {
            return $window.IS_MOBILE
        }, function(n, o) {
            $scope.IS_MOBILE = n ? n : false;
            console.log($scope.IS_MOBILE)
        });
        angular.element(window).bind("scroll", handleScroll);
        angular.element(window).bind("resize", handleResize);
        angular.element(window).bind("load", function() {
            handleScroll();
            handleResize()
        });
        //show players only if searched
        $scope.listPlayers = function() {
            return $scope.searched
        };
        $scope.playersSearched = function() {
            $scope.searched = true;
            return $scope.searched
        };
        StatsRequest.get("playerList", "", params).then(function() {
            players = StatsRequest.getData().CommonAllPlayers.datatable;
            $scope.filterRosterStatus($scope.rosterStatus);
            $scope.isLoading = false
        })
    }
})();
(function() {
    stats.controller("HomepageShotChartsCtrl", HomepageShotChartsCtrl);
    HomepageShotChartsCtrl.$inject = ["$scope", "$http", "$sce"];

    function HomepageShotChartsCtrl($scope, $http, $sce) {
        $scope.isLoading = true;
        $http({
            method: "GET",
            url: "/feeds/NBAStatsShotCharts-559380/json.js"
        }).then(function(response) {
            var data = response.data.ListItems;
            $scope.trustAsHtml = $sce.trustAsHtml;
            $scope.data = data.slice(0, 3);
            $scope.isLoading = false
        })
    }
})();
(function() {
    stats.controller("HomepageSynergyCtrl", HomepageSynergyCtrl);
    HomepageSynergyCtrl.$inject = ["$scope", "$http", "$sce"];

    function HomepageSynergyCtrl($scope, $http, $sce) {
        $scope.isLoading = true;
        $scope.trustAsHtml = $sce.trustAsHtml;
        $http({
            method: "GET",
            url: "feeds/StatsV2Synergy-618597/json.js"
        }).then(function(response) {
            var data = response.data.ListItems;
            $scope.data = data[0];
            $scope.isLoading = false
        })
    }
})();
(function() {
    stats.controller("HomepageThisDayInHistoryCtrl", HomepageThisDayInHistoryCtrl);
    HomepageThisDayInHistoryCtrl.$inject = ["$scope", "$http"];

    function HomepageThisDayInHistoryCtrl($scope, $http) {
        $scope.isLoading = true;
        $http({
            method: "GET",
            url: "/feeds/StatsV2History-589801/json.js"
        }).then(function(response) {
            var data = response.data.ListItems;
            $scope.data = data.slice(0, 5);
            $scope.isLoading = false
        })
    }
})();
(function() {
    stats.controller("LeagueAllstarClutchAdvancedCtrl", LeagueAllstarClutchAdvancedCtrl);
    LeagueAllstarClutchAdvancedCtrl.$inject = ["$scope", "$filter", "$location", "SplitsService", "SEASONS", "LeagueTeamClutchService"];

    function LeagueAllstarClutchAdvancedCtrl($scope, $filter, $location, SplitsService, SEASONS, LeagueTeamClutchService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueAllstar.Season,
            seasonRange: [SEASONS.leagueAllstar.SeasonYearFrom, SEASONS.leagueAllstar.SeasonYear]
        }, "GameSegment", "Period", "Rank", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "ClutchTime", "AheadBehind", "PointDiff", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo"]);
        config.splits.Season.options.forEach(function(value, idex, array) {
            value.text = $filter("seasonToSeasonYear")(value.text)
        });
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Advanced";
        $scope.params.SeasonType = "All Star";
        $scope.params.Permode = "Totals";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueTeamClutchService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueAllstarClutchBaseCtrl", LeagueAllstarClutchBaseCtrl);
    LeagueAllstarClutchBaseCtrl.$inject = ["$scope", "$filter", "$location", "SplitsService", "SEASONS", "LeagueTeamClutchService"];

    function LeagueAllstarClutchBaseCtrl($scope, $filter, $location, SplitsService, SEASONS, LeagueTeamClutchService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueAllstar.Season,
            seasonRange: [SEASONS.leagueAllstar.SeasonYearFrom, SEASONS.leagueAllstar.SeasonYear]
        }, {
            name: "PerMode",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "ClutchTime", "AheadBehind", "PointDiff", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo"]);
        config.splits.Season.options.forEach(function(value, idex, array) {
            value.text = $filter("seasonToSeasonYear")(value.text)
        });
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Base";
        $scope.params.SeasonType = "All Star";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueTeamClutchService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueAllstarClutchFourFactorsCtrl", LeagueAllstarClutchFourFactorsCtrl);
    LeagueAllstarClutchFourFactorsCtrl.$inject = ["$scope", "$filter", "$location", "SplitsService", "SEASONS", "LeagueTeamClutchService"];

    function LeagueAllstarClutchFourFactorsCtrl($scope, $filter, $location, SplitsService, SEASONS, LeagueTeamClutchService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueAllstar.Season,
            seasonRange: [SEASONS.leagueAllstar.SeasonYearFrom, SEASONS.leagueAllstar.SeasonYear]
        }, "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "ClutchTime", "AheadBehind", "PointDiff", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo"]);
        config.splits.Season.options.forEach(function(value, idex, array) {
            value.text = $filter("seasonToSeasonYear")(value.text)
        });
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Four Factors";
        $scope.params.SeasonType = "All Star";
        $scope.params.Permode = "Totals";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueTeamClutchService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueAllstarClutchMiscCtrl", LeagueAllstarClutchMiscCtrl);
    LeagueAllstarClutchMiscCtrl.$LeagueAllstarClutchMiscCtrl = ["$scope", "$filter", "$location", "SplitsService", "SEASONS", "LeagueTeamClutchService"];

    function LeagueAllstarClutchMiscCtrl($scope, $filter, $location, SplitsService, SEASONS, LeagueTeamClutchService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueAllstar.Season,
            seasonRange: [SEASONS.leagueAllstar.SeasonYearFrom, SEASONS.leagueAllstar.SeasonYear]
        }, {
            name: "PerMode",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "ClutchTime", "AheadBehind", "PointDiff", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo"]);
        config.splits.Season.options.forEach(function(value, idex, array) {
            value.text = $filter("seasonToSeasonYear")(value.text)
        });
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Misc";
        $scope.params.SeasonType = "All Star";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueTeamClutchService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueAllstarClutchOpponentCtrl", LeagueAllstarClutchOpponentCtrl);
    LeagueAllstarClutchOpponentCtrl.$inject = ["$scope", "$filter", "$location", "SplitsService", "SEASONS", "LeagueTeamClutchService"];

    function LeagueAllstarClutchOpponentCtrl($scope, $filter, $location, SplitsService, SEASONS, LeagueTeamClutchService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueAllstar.Season,
            seasonRange: [SEASONS.leagueAllstar.SeasonYearFrom, SEASONS.leagueAllstar.SeasonYear]
        }, {
            name: "PerMode",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "ClutchTime", "AheadBehind", "PointDiff", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo"]);
        config.splits.Season.options.forEach(function(value, idex, array) {
            value.text = $filter("seasonToSeasonYear")(value.text)
        });
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Opponent";
        $scope.params.SeasonType = "All Star";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueTeamClutchService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueAllstarClutchScoringCtrl", LeagueAllstarClutchScoringCtrl);
    LeagueAllstarClutchScoringCtrl.$inject = ["$scope", "$filter", "$location", "SplitsService", "SEASONS", "LeagueTeamClutchService"];

    function LeagueAllstarClutchScoringCtrl($scope, $filter, $location, SplitsService, SEASONS, LeagueTeamClutchService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueAllstar.Season,
            seasonRange: [SEASONS.leagueAllstar.SeasonYearFrom, SEASONS.leagueAllstar.SeasonYear]
        }, "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "ClutchTime", "AheadBehind", "PointDiff", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo"]);
        config.splits.Season.options.forEach(function(value, idex, array) {
            value.text = $filter("seasonToSeasonYear")(value.text)
        });
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Scoring";
        $scope.params.SeasonType = "All Star";
        $scope.params.Permode = "PerGame";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueTeamClutchService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueAllstarGeneralAdvancedCtrl", LeagueAllstarGeneralAdvancedCtrl);
    LeagueAllstarGeneralAdvancedCtrl.$inject = ["$scope", "$filter", "$location", "SplitsService", "SEASONS", "LeagueTeamGeneralService"];

    function LeagueAllstarGeneralAdvancedCtrl($scope, $filter, $location, SplitsService, SEASONS, LeagueTeamGeneralService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueAllstar.Season,
            seasonRange: [SEASONS.leagueAllstar.SeasonYearFrom, SEASONS.leagueAllstar.SeasonYear]
        }, "GameSegment", "Period", "Rank", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo"]);
        config.splits.Season.options.forEach(function(value, idex, array) {
            value.text = $filter("seasonToSeasonYear")(value.text)
        });
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Advanced";
        $scope.params.SeasonType = "All Star";
        $scope.params.Permode = "Totals";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueTeamGeneralService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueAllstarGeneralBaseCtrl", LeagueAllstarGeneralBaseCtrl);
    LeagueAllstarGeneralBaseCtrl.$inject = ["$scope", "$filter", "$location", "SplitsService", "SEASONS", "LeagueTeamGeneralService"];

    function LeagueAllstarGeneralBaseCtrl($scope, $filter, $location, SplitsService, SEASONS, LeagueTeamGeneralService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueAllstar.Season,
            seasonRange: [SEASONS.leagueAllstar.SeasonYearFrom, SEASONS.leagueAllstar.SeasonYear]
        }, {
            name: "PerMode",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo"]);
        config.splits.Season.options.forEach(function(value, idex, array) {
            value.text = $filter("seasonToSeasonYear")(value.text)
        });
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Base";
        $scope.params.SeasonType = "All Star";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueTeamGeneralService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueAllstarGeneralFourFactorsCtrl", LeagueAllstarGeneralFourFactorsCtrl);
    LeagueAllstarGeneralFourFactorsCtrl.$inject = ["$scope", "$filter", "$location", "SplitsService", "SEASONS", "LeagueTeamGeneralService"];

    function LeagueAllstarGeneralFourFactorsCtrl($scope, $filter, $location, SplitsService, SEASONS, LeagueTeamGeneralService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueAllstar.Season,
            seasonRange: [SEASONS.leagueAllstar.SeasonYearFrom, SEASONS.leagueAllstar.SeasonYear]
        }, "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo"]);
        config.splits.Season.options.forEach(function(value, idex, array) {
            value.text = $filter("seasonToSeasonYear")(value.text)
        });
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Four Factors";
        $scope.params.SeasonType = "All Star";
        $scope.params.Permode = "Totals";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueTeamGeneralService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueAllstarGeneralMiscCtrl", LeagueAllstarGeneralMiscCtrl);
    LeagueAllstarGeneralMiscCtrl.$inject = ["$scope", "$filter", "$location", "SplitsService", "SEASONS", "LeagueTeamGeneralService"];

    function LeagueAllstarGeneralMiscCtrl($scope, $filter, $location, SplitsService, SEASONS, LeagueTeamGeneralService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueAllstar.Season,
            seasonRange: [SEASONS.leagueAllstar.SeasonYearFrom, SEASONS.leagueAllstar.SeasonYear]
        }, {
            name: "PerMode",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo"]);
        config.splits.Season.options.forEach(function(value, idex, array) {
            value.text = $filter("seasonToSeasonYear")(value.text)
        });
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Misc";
        $scope.params.SeasonType = "All Star";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueTeamGeneralService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueAllstarGeneralOpponentCtrl", LeagueAllstarGeneralOpponentCtrl);
    LeagueAllstarGeneralOpponentCtrl.$inject = ["$scope", "$filter", "$location", "SplitsService", "SEASONS", "LeagueTeamGeneralService"];

    function LeagueAllstarGeneralOpponentCtrl($scope, $filter, $location, SplitsService, SEASONS, LeagueTeamGeneralService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueAllstar.Season,
            seasonRange: [SEASONS.leagueAllstar.SeasonYearFrom, SEASONS.leagueAllstar.SeasonYear]
        }, {
            name: "PerMode",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo"]);
        config.splits.Season.options.forEach(function(value, idex, array) {
            value.text = $filter("seasonToSeasonYear")(value.text)
        });
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Opponent";
        $scope.params.SeasonType = "All Star";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueTeamGeneralService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueAllstarGeneralScoringCtrl", LeagueAllstarGeneralScoringCtrl);
    LeagueAllstarGeneralScoringCtrl.$inject = ["$scope", "$filter", "$location", "SplitsService", "SEASONS", "LeagueTeamGeneralService"];

    function LeagueAllstarGeneralScoringCtrl($scope, $filter, $location, SplitsService, SEASONS, LeagueTeamGeneralService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueAllstar.Season,
            seasonRange: [SEASONS.leagueAllstar.SeasonYearFrom, SEASONS.leagueAllstar.SeasonYear]
        }, "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo"]);
        config.splits.Season.options.forEach(function(value, idex, array) {
            value.text = $filter("seasonToSeasonYear")(value.text)
        });
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Scoring";
        $scope.params.SeasonType = "All Star";
        $scope.params.Permode = "PerGame";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueTeamGeneralService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueAllstarNavCtrl", LeagueAllstarNavCtrl);
    LeagueAllstarNavCtrl.$inject = ["$scope", "$location", "$route"];

    function LeagueAllstarNavCtrl($scope, $location, $route) {
        $scope.$on("$routeChangeSuccess", function(event, routeData) {
            $scope.page = $route.current.page;
            $scope.selected = $scope.pages.filter(function(n) {
                return n.page == $scope.page
            })[0]
        });
        $scope.pages = [{
            page: "generalTraditional",
            path: "",
            text: "General Traditional"
        }, {
            page: "generalAdvanced",
            path: "advanced",
            text: "General Advanced"
        }, {
            page: "generalMisc",
            path: "misc",
            text: "General Misc"
        }, {
            page: "generalFourFactors",
            path: "misc",
            text: "General Four Factors"
        }, {
            page: "generalScoring",
            path: "scoring",
            text: "General Scoring"
        }, {
            page: "generalOpponent",
            path: "opponent",
            text: "General Opponent"
        }, {
            page: "clutchTraditional",
            path: "clutch/",
            text: "Clutch Traditional"
        }, {
            page: "clutchAdvanced",
            path: "clutch/advanced",
            text: "Clutch Advanced"
        }, {
            page: "clutchFourFactors",
            path: "clutch/fourfactors",
            text: "Clutch Four Factors"
        }, {
            page: "clutchMisc",
            path: "clutch/misc",
            text: "Clutch Misc"
        }, {
            page: "clutchScoring",
            path: "clutch/scoring",
            text: "Clutch Scoring"
        }, {
            page: "clutchOpponent",
            path: "clutch/opponent",
            text: "Clutch Opponent"
        }, {
            page: "shooting",
            path: "shooting",
            text: "Shooting"
        }, {
            page: "oppshooting",
            path: "oppshooting",
            text: "Opponent Shooting"
        }];
        $scope.onNavChange = function() {
            $location.path($scope.selected.path)
        }
    }
})();
(function() {
    stats.controller("LeagueAllstarOppShootingCtrl", LeagueAllstarOppShootingCtrl);
    LeagueAllstarOppShootingCtrl.$inject = ["$scope", "$filter", "$location", "SplitsService", "SEASONS", "LeagueTeamShootingService"];

    function LeagueAllstarOppShootingCtrl($scope, $filter, $location, SplitsService, SEASONS, LeagueTeamShootingService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueAllstar.Season,
            seasonRange: [SEASONS.leagueAllstar.SeasonYearFrom, SEASONS.leagueAllstar.SeasonYear]
        }, "PerMode", "DistanceRange", "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo"]);
        config.splits.Season.options.forEach(function(value, idex, array) {
            value.text = $filter("seasonToSeasonYear")(value.text)
        });
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Opponent";
        $scope.params.SeasonType = "All Star";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueTeamShootingService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueAllstarShootingCtrl", LeagueAllstarShootingCtrl);
    LeagueAllstarShootingCtrl$inject = ["$scope", "$filter", "$location", "SplitsService", "SEASONS", "LeagueTeamShootingService"];

    function LeagueAllstarShootingCtrl($scope, $filter, $location, SplitsService, SEASONS, LeagueTeamShootingService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueAllstar.Season,
            seasonRange: [SEASONS.leagueAllstar.SeasonYearFrom, SEASONS.leagueAllstar.SeasonYear]
        }, "PerMode", "DistanceRange", "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo"]);
        config.splits.Season.options.forEach(function(value, idex, array) {
            value.text = $filter("seasonToSeasonYear")(value.text)
        });
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Base";
        $scope.params.SeasonType = "All Star";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueTeamShootingService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueAllTimeLeadersCtrl", LeagueAllTimeLeadersCtrl);
    LeagueAllTimeLeadersCtrl.$inject = ["$scope", "SplitsService", "SEASONS", "LeagueLeadersService"];

    function LeagueAllTimeLeadersCtrl($scope, SplitsService, SEASONS, LeagueLeadersService) {
        $scope.isLoading = true;
        var config = SplitsService.get(["LeagueID", {
            name: "SeasonType",
            without: "Preseason",
            initial: SEASONS.leadersAllTime.SeasonType
        }, "PerMode", {
            name: "StatCategory",
            without: ["AST_TOV", "STL_TOV", "PF", "EFF"]
        }]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.Season = "All Time";
        $scope.params.Scope = "S";
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });

        function getStats() {
            $scope.isLoading = true;
            LeagueLeadersService.get($scope.params).then(function(datasets) {
                $scope.isLoading = false;
                $scope.datasets = datasets
            })
        }
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueLeadersCtrl", LeagueLeadersCtrl);
    LeagueLeadersCtrl.$inject = ["$scope", "SplitsService", "SEASONS", "LeagueLeadersService"];

    function LeagueLeadersCtrl($scope, SplitsService, SEASONS, LeagueLeadersService) {
        $scope.isLoading = true;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leadersCurrent.Season,
            seasonRange: [SEASONS.leadersCurrent.SeasonYearFrom, SEASONS.leadersCurrent.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leadersCurrent.SeasonType
        }, {
            name: "PerMode",
            include: [{
                val: "Per48",
                text: "Per 48 Minutes"
            }]
        }, "Scope"]);
        var categories = {
            Per48: SplitsService.get([{
                name: "StatCategory",
                without: ["MIN", "FG_PCT", "FG3_PCT", "FT_PCT", "AST_TOV", "STL_TOV"]
            }]).splits.StatCategory,
            PerGame: SplitsService.get([{
                name: "StatCategory",
                without: ["FGA", "FGM", "FG_PCT", "FG3M", "FG3A", "FG3_PCT", "FTA", "FTM", "FT_PCT", "PF", "AST_TOV", "STL_TOV"]
            }]).splits.StatCategory,
            Totals: SplitsService.get([{
                name: "StatCategory"
            }]).splits.StatCategory
        };
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.splits.StatCategory = categories[$scope.splits.PerMode.selected.val];
        $scope.params.StatCategory = $scope.splits.StatCategory.selected.val;
        $scope.$watch("splits.PerMode.selected", function(selected) {
            $scope.splits.StatCategory = categories[selected.val]
        });
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });

        function getStats() {
            $scope.isLoading = true;
            LeagueLeadersService.get($scope.params).then(function(datasets) {
                $scope.isLoading = false;
                $scope.datasets = datasets;
                $scope.noData = !$scope.datasets.LeagueLeaders.datatable.length
            })
        }
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueLineupsAdvancedCtrl", LeagueLineupsAdvancedCtrl);
    LeagueLineupsAdvancedCtrl.$inject = ["$scope", "$location", "SplitsService", "SEASONS", "LeagueLineupsService"];

    function LeagueLineupsAdvancedCtrl($scope, $location, SplitsService, SEASONS, LeagueLineupsService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueLineups.Season,
            seasonRange: [SEASONS.leagueLineups.SeasonYearFrom, SEASONS.leagueLineups.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leagueLineups.SeasonType,
            without: ["Pre Season"]
        }, "GroupQuantity", "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo", "ShotClockRange", "TeamID", "Conference", "Division", "PORound"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Advanced";
        $scope.params.PerMode = "Totals";
        $scope.params.GameID = "";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueLineupsService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false;
                var _isEmpty = datasets.Lineups.rowSet.length === 0;
                $scope.noData = _isEmpty ? true : false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueLineupsBaseCtrl", LeagueLineupsBaseCtrl);
    LeagueLineupsBaseCtrl.$inject = ["$scope", "$location", "SplitsService", "SEASONS", "LeagueLineupsService"];

    function LeagueLineupsBaseCtrl($scope, $location, SplitsService, SEASONS, LeagueLineupsService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueLineups.Season,
            seasonRange: [SEASONS.leagueLineups.SeasonYearFrom, SEASONS.leagueLineups.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leagueLineups.SeasonType,
            without: ["Pre Season"]
        }, {
            name: "PerMode",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "GroupQuantity", "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo", "ShotClockRange", "TeamID", "Conference", "Division", "PORound"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Base";
        $scope.params.GameID = "";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueLineupsService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false;
                var _isEmpty = datasets.Lineups.rowSet.length === 0;
                $scope.noData = _isEmpty ? true : false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueLineupsFourFactorsCtrl", LeagueLineupsFourFactorsCtrl);
    LeagueLineupsFourFactorsCtrl.$inject = ["$scope", "$location", "SplitsService", "SEASONS", "LeagueLineupsService"];

    function LeagueLineupsFourFactorsCtrl($scope, $location, SplitsService, SEASONS, LeagueLineupsService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueLineups.Season,
            seasonRange: [SEASONS.leagueLineups.SeasonYearFrom, SEASONS.leagueLineups.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leagueLineups.SeasonType,
            without: ["Pre Season"]
        }, "GroupQuantity", "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo", "ShotClockRange", "TeamID", "Conference", "Division", "PORound"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Four Factors";
        $scope.params.PerMode = "Totals";
        $scope.params.GameID = "";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueLineupsService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false;
                var _isEmpty = datasets.Lineups.rowSet.length === 0;
                $scope.noData = _isEmpty ? true : false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueLineupsMiscCtrl", LeagueLineupsMiscCtrl);
    LeagueLineupsMiscCtrl.$inject = ["$scope", "$location", "SplitsService", "SEASONS", "LeagueLineupsService"];

    function LeagueLineupsMiscCtrl($scope, $location, SplitsService, SEASONS, LeagueLineupsService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueLineups.Season,
            seasonRange: [SEASONS.leagueLineups.SeasonYearFrom, SEASONS.leagueLineups.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leagueLineups.SeasonType,
            without: ["Pre Season"]
        }, {
            name: "PerMode",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "GroupQuantity", "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo", "ShotClockRange", "TeamID", "Conference", "Division", "PORound"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Misc";
        $scope.params.GameID = "";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueLineupsService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false;
                var _isEmpty = datasets.Lineups.rowSet.length === 0;
                $scope.noData = _isEmpty ? true : false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueLineupsNavCtrl", LeagueLineupsNavCtrl);
    LeagueLineupsNavCtrl.$inect = ["$scope", "$location", "$route"];

    function LeagueLineupsNavCtrl($scope, $location, $route) {
        $scope.$on("$routeChangeSuccess", function(event, routeData) {
            $scope.page = $route.current.page;
            $scope.selected = $scope.pages.filter(function(n) {
                return n.page == $scope.page
            })[0]
        });
        $scope.pages = [{
            page: "traditional",
            path: "",
            text: "Traditional"
        }, {
            page: "advanced",
            path: "advanced",
            text: "Advanced"
        }, {
            page: "fourfactors",
            path: "fourfactors",
            text: "Four Factors"
        }, {
            page: "misc",
            path: "misc",
            text: "Misc"
        }, {
            page: "scoring",
            path: "scoring",
            text: "Scoring"
        }, {
            page: "opponent",
            path: "opponent",
            text: "Opponent"
        }];
        $scope.onNavChange = function() {
            $location.path($scope.selected.path)
        }
    }
})();
(function() {
    stats.controller("LeagueLineupsOpponentCtrl", LeagueLineupsOpponentCtrl);
    LeagueLineupsOpponentCtrl.$inject = ["$scope", "$location", "SplitsService", "SEASONS", "LeagueLineupsService"];

    function LeagueLineupsOpponentCtrl($scope, $location, SplitsService, SEASONS, LeagueLineupsService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueLineups.Season,
            seasonRange: [SEASONS.leagueLineups.SeasonYearFrom, SEASONS.leagueLineups.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leagueLineups.SeasonType,
            without: ["Pre Season"]
        }, {
            name: "PerMode",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "GroupQuantity", "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo", "ShotClockRange", "TeamID", "Conference", "Division", "PORound"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Opponent";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueLineupsService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false;
                var _isEmpty = datasets.Lineups.rowSet.length === 0;
                $scope.noData = _isEmpty ? true : false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueLineupsScoringCtrl", LeagueLineupsScoringCtrl);
    LeagueLineupsScoringCtrl.$inject = ["$scope", "$location", "SplitsService", "SEASONS", "LeagueLineupsService"];

    function LeagueLineupsScoringCtrl($scope, $location, SplitsService, SEASONS, LeagueLineupsService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueLineups.Season,
            seasonRange: [SEASONS.leagueLineups.SeasonYearFrom, SEASONS.leagueLineups.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leagueLineups.SeasonType,
            without: ["Pre Season"]
        }, "GroupQuantity", "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo", "ShotClockRange", "TeamID", "Conference", "Division", "PORound"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Scoring";
        $scope.params.PerMode = "Totals";
        $scope.params.GameID = "";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueLineupsService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false;
                var _isEmpty = datasets.Lineups.rowSet.length === 0;
                $scope.noData = _isEmpty ? true : false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeaguePlayerBioCtrl", LeaguePlayerBioCtrl);
    LeaguePlayerBioCtrl.$inject = ["$scope", "SEASONS", "SplitsService", "LeaguePlayerBioService"];

    function LeaguePlayerBioCtrl($scope, SEASONS, SplitsService, LeaguePlayerBioService) {
        $scope.isLoading = true;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leaguePlayerStats.Season,
            seasonRange: [SEASONS.leaguePlayerStats.SeasonYearFrom, SEASONS.leaguePlayerStats.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leaguePlayerStats.SeasonType
        }, "PerMode", "College", "Conference", "Country", "DateFrom", "DateTo", "Division", "DraftPick", "DraftYear", "GameScope", "GameSegment", "Height", "LastNGames", "Location", "Month", "OpponentTeamID", "Outcome", "Period", "PlayerExperience", "PlayerPosition", "PORound", "SeasonSegment", "ShotClockRange", "StarterBench", "TeamID", "VsDivision", "VsConference", "Weight"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        // emitted by statsRunIt
        $scope.$on("runit", function(event) {
            getStats()
        });
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        /**
         * getStats()
         *
         * Get League Team Tracking stats
         */
        function getStats() {
            $scope.isLoading = true;
            LeaguePlayerBioService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                var _isEmpty = $scope.datasets[0].rowSet.length === 0;
                $scope.noData = _isEmpty ? true : false;
                $scope.isLoading = false
            })
        }
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeaguePlayerClutchAdvancedCtrl", LeaguePlayerClutchAdvancedCtrl);
    LeaguePlayerClutchAdvancedCtrl.$inject = ["$scope", "$location", "SplitsService", "SEASONS", "LeaguePlayerClutchService"];

    function LeaguePlayerClutchAdvancedCtrl($scope, $location, SplitsService, SEASONS, LeaguePlayerClutchService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leaguePlayerStats.Season,
            seasonRange: [SEASONS.leaguePlayerStats.SeasonYearFrom, SEASONS.leaguePlayerStats.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leaguePlayerStats.SeasonType
        }, "GameSegment", "Period", "Rank", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "ClutchTime", "AheadBehind", "PointDiff", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo", "ShotClockRange", "TeamID", "Conference", "Division", "PORound", "DraftYear", "DraftPick", "College", "Country", "Height", "Weight"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Advanced";
        $scope.params.PerMode = "Totals";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeaguePlayerClutchService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false;
                var _isEmpty = datasets.LeagueDashPlayerClutch.rowSet.length === 0;
                $scope.noData = _isEmpty ? true : false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeaguePlayerClutchBaseCtrl", LeaguePlayerClutchBaseCtrl);
    LeaguePlayerClutchBaseCtrl.$inject = ["$scope", "$location", "SplitsService", "SEASONS", "LeaguePlayerClutchService"];

    function LeaguePlayerClutchBaseCtrl($scope, $location, SplitsService, SEASONS, LeaguePlayerClutchService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leaguePlayerStats.Season,
            seasonRange: [SEASONS.leaguePlayerStats.SeasonYearFrom, SEASONS.leaguePlayerStats.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leaguePlayerStats.SeasonType
        }, {
            name: "PerMode",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "ClutchTime", "AheadBehind", "PointDiff", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo", "ShotClockRange", "TeamID", "Conference", "Division", "PORound", "DraftYear", "DraftPick", "College", "Country", "Height", "Weight"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Base";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeaguePlayerClutchService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false;
                var _isEmpty = datasets.LeagueDashPlayerClutch.rowSet.length === 0;
                $scope.noData = _isEmpty ? true : false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeaguePlayerClutchMiscCtrl", LeaguePlayerClutchMiscCtrl);
    LeaguePlayerClutchMiscCtrl.$inject = ["$scope", "$location", "SplitsService", "SEASONS", "LeaguePlayerClutchService"];

    function LeaguePlayerClutchMiscCtrl($scope, $location, SplitsService, SEASONS, LeaguePlayerClutchService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leaguePlayerStats.Season,
            seasonRange: [SEASONS.leaguePlayerStats.SeasonYearFrom, SEASONS.leaguePlayerStats.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leaguePlayerStats.SeasonType
        }, {
            name: "PerMode",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "ClutchTime", "AheadBehind", "PointDiff", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo", "ShotClockRange", "TeamID", "Conference", "Division", "PORound", "DraftYear", "DraftPick", "College", "Country", "Height", "Weight"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Misc";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeaguePlayerClutchService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false;
                var _isEmpty = datasets.LeagueDashPlayerClutch.rowSet.length === 0;
                $scope.noData = _isEmpty ? true : false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeaguePlayerClutchScoringCtrl", LeaguePlayerClutchScoringCtrl);
    LeaguePlayerClutchScoringCtrl.$inject = ["$scope", "$location", "SplitsService", "SEASONS", "LeaguePlayerClutchService"];

    function LeaguePlayerClutchScoringCtrl($scope, $location, SplitsService, SEASONS, LeaguePlayerClutchService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leaguePlayerStats.Season,
            seasonRange: [SEASONS.leaguePlayerStats.SeasonYearFrom, SEASONS.leaguePlayerStats.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leaguePlayerStats.SeasonType
        }, "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "ClutchTime", "AheadBehind", "PointDiff", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo", "ShotClockRange", "TeamID", "Conference", "Division", "PORound", "DraftYear", "DraftPick", "College", "Country", "Height", "Weight"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Scoring";
        $scope.params.PerMode = "PerGame";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeaguePlayerClutchService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false;
                var _isEmpty = datasets.LeagueDashPlayerClutch.rowSet.length === 0;
                $scope.noData = _isEmpty ? true : false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeaguePlayerClutchUsageCtrl", LeaguePlayerClutchUsageCtrl);
    LeaguePlayerClutchUsageCtrl.$inject = ["$scope", "$location", "SplitsService", "SEASONS", "LeaguePlayerClutchService"];

    function LeaguePlayerClutchUsageCtrl($scope, $location, SplitsService, SEASONS, LeaguePlayerClutchService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leaguePlayerStats.Season,
            seasonRange: [SEASONS.leaguePlayerStats.SeasonYearFrom, SEASONS.leaguePlayerStats.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leaguePlayerStats.SeasonType
        }, "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "ClutchTime", "AheadBehind", "PointDiff", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo", "ShotClockRange", "TeamID", "Conference", "Division", "PORound", "DraftYear", "DraftPick", "College", "Country", "Height", "Weight"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Usage";
        $scope.params.PerMode = "Totals";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeaguePlayerClutchService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false;
                var _isEmpty = datasets.LeagueDashPlayerClutch.rowSet.length === 0;
                $scope.noData = _isEmpty ? true : false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeaguePlayerDefenseCtrl", LeaguePlayerDefenseCtrl);
    LeaguePlayerDefenseCtrl.$inject = ["$scope", "$element", "$location", "SEASONS", "SplitsService", "leaguePlayerTrackingDefenseService"];

    function LeaguePlayerDefenseCtrl($scope, $element, $location, SEASONS, SplitsService, leaguePlayerTrackingDefenseService) {
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueTrackingStats.Season,
            seasonRange: [SEASONS.leagueTrackingStats.SeasonYearFrom, SEASONS.leagueTrackingStats.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leagueTrackingStats.SeasonType,
            without: ["Pre Season"]
        }, "PerMode", "College", "Conference", "Country", "DateFrom", "DateTo", "Division", "DraftPick", "DraftYear", "GameSegment", "Height", "LastNGames", "Location", "Month", "OpponentTeamID", "Outcome", "PORound", "Period", "PlayerExperience", "PlayerPosition", "SeasonSegment", "StarterBench", "TeamID", "VsConference", "VsDivision", "Weight"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.DefenseCategory = $element.data("defense-category");
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });

        function getStats() {
            $scope.isLoading = true;
            leaguePlayerTrackingDefenseService.get($scope.params).then(function(datasets) {
                $scope.isLoading = false;
                $scope.datasets = datasets;
                $scope.noData = $scope.datasets[0].rowSet.length === 0
            })
        }
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeaguePlayerDefenseNavCtrl", LeaguePlayerDefenseNavCtrl);
    LeaguePlayerDefenseNavCtrl.$inject = ["$scope", "$location", "$route"];

    function LeaguePlayerDefenseNavCtrl($scope, $location, $route) {
        $scope.state = $scope.state || {};
        // set current tab on page load
        $scope.state.selected = $location.path();
        $scope.onNavChange = function() {
            // docs.angularjs.org/api/ngRoute/service/$route
            $location.url($scope.state.selected)
        }
    }
})();
(function() {
    stats.controller("leaguePlayerGameLogsCtrl", leaguePlayerGameLogsCtrl);
    leaguePlayerGameLogsCtrl.$inject = ["$location", "$scope", "SEASONS", "SplitsService", "LeagueGameLogsService"];

    function leaguePlayerGameLogsCtrl($location, $scope, Seasons, SplitsService, LeagueGameLogsService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        $scope.isAllTime = false;
        $scope.doSort = doSort;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: Seasons.leagueGameLogs.Season,
            seasonRange: [Seasons.leagueGameLogs.SeasonFrom, Seasons.leagueGameLogs.Season],
            includeBefore: [{
                val: "ALLTIME",
                text: "All Seasons"
            }]
        }, {
            name: "SeasonType",
            initial: Seasons.leagueGameLogs.SeasonType
        }]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.Sorter = $location.search().Sorter || "PTS";
        $scope.params.Direction = $location.search().Direction || "DESC";
        $scope.params.PlayerOrTeam = "P";
        $scope.params.Counter = "1000";
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            // reset sorting and direction params for
            // when switching between alltime and season
            if ($scope.params.Season === "ALLTIME") {
                if (!$scope.isAllTime) {
                    $location.search("sort", null);
                    $location.search("dir", null)
                }
                $scope.isAllTime = true
            } else {
                if ($scope.isAllTime) {
                    $location.search("Sorter", null);
                    $location.search("Direction", null)
                }
                $scope.isAllTime = false
            }
            // get stats
            getStats()
        });
        // init
        getStats();
        /**
         * getStats()
         * get League Game Logs using LeagueGameLogsService
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueGameLogsService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.noData = $scope.datasets.LeagueGameLog.datatable.length ? false : true;
                $scope.isLoading = false
            })
        }
        /**
         * doSort()
         *
         * called from scope
         */
        function doSort(field) {
            if ($scope.params.Sorter == field) {
                $scope.params.Direction = $scope.params.Direction === "DESC" ? "ASC" : "DESC"
            } else {
                $scope.params.Sorter = field;
                $scope.params.Direction = "DESC"
            }
            $location.search("Sorter", $scope.params.Sorter);
            $location.search("Direction", $scope.params.Direction);
            getStats()
        }
    }
})();
(function() {
    stats.controller("LeaguePlayerGeneralAdvancedCtrl", LeaguePlayerGeneralAdvancedCtrl);
    LeaguePlayerGeneralAdvancedCtrl.$inject = ["$scope", "$location", "SplitsService", "SEASONS", "LeaguePlayerGeneralService"];

    function LeaguePlayerGeneralAdvancedCtrl($scope, $location, SplitsService, SEASONS, LeaguePlayerGeneralService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leaguePlayerStats.Season,
            seasonRange: [SEASONS.leaguePlayerStats.SeasonYearFrom, SEASONS.leaguePlayerStats.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leaguePlayerStats.SeasonType
        }, "GameSegment", "Period", "Rank", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo", "ShotClockRange", "TeamID", "Conference", "Division", "PORound", "DraftYear", "DraftPick", "College", "Country", "Height", "Weight"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Advanced";
        $scope.params.PerMode = "Totals";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeaguePlayerGeneralService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false;
                var _isEmpty = datasets.LeagueDashPlayerStats.rowSet.length === 0;
                $scope.noData = _isEmpty ? true : false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeaguePlayerGeneralBaseCtrl", LeaguePlayerGeneralBaseCtrl);
    LeaguePlayerGeneralBaseCtrl.$inject = ["$scope", "$location", "SplitsService", "SEASONS", "LeaguePlayerGeneralService"];

    function LeaguePlayerGeneralBaseCtrl($scope, $location, SplitsService, SEASONS, LeaguePlayerGeneralService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leaguePlayerStats.Season,
            seasonRange: [SEASONS.leaguePlayerStats.SeasonYearFrom, SEASONS.leaguePlayerStats.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leaguePlayerStats.SeasonType
        }, {
            name: "PerMode",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo", "ShotClockRange", "TeamID", "Conference", "Division", "PORound", "DraftYear", "DraftPick", "College", "Country", "Height", "Weight"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Base";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeaguePlayerGeneralService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false;
                var _isEmpty = datasets.LeagueDashPlayerStats.rowSet.length === 0;
                $scope.noData = _isEmpty ? true : false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeaguePlayerGeneralMiscCtrl", LeaguePlayerGeneralMiscCtrl);
    LeaguePlayerGeneralMiscCtrl.$inject = ["$scope", "$location", "SplitsService", "SEASONS", "LeaguePlayerGeneralService"];

    function LeaguePlayerGeneralMiscCtrl($scope, $location, SplitsService, SEASONS, LeaguePlayerGeneralService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leaguePlayerStats.Season,
            seasonRange: [SEASONS.leaguePlayerStats.SeasonYearFrom, SEASONS.leaguePlayerStats.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leaguePlayerStats.SeasonType
        }, {
            name: "PerMode",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo", "ShotClockRange", "TeamID", "Conference", "Division", "PORound", "DraftYear", "DraftPick", "College", "Country", "Height", "Weight"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Misc";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeaguePlayerGeneralService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false;
                var _isEmpty = datasets.LeagueDashPlayerStats.rowSet.length === 0;
                $scope.noData = _isEmpty ? true : false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeaguePlayerGeneralScoringCtrl", LeaguePlayerGeneralScoringCtrl);
    LeaguePlayerGeneralScoringCtrl.$inject = ["$scope", "$location", "SplitsService", "SEASONS", "LeaguePlayerGeneralService"];

    function LeaguePlayerGeneralScoringCtrl($scope, $location, SplitsService, SEASONS, LeaguePlayerGeneralService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leaguePlayerStats.Season,
            seasonRange: [SEASONS.leaguePlayerStats.SeasonYearFrom, SEASONS.leaguePlayerStats.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leaguePlayerStats.SeasonType
        }, "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo", "ShotClockRange", "TeamID", "Conference", "Division", "PORound", "DraftYear", "DraftPick", "College", "Country", "Height", "Weight"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Scoring";
        $scope.params.PerMode = "PerGame";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeaguePlayerGeneralService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false;
                var _isEmpty = datasets.LeagueDashPlayerStats.rowSet.length === 0;
                $scope.noData = _isEmpty ? true : false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeaguePlayerGeneralUsageCtrl", LeaguePlayerGeneralUsageCtrl);
    LeaguePlayerGeneralUsageCtrl.$inject = ["$scope", "$location", "SplitsService", "SEASONS", "LeaguePlayerGeneralService"];

    function LeaguePlayerGeneralUsageCtrl($scope, $location, SplitsService, SEASONS, LeaguePlayerGeneralService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leaguePlayerStats.Season,
            seasonRange: [SEASONS.leaguePlayerStats.SeasonYearFrom, SEASONS.leaguePlayerStats.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leaguePlayerStats.SeasonType
        }, "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "PaceAdjust", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo", "ShotClockRange", "TeamID", "Conference", "Division", "PORound", "DraftYear", "DraftPick", "College", "Country", "Height", "Weight"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Usage";
        $scope.params.PerMode = "Totals";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeaguePlayerGeneralService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false;
                var _isEmpty = datasets.LeagueDashPlayerStats.rowSet.length === 0;
                $scope.noData = _isEmpty ? true : false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
/*
 * NO 11/9 - this is actually good. look into reusing this method other places
 */
(function() {
    stats.controller("LeaguePlayerNavCtrl", LeaguePlayerNavCtrl);
    LeaguePlayerNavCtrl.$inject = ["$scope", "$location", "$route"];

    function LeaguePlayerNavCtrl($scope, $location, $route) {
        $scope.state = $scope.state || {};
        // set current tab on page load
        $scope.state.selected = $location.path();
        $scope.onNavChange = function() {
            // docs.angularjs.org/api/ngRoute/service/$route
            $location.url($scope.state.selected)
        }
    }
})();
(function() {
    stats.controller("LeaguePlayerOppShootingCtrl", LeaguePlayerOppShootingCtrl);
    LeaguePlayerOppShootingCtrl.$inject = ["$scope", "$location", "SplitsService", "SEASONS", "LeaguePlayerShootingService"];

    function LeaguePlayerOppShootingCtrl($scope, $location, SplitsService, SEASONS, LeaguePlayerShootingService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leaguePlayerStats.Season,
            seasonRange: [SEASONS.leaguePlayerStats.SeasonYearFrom, SEASONS.leaguePlayerStats.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leaguePlayerStats.SeasonType
        }, "PerMode", "DistanceRange", "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo", "ShotClockRange", "TeamID", "Conference", "Division", "PORound", "DraftYear", "DraftPick", "College", "Country", "Height", "Weight"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Opponent";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeaguePlayerShootingService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false;
                var _isEmpty = datasets[0].datatable.length === 0;
                $scope.noData = _isEmpty ? true : false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeaguePlayerShootingCtrl", LeaguePlayerShootingCtrl);
    LeaguePlayerShootingCtrl.$inject = ["$scope", "$location", "SplitsService", "SEASONS", "LeaguePlayerShootingService"];

    function LeaguePlayerShootingCtrl($scope, $location, SplitsService, SEASONS, LeaguePlayerShootingService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leaguePlayerStats.Season,
            seasonRange: [SEASONS.leaguePlayerStats.SeasonYearFrom, SEASONS.leaguePlayerStats.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leaguePlayerStats.SeasonType
        }, "PerMode", "DistanceRange", "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo", "ShotClockRange", "TeamID", "Conference", "Division", "PORound", "DraftYear", "DraftPick", "College", "Country", "Height", "Weight"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Base";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeaguePlayerShootingService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false;
                var _isEmpty = datasets[0].datatable.length === 0;
                $scope.noData = _isEmpty ? true : false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeaguePlayerShotsCtrl", LeaguePlayerShotsCtrl);
    LeaguePlayerShotsCtrl.$inject = ["$scope", "$element", "$location", "SEASONS", "SplitsService", "leaguePlayerTrackingShotsService"];

    function LeaguePlayerShotsCtrl($scope, $element, $location, SEASONS, SplitsService, leaguePlayerTrackingShotsService) {
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueTrackingStats.Season,
            seasonRange: [SEASONS.leagueTrackingStats.SeasonYearFrom, SEASONS.leagueTrackingStats.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leagueTrackingStats.SeasonType,
            without: ["Pre Season"]
        }, "PerMode", "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo", "TeamID", "Conference", "Division", "PORound", "DraftYear", "DraftPick", "College", "Country", "Height", "Weight"]);
        $scope.sections = ["closestDef10", "CloseDefDistRange", "DribbleRange", "GeneralRange", "ShotClockRange", "ShotDistRange", "TouchTimeRange"];
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.sections.forEach(function(s) {
            $scope.params[s] = $location.search()[s] || "";
            if ($location.search()[s]) {
                $scope.currentSection = s;
                $scope.currentRange = $scope.params[s];
                $scope.params[s] = $location.search()[s]
            }
        });
        if (!$scope.currentSection) {
            $scope.currentSection = "GeneralRange";
            $scope.currentRange = "Overall";
            $scope.params.GeneralRange = "Overall"
        }
        $scope.$on("runit", function(event) {
            getStats()
        });
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("LeaguePlayerShotsSectionChange", function(event, section, range, shotdist) {
            $scope.sections.forEach(function(s) {
                $scope.params[s] = "";
                $location.search(s, null)
            });
            $scope.params.ShotDistRange = shotdist ? ">=10.0" : "";
            $location.search("ShotDistRange", $scope.params.ShotDistRange);
            $scope.params[section] = range;
            $scope.currentSection = section;
            $scope.currentRange = range;
            $location.search(section, range);
            getStats()
        });

        function getStats() {
            $scope.isLoading = true;
            leaguePlayerTrackingShotsService.get($scope.params).then(function(datasets) {
                $scope.isLoading = false;
                $scope.datasets = datasets;
                $scope.noData = $scope.datasets[0].rowSet.length === 0
            })
        }
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeaguePlayerShotsNavCtrl", LeaguePlayerShotsNavCtrl);
    LeaguePlayerShotsNavCtrl.$inject = ["$scope", "$rootScope", "$route"];

    function LeaguePlayerShotsNavCtrl($scope, $rootScope, $route) {
        $scope.navigateTo = navigateTo;
        $scope.onNavChange = onNavChangeFn;

        function navigateTo(section, range, shotdist) {
            $rootScope.$broadcast("LeaguePlayerShotsSectionChange", section, range, shotdist)
        }

        function onNavChangeFn() {
            var val = $scope.selected.split("|");
            if (val.length < 2) {
                return
            }
            navigateTo(val[0], val[1], val[2])
        }
    }
})();
(function() {
    stats.controller("LeagueTeamClutchAdvancedCtrl", LeagueTeamClutchAdvancedCtrl);
    LeagueTeamClutchAdvancedCtrl.$inject = ["$scope", "$location", "SplitsService", "SEASONS", "LeagueTeamClutchService"];

    function LeagueTeamClutchAdvancedCtrl($scope, $location, SplitsService, SEASONS, LeagueTeamClutchService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueTeamStats.Season,
            seasonRange: [SEASONS.leagueTeamStats.SeasonYearFrom, SEASONS.leagueTeamStats.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leagueTeamStats.SeasonType
        }, "GameSegment", "Period", "Rank", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "ClutchTime", "AheadBehind", "PointDiff", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo", "ShotClockRange", "TeamID", "Conference", "Division", "PORound"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Advanced";
        $scope.params.PerMode = "Totals";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueTeamClutchService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false;
                var _isEmpty = datasets.LeagueDashTeamClutch.rowSet.length === 0;
                $scope.noData = _isEmpty ? true : false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueTeamClutchBaseCtrl", LeagueTeamClutchBaseCtrl);
    LeagueTeamClutchBaseCtrl.$inect = ["$scope", "$location", "SplitsService", "SEASONS", "LeagueTeamClutchService"];

    function LeagueTeamClutchBaseCtrl($scope, $location, SplitsService, SEASONS, LeagueTeamClutchService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueTeamStats.Season,
            seasonRange: [SEASONS.leagueTeamStats.SeasonYearFrom, SEASONS.leagueTeamStats.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leagueTeamStats.SeasonType
        }, {
            name: "PerMode",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "ClutchTime", "AheadBehind", "PointDiff", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo", "ShotClockRange", "TeamID", "Conference", "Division", "PORound"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Base";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueTeamClutchService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false;
                var _isEmpty = datasets.LeagueDashTeamClutch.rowSet.length === 0;
                $scope.noData = _isEmpty ? true : false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueTeamClutchFourFactorsCtrl", LeagueTeamClutchFourFactorsCtrl);
    LeagueTeamClutchFourFactorsCtrl.$inject = ["$scope", "$location", "SplitsService", "SEASONS", "LeagueTeamClutchService"];

    function LeagueTeamClutchFourFactorsCtrl($scope, $location, SplitsService, SEASONS, LeagueTeamClutchService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueTeamStats.Season,
            seasonRange: [SEASONS.leagueTeamStats.SeasonYearFrom, SEASONS.leagueTeamStats.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leagueTeamStats.SeasonType
        }, "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "ClutchTime", "AheadBehind", "PointDiff", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo", "ShotClockRange", "TeamID", "Conference", "Division", "PORound"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Four Factors";
        $scope.params.PerMode = "Totals";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueTeamClutchService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false;
                var _isEmpty = datasets.LeagueDashTeamClutch.rowSet.length === 0;
                $scope.noData = _isEmpty ? true : false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueTeamClutchMiscCtrl", LeagueTeamClutchMiscCtrl);
    LeagueTeamClutchMiscCtrl.$inject = ["$scope", "$location", "SplitsService", "SEASONS", "LeagueTeamClutchService"];

    function LeagueTeamClutchMiscCtrl($scope, $location, SplitsService, SEASONS, LeagueTeamClutchService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get([{
            name: "Season",
            initial: SEASONS.leagueTeamStats.Season,
            seasonRange: [SEASONS.leagueTeamStats.SeasonYearFrom, SEASONS.leagueTeamStats.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leagueTeamStats.SeasonType
        }, {
            name: "PerMode",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "ClutchTime", "AheadBehind", "PointDiff", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo", "ShotClockRange", "TeamID", "Conference", "Division", "PORound"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Misc";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueTeamClutchService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false;
                var _isEmpty = datasets.LeagueDashTeamClutch.rowSet.length === 0;
                $scope.noData = _isEmpty ? true : false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueTeamClutchOpponentCtrl", LeagueTeamClutchOpponentCtrl);
    LeagueTeamClutchOpponentCtrl.$inject = ["$scope", "$location", "SplitsService", "SEASONS", "LeagueTeamClutchService"];

    function LeagueTeamClutchOpponentCtrl($scope, $location, SplitsService, SEASONS, LeagueTeamClutchService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueTeamStats.Season,
            seasonRange: [SEASONS.leagueTeamStats.SeasonYearFrom, SEASONS.leagueTeamStats.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leagueTeamStats.SeasonType
        }, {
            name: "PerMode",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "ClutchTime", "AheadBehind", "PointDiff", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo", "ShotClockRange", "TeamID", "Conference", "Division", "PORound"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Opponent";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueTeamClutchService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false;
                var _isEmpty = datasets.LeagueDashTeamClutch.rowSet.length === 0;
                $scope.noData = _isEmpty ? true : false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueTeamClutchScoringCtrl", LeagueTeamClutchScoringCtrl);
    LeagueTeamClutchScoringCtrl.$inject = ["$scope", "$location", "SplitsService", "SEASONS", "LeagueTeamClutchService"];

    function LeagueTeamClutchScoringCtrl($scope, $location, SplitsService, SEASONS, LeagueTeamClutchService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueTeamStats.Season,
            seasonRange: [SEASONS.leagueTeamStats.SeasonYearFrom, SEASONS.leagueTeamStats.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leagueTeamStats.SeasonType
        }, "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "ClutchTime", "AheadBehind", "PointDiff", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo", "ShotClockRange", "TeamID", "Conference", "Division", "PORound"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Scoring";
        $scope.params.PerMode = "PerGame";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueTeamClutchService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false;
                var _isEmpty = datasets.LeagueDashTeamClutch.rowSet.length === 0;
                $scope.noData = _isEmpty ? true : false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueTeamDefenseCtrl", LeagueTeamDefenseCtrl);
    LeagueTeamDefenseCtrl.$inject = ["$scope", "$element", "$location", "SEASONS", "SplitsService", "leagueTeamTrackingDefenseService"];

    function LeagueTeamDefenseCtrl($scope, $element, $location, SEASONS, SplitsService, leagueTeamTrackingDefenseService) {
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueTrackingStats.Season,
            seasonRange: [SEASONS.leagueTrackingStats.SeasonYearFrom, SEASONS.leagueTrackingStats.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leagueTrackingStats.SeasonType,
            without: ["Pre Season"]
        }, "Conference", "DateFrom", "DateTo", "Division", "GameSegment", "LastNGames", "Location", "Month", "OpponentTeamID", "Outcome", "Period", "PerMode", "PORound", "SeasonSegment", "TeamID", "VsConference", "VsDivision"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.DefenseCategory = $element.data("defense-category");
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });

        function getStats() {
            $scope.isLoading = true;
            leagueTeamTrackingDefenseService.get($scope.params).then(function(datasets) {
                $scope.isLoading = false;
                $scope.datasets = datasets;
                $scope.noData = $scope.datasets[0].rowSet.length === 0
            })
        }
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueTeamDefenseNavCtrl", LeagueTeamDefenseNavCtrl);
    LeagueTeamDefenseNavCtrl.$inject = ["$scope", "$location", "$route"];

    function LeagueTeamDefenseNavCtrl($scope, $location, $route) {
        $scope.state = $scope.state || {};
        // set current tab on page load
        $scope.state.selected = $location.path();
        $scope.onNavChange = function() {
            // docs.angularjs.org/api/ngRoute/service/$route
            $location.url($scope.state.selected)
        }
    }
})();
(function() {
    stats.controller("leagueTeamGameLogsCtrl", leagueTeamGameLogsCtrl);
    leagueTeamGameLogsCtrl.$inject = ["$location", "$scope", "SEASONS", "SplitsService", "LeagueGameLogsService"];

    function leagueTeamGameLogsCtrl($location, $scope, Seasons, SplitsService, LeagueGameLogsService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        $scope.isAllTime = false;
        $scope.doSort = doSort;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: Seasons.leagueGameLogs.Season,
            seasonRange: [Seasons.leagueGameLogs.SeasonFrom, Seasons.leagueGameLogs.Season],
            includeBefore: [{
                val: "ALLTIME",
                text: "All Seasons"
            }]
        }, {
            name: "SeasonType",
            initial: Seasons.leagueGameLogs.SeasonType
        }]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.Sorter = $location.search().Sorter || "PTS";
        $scope.params.Direction = $location.search().Direction || "DESC";
        $scope.params.PlayerOrTeam = "T";
        $scope.params.Counter = "1000";
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            // reset sorting and direction params for
            // when switching between alltime and season
            if ($scope.params.Season === "ALLTIME") {
                if (!$scope.isAllTime) {
                    $location.search("sort", null);
                    $location.search("dir", null)
                }
                $scope.isAllTime = true
            } else {
                if ($scope.isAllTime) {
                    $location.search("Sorter", null);
                    $location.search("Direction", null)
                }
                $scope.isAllTime = false
            }
            // get stats
            getStats()
        });
        // init
        getStats();
        /**
         * getStats()
         * get League Game Logs using LeagueGameLogsService
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueGameLogsService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.noData = $scope.datasets.LeagueGameLog.datatable.length ? false : true;
                $scope.isLoading = false
            })
        }
        /**
         * doSort()
         *
         * called from scope
         */
        function doSort(field) {
            if ($scope.params.Sorter == field) {
                $scope.params.Direction = $scope.params.Direction === "DESC" ? "ASC" : "DESC"
            } else {
                $scope.params.Sorter = field;
                $scope.params.Direction = "DESC"
            }
            $location.search("Sorter", $scope.params.Sorter);
            $location.search("Direction", $scope.params.Direction);
            getStats()
        }
    }
})();
(function() {
    stats.controller("LeagueTeamGeneralAdvancedCtrl", LeagueTeamGeneralAdvancedCtrl);
    LeagueTeamGeneralAdvancedCtrl.$inject = ["$scope", "$location", "SplitsService", "SEASONS", "LeagueTeamGeneralService"];

    function LeagueTeamGeneralAdvancedCtrl($scope, $location, SplitsService, SEASONS, LeagueTeamGeneralService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueTeamStats.Season,
            seasonRange: [SEASONS.leagueTeamStats.SeasonYearFrom, SEASONS.leagueTeamStats.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leagueTeamStats.SeasonType
        }, "GameSegment", "Period", "Rank", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo", "ShotClockRange", "TeamID", "Conference", "Division", "PORound"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Advanced";
        $scope.params.PerMode = "Totals";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueTeamGeneralService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false;
                var _isEmpty = datasets.LeagueDashTeamStats.rowSet.length === 0;
                $scope.noData = _isEmpty ? true : false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueTeamGeneralBaseCtrl", LeagueTeamGeneralBaseCtrl);
    LeagueTeamGeneralBaseCtrl.$inject = ["$scope", "$location", "SplitsService", "SEASONS", "LeagueTeamGeneralService"];

    function LeagueTeamGeneralBaseCtrl($scope, $location, SplitsService, SEASONS, LeagueTeamGeneralService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueTeamStats.Season,
            seasonRange: [SEASONS.leagueTeamStats.SeasonYearFrom, SEASONS.leagueTeamStats.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leagueTeamStats.SeasonType
        }, {
            name: "PerMode",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo", "ShotClockRange", "TeamID", "Conference", "Division", "PORound"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Base";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueTeamGeneralService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false;
                var _isEmpty = datasets.LeagueDashTeamStats.rowSet.length === 0;
                $scope.noData = _isEmpty ? true : false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueTeamGeneralFourFactorsCtrl", LeagueTeamGeneralFourFactorsCtrl);
    LeagueTeamGeneralFourFactorsCtrl.$inject = ["$scope", "$location", "SplitsService", "SEASONS", "LeagueTeamGeneralService"];

    function LeagueTeamGeneralFourFactorsCtrl($scope, $location, SplitsService, SEASONS, LeagueTeamGeneralService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueTeamStats.Season,
            seasonRange: [SEASONS.leagueTeamStats.SeasonYearFrom, SEASONS.leagueTeamStats.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leagueTeamStats.SeasonType
        }, "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo", "ShotClockRange", "TeamID", "Conference", "Division", "PORound"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Four Factors";
        $scope.params.PerMode = "Totals";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueTeamGeneralService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false;
                var _isEmpty = datasets.LeagueDashTeamStats.rowSet.length === 0;
                $scope.noData = _isEmpty ? true : false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueTeamGeneralMiscCtrl", LeagueTeamGeneralMiscCtrl);
    LeagueTeamGeneralMiscCtrl.$inject = ["$scope", "$location", "SplitsService", "SEASONS", "LeagueTeamGeneralService"];

    function LeagueTeamGeneralMiscCtrl($scope, $location, SplitsService, SEASONS, LeagueTeamGeneralService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueTeamStats.Season,
            seasonRange: [SEASONS.leagueTeamStats.SeasonYearFrom, SEASONS.leagueTeamStats.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leagueTeamStats.SeasonType
        }, {
            name: "PerMode",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo", "ShotClockRange", "TeamID", "Conference", "Division", "PORound"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Misc";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueTeamGeneralService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false;
                var _isEmpty = datasets.LeagueDashTeamStats.rowSet.length === 0;
                $scope.noData = _isEmpty ? true : false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueTeamGeneralOpponentCtrl", LeagueTeamGeneralOpponentCtrl);
    LeagueTeamGeneralOpponentCtrl.$inject = ["$scope", "$location", "SplitsService", "SEASONS", "LeagueTeamGeneralService"];

    function LeagueTeamGeneralOpponentCtrl($scope, $location, SplitsService, SEASONS, LeagueTeamGeneralService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueTeamStats.Season,
            seasonRange: [SEASONS.leagueTeamStats.SeasonYearFrom, SEASONS.leagueTeamStats.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leagueTeamStats.SeasonType
        }, {
            name: "PerMode",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo", "ShotClockRange", "TeamID", "Conference", "Division", "PORound"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Opponent";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueTeamGeneralService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false;
                var _isEmpty = datasets.LeagueDashTeamStats.rowSet.length === 0;
                $scope.noData = _isEmpty ? true : false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueTeamGeneralScoringCtrl", LeagueTeamGeneralScoringCtrl);
    LeagueTeamGeneralScoringCtrl.$inject = ["$scope", "$location", "SplitsService", "SEASONS", "LeagueTeamGeneralService"];

    function LeagueTeamGeneralScoringCtrl($scope, $location, SplitsService, SEASONS, LeagueTeamGeneralService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueTeamStats.Season,
            seasonRange: [SEASONS.leagueTeamStats.SeasonYearFrom, SEASONS.leagueTeamStats.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leagueTeamStats.SeasonType
        }, "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo", "ShotClockRange", "TeamID", "Conference", "Division", "PORound"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Scoring";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueTeamGeneralService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false;
                var _isEmpty = datasets.LeagueDashTeamStats.rowSet.length === 0;
                $scope.noData = _isEmpty ? true : false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})(); /*global $, angular, console, stats */
stats.controller("LeagueTeamNavCtrl", ["$scope", "$location", "$route", function($scope, $location, $route) {
    "use strict";
    $scope.state = $scope.state || {};
    // set current tab on page load
    $scope.state.selected = $location.path();
    $scope.onNavChange = function() {
        // docs.angularjs.org/api/ngRoute/service/$route
        $location.url($scope.state.selected)
    }
}]);
(function() {
    stats.controller("LeagueTeamOppShootingCtrl", LeagueTeamOppShootingCtrl);
    LeagueTeamOppShootingCtrl.$inject = ["$scope", "$location", "SplitsService", "SEASONS", "LeagueTeamShootingService"];

    function LeagueTeamOppShootingCtrl($scope, $location, SplitsService, SEASONS, LeagueTeamShootingService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueTeamStats.Season,
            seasonRange: [SEASONS.leagueTeamStats.SeasonYearFrom, SEASONS.leagueTeamStats.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leagueTeamStats.SeasonType
        }, "PerMode", "DistanceRange", "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo", "ShotClockRange", "TeamID", "Conference", "Division", "PORound"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Opponent";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueTeamShootingService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false;
                var _isEmpty = datasets[0].datatable.length === 0;
                $scope.noData = _isEmpty ? true : false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueTeamShootingCtrl", LeagueTeamShootingCtrl);
    LeagueTeamShootingCtrl.$inject = ["$scope", "$location", "SplitsService", "SEASONS", "LeagueTeamShootingService"];

    function LeagueTeamShootingCtrl($scope, $location, SplitsService, SEASONS, LeagueTeamShootingService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueTeamStats.Season,
            seasonRange: [SEASONS.leagueTeamStats.SeasonYearFrom, SEASONS.leagueTeamStats.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leagueTeamStats.SeasonType
        }, "PerMode", "DistanceRange", "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo", "ShotClockRange", "TeamID", "Conference", "Division", "PORound"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.MeasureType = "Base";
        /*
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            LeagueTeamShootingService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.isLoading = false;
                var _isEmpty = datasets[0].datatable.length === 0;
                $scope.noData = _isEmpty ? true : false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueTeamShotsCtrl", LeagueTeamShotsCtrl);
    LeagueTeamShotsCtrl.$inject = ["$scope", "$element", "$location", "SEASONS", "SplitsService", "leagueTeamTrackingShotsService"];

    function LeagueTeamShotsCtrl($scope, $element, $location, SEASONS, SplitsService, leagueTeamTrackingShotsService) {
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.leagueTrackingStats.Season,
            seasonRange: [SEASONS.leagueTrackingStats.SeasonYearFrom, SEASONS.leagueTrackingStats.SeasonYear]
        }, {
            name: "SeasonType",
            initial: SEASONS.leagueTrackingStats.SeasonType,
            without: ["Pre Season"]
        }, "PerMode", "GameSegment", "Period", "PlayerPosition", "StarterBench", "PlayerExperience", "OpponentTeamID", "VsConference", "VsDivision", "Outcome", "Location", "SeasonSegment", "Month", "LastNGames", "PlusMinus", "PaceAdjust", "Rank", "GameScope", "DateFrom", "DateTo", "TeamID", "Conference", "Division", "PORound"]);
        $scope.sections = ["closestDef10", "CloseDefDistRange", "DribbleRange", "GeneralRange", "ShotClockRange", "ShotDistRange", "TouchTimeRange"];
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.sections.forEach(function(s) {
            $scope.params[s] = $location.search()[s] || "";
            if ($location.search()[s]) {
                $scope.currentSection = s;
                $scope.currentRange = $scope.params[s];
                $scope.params[s] = $location.search()[s]
            }
        });
        if (!$scope.currentSection) {
            $scope.currentSection = "GeneralRange";
            $scope.currentRange = "Overall";
            $scope.params.GeneralRange = "Overall"
        }
        $scope.$on("runit", function(event) {
            getStats()
        });
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("LeagueTeamShotsSectionChange", function(event, section, range, shotdist) {
            $scope.sections.forEach(function(s) {
                $scope.params[s] = "";
                $location.search(s, null)
            });
            $scope.params.ShotDistRange = shotdist ? ">=10.0" : "";
            $location.search("ShotDistRange", $scope.params.ShotDistRange);
            $scope.params[section] = range;
            $scope.currentSection = section;
            $scope.currentRange = range;
            $location.search(section, range);
            getStats()
        });

        function getStats() {
            $scope.isLoading = true;
            leagueTeamTrackingShotsService.get($scope.params).then(function(datasets) {
                $scope.isLoading = false;
                $scope.datasets = datasets;
                $scope.noData = $scope.datasets[0].rowSet.length === 0
            })
        }
        // init
        getStats()
    }
})();
(function() {
    stats.controller("LeagueTeamShotsNavCtrl", LeagueTeamShotsNavCtrl);
    LeagueTeamShotsNavCtrl.$inject = ["$scope", "$rootScope", "$route"];

    function LeagueTeamShotsNavCtrl($scope, $rootScope, $route) {
        $scope.navigateTo = navigateTo;
        $scope.onNavChange = onNavChangeFn;

        function navigateTo(section, range, shotdist) {
            $rootScope.$broadcast("LeagueTeamShotsSectionChange", section, range, shotdist)
        }

        function onNavChangeFn() {
            var val = $scope.selected.split("|");
            if (val.length < 2) {
                return
            }
            navigateTo(val[0], val[1], val[2])
        }
    }
})(); /*global $, angular, console, stats */
/*
 * NO - 10/29 why is this being used on the video status page but not
 * scores or standings. try to reuse controller on those sections.
 * perhaps create a directive
 */
stats.controller("GamedateCalendarCtrl", ["$scope", "$location", "$filter", function NavbarCtrl($scope, $location, $filter) {
    "use strict";
    $scope.showCal = false;
    $scope.dt = $location.path().slice(1);
    $scope.format = "dd/MM/yyyy";

    function setDate(adj) {
        var date = new Date($scope.gameDate);
        date.setDate(date.getDate() + adj);
        var urlDate = $filter("date")(date, "MM/dd/yyyy");
        $location.path(urlDate)
    }
    $scope.changeDate = function(direction) {
        switch (direction) {
            case "next":
                setDate(1); // Function to update activeDate +1
                break;
            case "prev":
                setDate(-1); // Function to update activeDate -1
                break;
            default:
                setDate(1)
        }
    };
    $scope.$watch("dt", function(newval, oldval) {
        var urlDate = $filter("date")($scope.dt, "MM/dd/yyyy");
        $scope.gameDate = urlDate;
        $location.path(urlDate)
    });
    $scope.$watch(function() {
        return $location.path()
    }, function() {
        if ($location.path().slice(1)) {
            $scope.gameDate = $location.path().slice(1)
        } else {
            var date = new Date;
            var urlDate = $filter("date")(date, "MM/dd/yyyy");
            $location.path(urlDate)
        }
    })
}]);
(function() {
    stats.controller("ModalInstanceCtrl", ModalInstanceCtrl);
    ModalInstanceCtrl.$inject = ["$scope", "$sce", "$window", "$location", "SocialService", "$modalInstance", "url", "title", "type"];

    function ModalInstanceCtrl($scope, $sce, $window, $location, SocialService, $modalInstance, url, title, type) {
        $scope.trustAsResourceUrl = $sce.trustAsResourceUrl;
        $scope.trustAsHtml = $sce.trustAsHtml;
        $scope.url = url;
        $scope.title = title;
        $scope.type = type;
        $scope.showEmbedLink = false;
        $scope.close = function() {
            $modalInstance.close("closed")
        };
        $scope.openWindow = function($e) {
            $e.stopPropagation();
            $e.preventDefault();
            var href = $e.currentTarget.href;
            $window.open(href, "Stats", "resizable=yes,scrollbars=yes,height=300,width=600")
        };
        $scope.toggleEmbedLinkVisibility = function toggleEmbedLinkVisibility() {
            $scope.showEmbedLink = !$scope.showEmbedLink
        };
        $scope.highlightAllText = function highlightAllText($event) {
            $event.target.select()
        };
        /*
         *
         *
         */
        var regex = /(#[\d\w]+~?)/;
        var hash = "";
        var location = $location.absUrl();
        if (regex.test(location)) {
            hash = "#" + $location.hash();
            location = location.replace(regex, "")
        }
        var params = url.split("?")[1];
        var appender = location.indexOf("?") > -1 ? "&" : "?";
        var modaltype = "&mtype=" + type;
        var modaltitle = "&mtitle=" + title;
        location = location.replace(/\?.*$/, "?");
        // remove anchor scroll hash tag for deep linking whatever whatever
        // location = location.replace(/#qtr\d/, '');
        location += appender + params + modaltype + modaltitle + hash;
        var longUrl = encodeURIComponent(location);
        SocialService.getLinks(longUrl, title).then(function(shortUrl) {
            $scope.shortUrl = shortUrl
        })
    }
})();
(function() {
    angular.module("stats").controller("NavSearchController", NavSearchController);
    NavSearchController.$inject = ["$scope", "$filter", "$timeout", "PlayerListService", "SEASONS", "TEAMS"];

    function NavSearchController($scope, $filter, $timeout, PlayerListService, SEASONS, TEAMS) {
        /**
         * Playerlist Service Params
         **/
        var params = {
            Season: SEASONS.site.Season,
            LeagueID: "00",
            IsOnlyCurrentSeason: "0"
        };
        /**
         * Scope Variables
         **/
        $scope.searchPlayers = [];
        $scope.searchTeams = [];
        $scope.searchRoster = [];
        $scope.search = "";
        $scope.maxPlayerResults = 10;
        $scope.showResults = false;
        $scope.hasResults = false;
        $scope.activeIndex = 0;
        $scope.toggleSearch = toggleSearch;
        $scope.timeoutPromise = null;
        $scope.timeoutDelay = 500;
        /**
         * Watch for updated search
         **/
        $scope.$watch("search", onSearchUpdate);
        /**
         * Get Full NBA Roster
         **/
        PlayerListService.get(params).then(function(players) {
            $scope.playerList = players
        });
        /**
         * onSearch event handler
         **/
        function onSearchUpdate(s) {
            if (s.length < 3) {
                $scope.showResults = false;
                return
            }
            $scope.activeIndex = 0;
            // filter teams for search value
            $scope.searchTeams = $filter("filter")(TEAMS, s, false);
            // filter players for search value by name
            $scope.searchPlayers = $filter("filter")($scope.playerList, {
                DISPLAY_LAST_COMMA_FIRST: s
            }, false);
            // filter players for search value by team
            if ($scope.searchTeams.length === 1) {
                $scope.searchRoster = $filter("filter")($scope.playerList, {
                    TEAM_ABBREVIATION: $scope.searchTeams[0].abbr
                }, true)
            } else {
                $scope.searchRoster = []
            }
            $scope.hasResults = $scope.searchTeams.length || $scope.searchPlayers.length || $scope.seachRoster.length;
            $scope.showResults = true
        }

        function toggleSearch(val) {
            if (val) {
                $scope.showSearch = true;
                if ($scope.timeoutPromise) {
                    $timeout.cancel($scope.timeoutPromise)
                }
            } else {
                $scope.timeoutPromise = $timeout(function() {
                    $scope.showSearch = false;
                    $scope.timeoutPromise = null
                }, $scope.timeoutDelay)
            }
        }
    }
})(); /*global $, angular, console, stats */
stats.controller("StatTableCtrl", ["$scope", "$element", "$filter", "$location", "$timeout", function($scope, $element, $filter, $location, $timeout) {
    "use strict";
    var unfiltered = $scope.dataset.datatable.slice(0);
    $scope.rows = applyFilters(unfiltered, $scope.filters);
    if ($scope.dataset.datafooter) {
        $scope.footer = $scope.dataset.datafooter
    }
    $scope.totalRows = $scope.rows.length;
    $scope.rowsPerPage = $scope.rowsPerPage || 50;
    $scope.currentPage = 1;
    $scope.totalPages = Math.ceil($scope.totalRows / $scope.rowsPerPage);
    $scope.navHeader = false;
    $scope.descending = true;
    $scope.column = "";
    var updateDataset = function(e) {
        $scope.currentPage = 1;
        var unfiltered = $scope.dataset.datatable.slice(0);
        $scope.rows = applyFilters(unfiltered, $scope.filters);
        $scope.totalRows = $scope.rows.length;
        $scope.rowsPerPage = $scope.rowsPerPage || 50;
        $scope.totalPages = Math.ceil($scope.totalRows / $scope.rowsPerPage);
        $scope.column = "";
        /*
         * remove sorting class
         */
        $element.find("th.sortable").removeClass("sorted");
        /*
         * deep link sorting
         */
        var dsInitialSortField = $scope.datasets ? $scope.datasets.initialSortField : null;
        var dsShouldReverse = $scope.datasets ? $scope.datasets.shouldReverse : null;
        var initialSortField = $location.search().sort || dsInitialSortField;
        var shouldReverse = $location.search().dir ? $location.search().dir == "-1" : dsShouldReverse;
        if (initialSortField) {
            sortColumn(initialSortField, false, shouldReverse)
        }
        /*
         * init to first page
         */
        pageChange()
    };
    var sortColumn = function(column, apply, reverse) {
        if (reverse) {
            $scope.column = column;
            $scope.descending = false
        } else if ($scope.column == column) {
            $scope.descending = !$scope.descending
        } else {
            $scope.column = column;
            $scope.descending = true
        }
        // deep link sorting
        $location.search("sort", column);
        $location.search("dir", $scope.descending ? 1 : -1);
        $scope.rows.sort(sortfunc);
        var selector = 'th[field="' + column + '"]';
        var $elm = $element.find(selector);
        $elm.siblings().removeClass("sorted").end().addClass("sorted");
        $scope.currentPage = 1;
        pageChange();
        if (apply) {
            $scope.$apply()
        }
    };
    var sortfunc = function(a, b) {
        if ($scope.descending) {
            if (a[$scope.column] > b[$scope.column]) {
                return -1
            } else if (a[$scope.column] < b[$scope.column]) {
                return 1
            } else {
                return 0
            }
        } else {
            if (b[$scope.column] > a[$scope.column]) {
                return -1
            } else if (b[$scope.column] < a[$scope.column]) {
                return 1
            } else {
                return 0
            }
        }
    };
    var prevPage = function(e) {
        if ($scope.currentPage == 1) {
            return
        }
        $scope.currentPage -= 1;
        $scope.$apply()
    };
    var nextPage = function(e) {
        if ($scope.currentPage == $scope.totalPages) {
            return
        }
        $scope.currentPage += 1;
        $scope.$apply()
    };
    var pageChange = function(e) {
        var alpha = ($scope.currentPage - 1) * $scope.rowsPerPage;
        var omega = alpha + $scope.rowsPerPage;
        $scope.page = $scope.rows.slice(alpha, omega)
    };
    var setFilters = function(e) {
        updateDataset()
    }; /*** watchers ***/
    $scope.$watch("dataset", updateDataset);
    $scope.$watch("currentPage", pageChange);
    $scope.$watch("filters", setFilters); /*** scope events ***/
    $scope.$on("changeSortColumn", function(event, column) {
        sortColumn(column, false)
    }); /*** events ***/
    $element.on("click", ".page-nav.left", prevPage);
    $element.on("click", ".page-nav.right", nextPage);
    $element.on("click", "th.sortable", function(e) {
        var column = $(this).attr("field");
        sortColumn(column, true)
    });
    /**
     * init available custom fields
     *
     * $timeout insures table data is in the DOM
     * before `$element.find()` is called.
     */
    $timeout(function() {
        var cfs = [];
        $element.find(".cf").each(function(i, n) {
            var $n = angular.element(n);
            var name = $n.attr("field");
            var text = $n.hasClass("grouped") ? $n.attr("field") : $n.text();
            cfs.push({
                name: name,
                text: text
            })
        });
        $scope.$emit("customFields", cfs)
    }, 0); /*** apply filters ***/
    function applyFilters(rows, filters) {
        if (!filters) {
            return rows
        }
        for (var i in filters) {
            rows = $filter("customStatFilter")(rows, filters[i].value)
        }
        return rows
    }
}]);
/*
 * NO 10/29 use svg responsive directive
 */
stats.controller("MovementCtrl", ["$scope", "$rootScope", "$location", "$element", "$http", "$filter", function($scope, $rootScope, $location, $element, $http, $filter) {
    var animationFrame;
    var momentIndex = 0;
    var data;
    var players = {};
    var teams = {};
    var teamkeys = ["home", "visitor"];
    var xMin = 0;
    var xMax = 75;
    $scope.isPlaying = false;
    $scope.isLoading = true;
    $scope.noData = false;
    $scope.court = {
        margin: {
            top: 15,
            right: 30,
            bottom: 15,
            left: 30
        },
        width: 940,
        height: 500,
        rotation: 40
    };
    $scope.playbackSpeeds = [{
        ms: 160,
        text: ".25x"
    }, {
        ms: 80,
        text: ".5x"
    }, {
        ms: 40,
        text: "1x"
    }, {
        ms: 20,
        text: "2x"
    }, {
        ms: 10,
        text: "4x"
    }];
    $scope.playbackSpeed = $scope.playbackSpeeds[2];
    $scope.svg = {
        elm: $element.find("svg"),
        width: $scope.court.width + $scope.court.margin.left + $scope.court.margin.right,
        height: $scope.court.height + $scope.court.margin.top + $scope.court.margin.bottom
    };
    $scope.svg.aspect = $scope.svg.height / $scope.svg.width;
    $scope.vtm = {
        players: [],
        hideCoverage: false
    };
    $scope.htm = {
        players: [],
        hideCoverage: false
    };
    $scope.ball = {};

    function parseData(data) {
        for (var i in teamkeys) {
            var key = teamkeys[i];
            var team = data[key];
            var teamid = team.teamid;
            teams[teamid] = team;
            teams[teamid].type = key;
            for (var j in team.players) {
                var player = team.players[j];
                var playerid = player.playerid;
                players[playerid] = player;
                player.name = player.firstname + " " + player.lastname;
                player.teamid = team.teamid;
                player.teamname = team.name;
                player.teamtype = team.type
            }
        }
        $scope.htm.team = data.home;
        $scope.vtm.team = data.visitor
    }

    function parseMoment(moment) {
        var i;
        var info = {
            period: moment[0],
            timestamp: moment[1],
            gameclock: moment[2],
            shotclock: moment[3],
            eventid: moment[4]
        };
        var ps = moment[5].map(function(n, i) {
            var obj = {
                teamid: n[0],
                playerid: n[1],
                x: n[2] * 10,
                y: n[3] * 10,
                z: n[4] * 10,
                hide: false
            };
            return obj
        });
        var obj = {
            info: info,
            ball: ps[0],
            htm: ps.slice(1, 6),
            vtm: ps.slice(6, 11)
        };
        for (i in obj.vtm) {
            obj.vtm[i].info = players[obj.vtm[i].playerid]
        }
        for (i in obj.htm) {
            obj.htm[i].info = players[obj.htm[i].playerid]
        }
        return obj
    }

    function getTeamHull(d) {
        return d3.geom.hull(d.map(function(i) {
            return [i.x, i.y]
        }))
    }

    function getBallRadius(z) {
        var r = z * .2;
        r = Math.min(Math.max(r, 10), 18);
        return r
    }

    function setTeamPlayerData(team, loc) {
        // if number of players has change
        // reset all data
        if ($scope[loc].players.length != team.length) {
            $scope[loc].players = team;
            return
        } else {
            for (var i in team) {
                var p = $scope[loc].players[i];
                var m = team[i];
                if (p && p.playerid == m.playerid) {
                    p.x = m.x;
                    p.y = m.y
                } else {
                    $scope[loc].players[i] = m
                }
            }
        }
        var visible = $filter("filter")($scope[loc].players, {
            hide: false
        });
        $scope[loc].hull = getTeamHull(visible);
        $scope[loc].path = "M" + $scope[loc].hull.join("L") + "Z";
        $scope[loc].area = d3.geom.polygon($scope[loc].hull).area();
        $scope[loc].coverage = $scope[loc].area / 2350
    }

    function onFrame(dontApply) {
        // get current frame data
        var moment = parseMoment(data.moments[momentIndex]);
        $scope.court.period = moment.info.period;
        $scope.court.gameclock = moment.info.gameclock;
        $scope.court.shotclock = moment.info.shotclock;
        setTeamPlayerData(moment.htm, "htm");
        setTeamPlayerData(moment.vtm, "vtm");
        $scope.ball.x = moment.ball.x;
        $scope.ball.y = moment.ball.y;
        $scope.ball.r = getBallRadius(moment.ball.z);
        if (!dontApply) {
            $scope.$apply()
        }
        // increment index
        momentIndex += 1;
        // stop animating
        if (momentIndex >= data.moments.length) {
            $scope.pause();
            broadcastFinished(true)
        }
    }

    function broadcastFinished(shouldDigest) {
        $scope.stop();
        $scope.$emit("finishedPlaying", shouldDigest)
    } /*** SCOPE EVENTS ***/
    $scope.rewind = function() {
        momentIndex = 0;
        clearInterval(animationFrame);
        onFrame(true)
    };
    $scope.forward = function() {
        momentIndex = data.moments.length - 1;
        clearInterval(animationFrame);
        onFrame(true)
    };
    $scope.pause = function() {
        $scope.isPlaying = false;
        clearInterval(animationFrame);
        return false
    };
    $scope.stop = function() {
        $scope.isPlaying = false;
        momentIndex = 0;
        clearInterval(animationFrame);
        return false
    };
    $scope.play = function() {
        $scope.isPlaying = true;
        if (momentIndex == data.moments.length) {
            momentIndex = 0
        }
        clearInterval(animationFrame);
        animationFrame = setInterval(onFrame, $scope.playbackSpeed.ms);
        return false
    };
    $scope.stepbackward = function() {
        momentIndex = momentIndex > 0 ? momentIndex - 2 : momentIndex;
        if (momentIndex < 0) {
            momentIndex = 0
        }
        clearInterval(animationFrame);
        onFrame(true)
    };
    $scope.stepforward = function() {
        momentIndex = momentIndex < data.moments.length - 1 ? momentIndex + 1 : data.moments.length - 1;
        clearInterval(animationFrame);
        onFrame(true)
    };
    /*
     *
     *
     *
     *
     */
    $scope.getFeed = function(params) {
        var url = "/stats/locations_getmoments/";
        $scope.isLoading = true;
        momentIndex = 0;
        $http({
            method: "GET",
            url: url,
            params: params
        }).success(function(response, status) {
            data = response;
            if (data.moments.length === 0) {
                console.log("no data in momments array", params);
                $scope.noData = true;
                $scope.isLoading = false;
                broadcastFinished();
                return
            }
            parseData(data);
            $scope.isLoading = false;
            momentIndex = 0;
            $scope.play();
            setTimeout(onResize, 100)
        }).error(function(response, status) {
            console.log("error", response, status);
            $scope.noData = true;
            $scope.isLoading = false;
            broadcastFinished()
        })
    };
    $scope.$watch("selectedItem", function(item) {
        if (!item || !item.ei || !item.gi) {
            return
        }
        $scope.description = item.dsc;
        var params = {
            gameid: item.gi,
            eventid: item.ei
        }; /*** INIT ANIMATION ***/
        $scope.getFeed(params)
    });
    if ($location.search().GameEventID) {
        var params = {
            gameid: $location.search().GameID,
            eventid: $location.search().GameEventID
        };
        $scope.getFeed(params)
    } /*** RESIZE EVENT ***/
    // this has to be done unfortunately to make
    // the svg resize properly
    var onResize = function() {
        var width = $scope.svg.elm.width();
        $scope.svg.elm.attr("width", width);
        $scope.svg.elm.attr("height", width * $scope.svg.aspect)
    };
    setTimeout(onResize, 100);
    $(window).resize(onResize)
}]);
(function() {
    stats.controller("PlayerCareerCtrl", PlayerCareerCtrl);
    PlayerCareerCtrl.$inject = ["$scope", "$location", "SplitsService", "PlayerCareerService"];

    function PlayerCareerCtrl($scope, $location, SplitsService, PlayerCareerService) {
        $scope.isLoading = true;
        $scope.showSplits = false;
        $scope.datasets = {};
        $scope.regularRankings = {
            datatable: {}
        };
        /*
         *
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            PlayerCareerService.get($scope.params).then(function(datasets) {
                $scope.isLoading = false;
                $scope.datasets = datasets;
                $scope.regularRankings.datatable = $scope.datasets[4].datatable
            })
        }
        $scope.$on("runit", function(event) {
            getStats()
        });
        $scope.$watch("playerInfo", function(playerInfo) {
            if (!playerInfo) {
                return
            }
            $scope.Player = playerInfo;
            var config = SplitsService.get(["LeagueID", {
                name: "PerMode",
                include: [{
                    val: "Per36",
                    text: "Per 36 Minutes"
                }],
                without: ["Per48"]
            }]);
            $scope.splits = config.splits;
            $scope.params = config.params;
            $scope.params.PlayerID = playerInfo.PERSON_ID;
            getStats()
        });
        $scope.switchPerMode = function(mode) {
            $scope.params.PerMode = mode;
            $scope.regularRankings.datatable.limit = null;
            $location.search("PerMode", mode);
            getStats()
        }
    }
})();
(function() {
    stats.controller("PlayerGameLogsCtrl", PlayerGameLogsCtrl);
    PlayerGameLogsCtrl.$inject = ["$scope", "$filter", "SplitsService", "SEASONS", "PlayerGamelogService"];

    function PlayerGameLogsCtrl($scope, $filter, SplitsService, SEASONS, PlayerGamelogService) {
        $scope.noData = false;
        $scope.isLoading = true;
        $scope.showSplits = false;
        /*
         *
         *
         *
         *
         */
        function getStats() {
            $scope.isLoading = true;
            PlayerGamelogService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                if (!$scope.datasets || !$scope.datasets.PlayerGameLog || $scope.datasets.PlayerGameLog.datatable.length === 0) {
                    $scope.noData = true
                }
                $scope.isLoading = false
            })
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        });
        $scope.$watch("playerInfo", function(playerInfo) {
            if (!playerInfo) {
                return
            }
            playerInfo.TO_YEAR = +playerInfo.TO_YEAR;
            playerInfo.FROM_YEAR = +playerInfo.FROM_YEAR;
            var config = SplitsService.get(["LeagueID", {
                name: "Season",
                initial: $filter("seasonyear")(Math.min(playerInfo.TO_YEAR, SEASONS.playerGamelogs.SeasonYear)),
                seasonRange: [playerInfo.FROM_YEAR, playerInfo.TO_YEAR],
                includeBefore: [{
                    val: "ALL",
                    text: "All"
                }]
            }, {
                name: "SeasonType",
                initial: SEASONS.playerGamelogs.SeasonType
            }]);
            $scope.splits = config.splits;
            $scope.params = config.params;
            $scope.params.PlayerID = playerInfo.PERSON_ID;
            getStats()
        })
    }
})();
/*
 * NO 11/9 re-do this
 */
stats.controller("PlayerHighsCtrl", ["$scope", "$location", "Splits", "StatsRequest", "$routeParams", "FEEDS_CONFIG", "$http", function($scope, $location, Splits, StatsRequest, $routeParams, FEEDS_CONFIG, $http) {
    "use strict";
    var feedurl = "playerProfile2";
    $scope.params = {
        MeasureType: "Base",
        LeagueID: "00",
        PlayerID: $routeParams.PlayerID,
        SeasonType: ["Regular Season", "Playoffs"],
        GraphStartSeason: "2013-14",
        GraphEndSeason: "2013-14",
        GraphStat: "PTS",
        PerMode: "PerGame"
    };
    $scope.moreStats = false;
    $scope.showMoreStats = function() {
        $scope.moreStats = true
    };
    $scope.showLessStats = function() {
        $scope.moreStats = false
    };
    var categories = {
        Traditional: [{
                display: "Points ",
                stat: "PTS",
                isShown: true,
                format: "number",
                param: 1
            }, // instead of 'number:1'
            {
                display: "Rebounds ",
                stat: "REB",
                isShown: true,
                format: "number",
                param: 1
            }, {
                display: "Assists ",
                stat: "AST",
                isShown: true,
                format: "number",
                param: 1
            }, {
                display: "Steals ",
                stat: "STL",
                isShown: true,
                format: "number",
                param: 2
            }, {
                display: "Field Goals Made",
                stat: "FGM",
                isShown: false,
                format: "percent"
            }, {
                display: "Free Throws Made",
                stat: "FTM",
                isShown: false,
                format: "percent"
            }, {
                display: "Three Pointers Made",
                stat: "FG3M",
                isShown: false,
                format: "percent"
            }, {
                display: "Blocks ",
                stat: "BLK",
                isShown: false,
                format: "number",
                param: 2
            }
        ]
    };

    function getSeasonNCareerHighs() {
        $scope.isLoading = true;
        StatsRequest.get(feedurl, "", $scope.params).then(function() {
            var datasets = StatsRequest.getData();
            // $scope.playerInfo = datasets.CommonPlayerInfo.datatable[0];
            // $scope.playerHeadlineStats = datasets.PlayerHeadlineStats.datatable[0];
            $scope.isLoading = false;
            var careerHighs = datasets.CareerHighs.datatable;
            var seasonHighs = datasets.SeasonHighs.datatable;
            for (var i = 0, len = categories.Traditional.length; i < len; i++) {
                categories.Traditional[i].datasetCareer = [];
                categories.Traditional[i].datasetSeason = [];
                for (var j = 0, len2 = careerHighs.length; j < len2; j++) {
                    if (categories.Traditional[i].stat === careerHighs[j].STAT) {
                        categories.Traditional[i].datasetCareer.push(careerHighs[j])
                    }
                }
                for (var k = 0, len3 = seasonHighs.length; k < len3; k++) {
                    if (categories.Traditional[i].stat === seasonHighs[k].STAT) {
                        categories.Traditional[i].datasetSeason.push(seasonHighs[k])
                    }
                }
            }
            $scope.cats = categories.Traditional;
            $scope.limit = $scope.cats.length / 2
        })
    }
    getSeasonNCareerHighs()
}]); /*global $, angular, console, stats */
(function() {
    angular.module("stats").controller("PlayerNavCtrl", PlayerNavCtrl);
    PlayerNavCtrl.$inject = ["$scope", "$location", "$route", "$filter"];

    function PlayerNavCtrl($scope, $location, $route, $filter) {
        $scope.$on("$routeChangeSuccess", function(event, routeData) {
            setSelectedPage()
        });
        $scope.showStats = false;
        $scope.showGamelogs = false;
        $scope.showTracking = false;
        $scope.tabCount = 7;
        // NO20160125 - hard code to false to remove tracking
        var pages = [{
                page: "profile",
                path: "",
                text: "Stats Profile",
                type: "profile"
            }, {
                page: "fantasy",
                path: "fantasy",
                text: "Fantasy Profile",
                type: "profile"
            }, {
                page: "statsTraditional",
                path: "stats/",
                text: "Stats Traditional",
                type: "stat"
            }, {
                page: "statsAdvanced",
                path: "stats/advanced/",
                text: "Stats Advanced",
                type: "stat"
            }, {
                page: "statsMisc",
                path: "stats/misc/",
                text: "Stats Misc",
                type: "stat"
            }, {
                page: "statsScoring",
                path: "stats/scoring/",
                text: "Stats Scoring",
                type: "stat"
            }, {
                page: "statsUsage",
                path: "stats/usage/",
                text: "Stats Usage",
                type: "stat"
            }, {
                page: "career",
                path: "career/",
                text: "Career"
            }, {
                page: "vs",
                path: "vs/",
                text: "Comparison"
            }, {
                page: "gamelogs",
                path: "gamelogs/",
                text: "GameLogs",
                type: "gamelogs"
            },
            // { page:'trackinglogsshots', path:"tracking/shots/", text:'Shot Logs', type:'tracking'},
            // { page:'trackinglogsrebounds', path:"tracking/rebounds/", text:'Rebound Logs', type:'tracking'},
            {
                page: "trackingShots",
                path: "tracking/shots/",
                text: "Tracking Shots",
                type: "tracking"
            }, {
                page: "trackingRebounds",
                path: "tracking/rebounds/",
                text: "Tracking Rebounds",
                type: "tracking"
            }, {
                page: "trackingPasses",
                path: "tracking/passes/",
                text: "Tracking Passes",
                type: "tracking"
            }, {
                page: "trackingDefense",
                path: "tracking/defense/",
                text: "Tracking Defense",
                type: "tracking"
            }
        ];
        $scope.onNavChange = function() {
            $location.path($scope.PlayerID + "/" + $scope.selected.path)
        };

        function setSelectedPage() {
            if (!$scope.pages) {
                return
            }
            $scope.page = $route.current.page;
            $scope.selected = $scope.pages.filter(function(n) {
                return n.page == $scope.page
            })[0]
        }
        $scope.$watch("availableStats", function(availableStats) {
            if (!availableStats) {
                return
            }
            $scope.tabCount = 7;
            $scope.tabCount -= availableStats.current ? 0 : 2;
            $scope.tabCount -= availableStats.stats ? 0 : 1;
            $scope.tabCount -= availableStats.tracking ? 0 : 1;
            $scope.tabCount -= availableStats.gamelogs ? 0 : 1;
            $scope.pages = pages.slice(0);
            if (!availableStats.stats) {
                $scope.pages = $filter("filter")($scope.pages, {
                    type: "!stat"
                })
            }
            if (!availableStats.tracking) {
                $scope.pages = $filter("filter")($scope.pages, {
                    type: "!tracking"
                })
            }
            if (!availableStats.gamelogs) {
                $scope.pages = $filter("filter")($scope.pages, {
                    type: "!gamelogs"
                })
            }
            setSelectedPage()
        })
    }
})();
(function() {
    stats.controller("PlayerFantasyController", PlayerFantasyController);
    PlayerFantasyController.$inject = ["$scope", "$anchorScroll", "$filter", "$location", "$routeParams", "$sce", "PlayerNewsService", "SEASONS", "PlayerFantasySplitsService", "PlayerFantasyBarGraphService", "PlayerUpcomingGamesService"];

    function PlayerFantasyController($scope, $anchorScroll, $filter, $location, $routeParams, $sce, PlayerNewsService, SEASONS, PlayerFantasySplitsService, PlayerFantasyBarGraphService, PlayerUpcomingGamesService) {
        $scope.PlayerID = $routeParams.PlayerID;
        $scope.isLoading = true;
        $scope.hasStatData = false;
        $scope.hasNews = false;
        $scope.hasChartData = false;
        $scope.hasUpcomingGames = false;
        $scope.setPerMode = setPerMode;
        $scope.maxBarHeight = 160;
        $scope.getChartHeight = getChartHeight;
        $scope.scrollToMoreNews = scrollToMoreNews;
        $scope.params = {
            MeasureType: "Base",
            LeagueID: "00",
            PlayerID: $scope.PlayerID,
            Season: SEASONS.playerFantasy.Season,
            SeasonType: SEASONS.playerFantasy.SeasonType,
            PerMode: $location.search().PerMode || "PerGame",
            PlusMinus: "N",
            PaceAdjust: "N",
            Rank: "N",
            Outcome: "",
            Location: "",
            Month: 0,
            SeasonSegment: "",
            OpponentTeamID: 0,
            VsConference: "",
            VsDivision: "",
            GameSegment: "",
            Period: 0,
            LastNGames: 0,
            DateFrom: "",
            DateTo: "",
            PORound: 0,
            ShotClockRange: ""
        };

        function getPlayerNews() {
            $scope.isLoading = true;
            $scope.hasNews = true;
            PlayerNewsService.get($scope.PlayerID).then(function(data) {
                $scope.isLoading = false;
                if (!data) {
                    $scope.hasNews = false;
                    return
                }
                $scope.news = data;
                $scope.topNews = $scope.news.slice(0, 3);
                $scope.bottomNews = $scope.news.slice(3, 9)
            })
        }

        function getStats() {
            $scope.isLoading = true;
            $scope.hasStatData = true;
            PlayerFantasySplitsService.get($scope.params).then(function(datasets) {
                $scope.isLoading = false;
                if (!datasets || !datasets[0] || !datasets[0].datatable.length) {
                    $scope.hasStatData = false
                }
                $scope.datasets = datasets
            })
        }

        function getBarGraphStats() {
            $scope.hasChartData = true;
            PlayerFantasyBarGraphService.get($scope.params).then(function(data) {
                if (!data || !data.SeasonAvg.datatable.length) {
                    $scope.hasChartData = false;
                    return
                }
                $scope.charts = parseChartData(data);
                $scope.inViewportOptions = {
                    delay: 500,
                    callback: function($elm) {
                        var $season = $elm.find(".player-charts__category__bar--season");
                        var $lastfive = $elm.find(".player-charts__category__bar--last-five");
                        $season.css("height", $season.data("bar-height"));
                        $lastfive.css("height", $lastfive.data("bar-height"))
                    }
                }
            })
        }

        function getUpcomingGames() {
            var params = {
                LeagueID: "00",
                PlayerID: $scope.PlayerID,
                Season: SEASONS.playerUpcomingGames.Season,
                SeasonType: SEASONS.playerUpcomingGames.SeasonType,
                NumberOfGames: 4
            };
            $scope.hasUpcomingGames = true;
            PlayerUpcomingGamesService.get(params).then(function(data) {
                $scope.upcomingGames = data.NextNGames.datatable.map(parseUpcomingGameData)
            })
        }

        function setPerMode(mode) {
            $scope.params.PerMode = mode;
            $location.search("PerMode", mode);
            getStats()
        }

        function getChartHeight(a, b) {
            return a / (a + b) * $scope.maxBarHeight + "px"
        }

        function parseUpcomingGameData(game) {
            game.isHome = game.HOME_TEAM_ID == $scope.playerInfo.TEAM_ID;
            return game
        }

        function parseChartData(results) {
            var season = results.SeasonAvg.datatable[0];
            var last5 = results.LastFiveGamesAvg.datatable[0];
            /**
             * split in to groups of columns
             * for responsive stacking
             */
            var charts = [
                [{
                    label: "fanduel",
                    val: [season.FAN_DUEL_PTS, last5.FAN_DUEL_PTS]
                }, {
                    label: "ppg",
                    val: [season.PTS, last5.PTS]
                }, {
                    label: "rpg",
                    val: [season.REB, last5.REB]
                }, {
                    label: "apg",
                    val: [season.AST, last5.AST]
                }, {
                    label: "3pm",
                    val: [season.FG3M, last5.FG3M]
                }],
                [{
                    label: "ft%",
                    val: [season.FT_PCT * 100, last5.FT_PCT * 100]
                }, {
                    label: "stl",
                    val: [season.STL, last5.STL]
                }, {
                    label: "blk",
                    val: [season.BLK, last5.BLK]
                }, {
                    label: "tov",
                    val: [season.TOV, last5.TOV]
                }, {
                    label: "fg%",
                    val: [season.FG_PCT * 100, last5.FG_PCT * 100]
                }]
            ];
            return charts
        }

        function scrollToMoreNews() {
            $location.hash("more-news");
            $anchorScroll()
        }
        $scope.$watch("playerInfo", function(playerInfo) {
            if (!playerInfo) {
                return
            }
            $scope.playerInfo = playerInfo;
            getPlayerNews();
            getStats();
            getBarGraphStats();
            getUpcomingGames()
        })
    }
})();
(function() {
    stats.controller("PlayerProfileCtrl", PlayerProfileCtrl);
    PlayerProfileCtrl.$inject = ["$scope", "$http", "$location", "$routeParams", "$sce", "Splits", "StatsRequest", "FEEDS_CONFIG"];

    function PlayerProfileCtrl($scope, $http, $location, $routeParams, $sce, Splits, StatsRequest, FEEDS_CONFIG) {
        $scope.showMoreStats = function(array) {
            array.limit = 1
        };
        $scope.rankingLimit = 1;
        $scope.params = {
            MeasureType: "Base",
            LeagueID: "00",
            PlayerID: $routeParams.PlayerID,
            SeasonType: ["Regular Season", "Playoffs"],
            GraphStartSeason: "2013-14",
            GraphEndSeason: "2013-14",
            GraphStat: "PTS",
            PerMode: "PerGame"
        };

        function getSummaryInfo() {
            StatsRequest.get("playerSummary", "", $scope.params).then(function() {
                var testTwo = StatsRequest.getData();
                $scope.playerInfo = testTwo.CommonPlayerInfo.datatable[0];
                // calculate player age
                var dob = new Date($scope.playerInfo.BIRTHDATE);
                var today = new Date;
                var ageDifMs = today.getTime() - dob.getTime();
                var ageDate = new Date(ageDifMs);
                var lastbirthday = $scope.playerInfo.BIRTHDATE.replace(/^\d\d\d\d/, (new Date).getFullYear());
                var bday = new Date(lastbirthday);
                if (today < bday) {
                    bday.setFullYear((new Date).getFullYear() - 1)
                }
                var daydiff = Math.floor(Math.abs(+bday - +today) / 864e5);
                $scope.playerInfo.AGE = Math.abs(ageDate.getUTCFullYear() - 1970);
                $scope.playerInfo.AGE_DAYS = ("000" + daydiff).substr(-3)
            })
        }

        function getPlayerNews() {
            $http({
                method: "GET",
                url: "/feeds/RotoWirePlayers-583598/" + $routeParams.PlayerID + ".json"
            }).then(function(response) {
                var stories = response.data.PlayerRotowires;
                $scope.stories = stories.slice(0, 2);
                $scope.isLoading = false
            })
        }
        getSummaryInfo();
        getPlayerNews()
    }
})(); /*global $, angular, console, stats */
stats.controller("ProfileAwardsCtrl", ["$scope", "$location", "Splits", "StatsRequest", "$routeParams", "FEEDS_CONFIG", "$http", function($scope, $location, Splits, StatsRequest, $routeParams, FEEDS_CONFIG, $http) {
    "use strict";
    var profileUrl = "/feeds/players/awards/" + $routeParams.PlayerID + "_Award.js";
    $http.get(profileUrl).then(function(resp) {
        $scope.awards = resp.data.PlayerAwards;
        $scope.totalRows = $scope.awards.length;
        $scope.rowsPerPage = 10;
        $scope.currentPage = 1;
        $scope.totalPages = Math.ceil($scope.totalRows / $scope.rowsPerPage);
        var pageChange = function(e) {
            var alpha = ($scope.currentPage - 1) * $scope.rowsPerPage;
            var omega = alpha + $scope.rowsPerPage;
            $scope.page = $scope.rows.slice(alpha, omega)
        };
        var updateDataset = function(e) {
            $scope.currentPage = 1;
            $scope.rows = $scope.awards.slice(0);
            $scope.totalRows = $scope.rows.length;
            $scope.rowsPerPage = $scope.rowsPerPage || 10;
            $scope.totalPages = Math.ceil($scope.totalRows / $scope.rowsPerPage);
            $scope.column = "";
            pageChange()
        };
        updateDataset();
        $scope.prevPage = function(e) {
            if ($scope.currentPage == 1) {
                return
            }
            $scope.currentPage -= 1
        };
        $scope.nextPage = function(e) {
            if ($scope.currentPage == $scope.totalPages) {
                return
            }
            $scope.currentPage += 1
        };
        $scope.$watch("currentPage", pageChange)
    })
}]); /*global $, angular, console, stats */
stats.controller("PlayerStatsAdvancedCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", function($scope, $location, $filter, Splits, SEASONS, StatsRequest) {
    "use strict";
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;
    $scope.feeds = [{
        name: "General Splits",
        val: "general",
        url: "playerGeneralSplits"
    }, {
        name: "Opponent Splits",
        val: "opp",
        url: "playerOpponentSplits"
    }, {
        name: "LastNGames Splits",
        val: "lastn",
        url: "playerLastNGamesSplits"
    }, {
        name: "In Game Splits",
        val: "ingame",
        url: "playerInGameSplits"
    }, {
        name: "Clutch Splits",
        val: "clutch",
        url: "playerClutchSplits"
    }, {
        name: "Team Performance Splits",
        val: "teamperf",
        url: "playerTeamPerformance"
    }, {
        name: "Year Over Year Splits",
        val: "yoy",
        url: "playerYearOverYear"
    }];
    if ($location.search().Split) {
        var split = $filter("filter")($scope.feeds, {
            val: $location.search().Split
        })
    }
    $scope.feed = split ? split[0] : $scope.feeds[0];
    /*
     *
     *
     *
     *
     */
    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get($scope.feed.url, "", $scope.params).then(function() {
            $scope.datasets = StatsRequest.getResults();
            $scope.noData = $scope.datasets[0].rowSet.length === 0 && $scope.splits.SeasonType.selected.val == "Playoffs";
            $scope.noData = $scope.datasets[0].datatable.length ? false : true;
            $scope.isLoading = false
        })
    }
    $scope.$on("runit", function(event) {
        // deep link split feed
        if ($scope.feed == $scope.feeds[0]) {
            $location.search("Split", null)
        } else {
            $location.search("Split", $scope.feed.val)
        }
        getStats()
    });
    $scope.$watch("playerInfo", function(playerInfo) {
        if (!playerInfo) {
            return
        }
        var initial = $filter("seasonyear")(Math.min(playerInfo.TO_YEAR, SEASONS.playerStats.SeasonYear));
        var range = [Math.max(playerInfo.FROM_YEAR, SEASONS.playerStats.SeasonYearFrom), playerInfo.TO_YEAR];
        if (range[0] > range[1]) {
            $scope.noData = true;
            $scope.isLoading = false;
            return
        }
        $scope.splits = Splits.get([{
            name: "Season",
            initial: initial,
            seasonRange: range
        }, {
            name: "SeasonType",
            initial: SEASONS.playerStats.SeasonType
        }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo", "PORound", "ShotClockRange"]);
        $scope.params = {
            MeasureType: "Advanced",
            LeagueID: "00",
            PlayerID: playerInfo.PERSON_ID,
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val,
            PerMode: "PerGame",
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val,
            PORound: $scope.splits.PORound.selected.val,
            ShotClockRange: $scope.splits.ShotClockRange.selected.val
        };
        getStats()
    })
}]); /*global $, angular, console, stats */
stats.controller("PlayerStatsBaseCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", function($scope, $location, $filter, Splits, SEASONS, StatsRequest) {
    "use strict";
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;
    $scope.feeds = [{
        name: "General Splits",
        val: "general",
        url: "playerGeneralSplits"
    }, {
        name: "Opponent Splits",
        val: "opp",
        url: "playerOpponentSplits"
    }, {
        name: "LastNGames Splits",
        val: "lastn",
        url: "playerLastNGamesSplits"
    }, {
        name: "In Game Splits",
        val: "ingame",
        url: "playerInGameSplits"
    }, {
        name: "Clutch Splits",
        val: "clutch",
        url: "playerClutchSplits"
    }, {
        name: "Team Performance Splits",
        val: "teamperf",
        url: "playerTeamPerformance"
    }, {
        name: "Year Over Year Splits",
        val: "yoy",
        url: "playerYearOverYear"
    }];
    if ($location.search().Split) {
        var split = $filter("filter")($scope.feeds, {
            val: $location.search().Split
        })
    }
    $scope.feed = split ? split[0] : $scope.feeds[0];
    /*
     *
     *
     *
     *
     */
    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get($scope.feed.url, "", $scope.params).then(function() {
            $scope.datasets = StatsRequest.getResults();
            $scope.noData = $scope.datasets[0].rowSet.length === 0 && $scope.splits.SeasonType.selected.val == "Playoffs";
            $scope.noData = $scope.datasets[0].datatable.length ? false : true;
            $scope.isLoading = false
        })
    }
    $scope.$on("runit", function(event) {
        // deep link split feed
        if ($scope.feed == $scope.feeds[0]) {
            $location.search("Split", null)
        } else {
            $location.search("Split", $scope.feed.val)
        }
        getStats()
    });
    $scope.$watch("playerInfo", function(playerInfo) {
        if (!playerInfo) {
            return
        }
        if (!$scope.availableStats.stats) {
            $location.path($scope.PlayerID + "/career/")
        }
        var initial = $filter("seasonyear")(Math.min(playerInfo.TO_YEAR, SEASONS.playerStats.SeasonYear));
        var range = [Math.max(playerInfo.FROM_YEAR, SEASONS.playerStats.SeasonYearFrom), playerInfo.TO_YEAR];
        if (range[0] > range[1]) {
            $scope.noData = true;
            $scope.isLoading = false;
            return
        }
        $scope.splits = Splits.get([{
            name: "Season",
            initial: initial,
            seasonRange: range
        }, {
            name: "SeasonType",
            initial: SEASONS.playerStats.SeasonType
        }, {
            name: "PerMode",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo", "PORound", "ShotClockRange"]);
        $scope.params = {
            MeasureType: "Base",
            LeagueID: "00",
            PlayerID: playerInfo.PERSON_ID,
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val,
            PerMode: $scope.splits.PerMode.selected.val,
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val,
            PORound: $scope.splits.PORound.selected.val,
            ShotClockRange: $scope.splits.ShotClockRange.selected.val
        };
        getStats()
    })
}]); /*global $, angular, console, stats */
stats.controller("PlayerStatsMiscCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", function($scope, $location, $filter, Splits, SEASONS, StatsRequest) {
    "use strict";
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;
    $scope.feeds = [{
        name: "General Splits",
        val: "general",
        url: "playerGeneralSplits"
    }, {
        name: "Opponent Splits",
        val: "opp",
        url: "playerOpponentSplits"
    }, {
        name: "LastNGames Splits",
        val: "lastn",
        url: "playerLastNGamesSplits"
    }, {
        name: "In Game Splits",
        val: "ingame",
        url: "playerInGameSplits"
    }, {
        name: "Clutch Splits",
        val: "clutch",
        url: "playerClutchSplits"
    }, {
        name: "Team Performance Splits",
        val: "teamperf",
        url: "playerTeamPerformance"
    }, {
        name: "Year Over Year Splits",
        val: "yoy",
        url: "playerYearOverYear"
    }];
    if ($location.search().Split) {
        var split = $filter("filter")($scope.feeds, {
            val: $location.search().Split
        })
    }
    $scope.feed = split ? split[0] : $scope.feeds[0];
    /*
     *
     *
     *
     *
     */
    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get($scope.feed.url, "", $scope.params).then(function() {
            $scope.datasets = StatsRequest.getResults();
            $scope.noData = $scope.datasets[0].rowSet.length === 0 && $scope.splits.SeasonType.selected.val == "Playoffs";
            $scope.noData = $scope.datasets[0].datatable.length ? false : true;
            $scope.isLoading = false
        })
    }
    $scope.$on("runit", function(event) {
        // deep link split feed
        if ($scope.feed == $scope.feeds[0]) {
            $location.search("Split", null)
        } else {
            $location.search("Split", $scope.feed.val)
        }
        getStats()
    });
    $scope.$watch("playerInfo", function(playerInfo) {
        if (!playerInfo) {
            return
        }
        var initial = $filter("seasonyear")(Math.min(playerInfo.TO_YEAR, SEASONS.playerStats.SeasonYear));
        var range = [Math.max(playerInfo.FROM_YEAR, SEASONS.playerStats.SeasonYearFrom), playerInfo.TO_YEAR];
        if (range[0] > range[1]) {
            $scope.noData = true;
            $scope.isLoading = false;
            return
        }
        $scope.splits = Splits.get([{
            name: "Season",
            initial: initial,
            seasonRange: range
        }, {
            name: "SeasonType",
            initial: SEASONS.playerStats.SeasonType
        }, {
            name: "PerMode",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo", "PORound", "ShotClockRange"]);
        $scope.params = {
            MeasureType: "Misc",
            LeagueID: "00",
            PlayerID: playerInfo.PERSON_ID,
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val,
            PerMode: $scope.splits.PerMode.selected.val,
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val,
            PORound: $scope.splits.PORound.selected.val,
            ShotClockRange: $scope.splits.ShotClockRange.selected.val
        };
        getStats()
    })
}]); /*global $, angular, console, stats */
stats.controller("PlayerStatsScoringCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", function($scope, $location, $filter, Splits, SEASONS, StatsRequest) {
    "use strict";
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.hasData = false;
    $scope.noData = false;
    $scope.feeds = [{
        name: "General Splits",
        val: "general",
        url: "playerGeneralSplits"
    }, {
        name: "Opponent Splits",
        val: "opp",
        url: "playerOpponentSplits"
    }, {
        name: "LastNGames Splits",
        val: "lastn",
        url: "playerLastNGamesSplits"
    }, {
        name: "In Game Splits",
        val: "ingame",
        url: "playerInGameSplits"
    }, {
        name: "Clutch Splits",
        val: "clutch",
        url: "playerClutchSplits"
    }, {
        name: "Team Performance Splits",
        val: "teamperf",
        url: "playerTeamPerformance"
    }, {
        name: "Year Over Year Splits",
        val: "yoy",
        url: "playerYearOverYear"
    }];
    if ($location.search().Split) {
        var split = $filter("filter")($scope.feeds, {
            val: $location.search().Split
        })
    }
    $scope.feed = split ? split[0] : $scope.feeds[0];
    /*
     *
     *
     *
     *
     */
    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get($scope.feed.url, "", $scope.params).then(function() {
            $scope.datasets = StatsRequest.getResults();
            $scope.noData = $scope.datasets[0].rowSet.length === 0 && $scope.splits.SeasonType.selected.val == "Playoffs";
            $scope.noData = $scope.datasets[0].datatable.length ? false : true;
            $scope.isLoading = false
        })
    }
    $scope.$on("runit", function(event) {
        // deep link split feed
        if ($scope.feed == $scope.feeds[0]) {
            $location.search("Split", null)
        } else {
            $location.search("Split", $scope.feed.val)
        }
        getStats()
    });
    $scope.$watch("playerInfo", function(playerInfo) {
        if (!playerInfo) {
            return
        }
        var initial = $filter("seasonyear")(Math.min(playerInfo.TO_YEAR, SEASONS.playerStats.SeasonYear));
        var range = [Math.max(playerInfo.FROM_YEAR, SEASONS.playerStats.SeasonYearFrom), playerInfo.TO_YEAR];
        if (range[0] > range[1]) {
            $scope.noData = true;
            $scope.isLoading = false;
            return
        }
        $scope.splits = Splits.get([{
            name: "Season",
            initial: initial,
            seasonRange: range
        }, {
            name: "SeasonType",
            initial: SEASONS.playerStats.SeasonType
        }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo", "PORound", "ShotClockRange"]);
        $scope.params = {
            MeasureType: "Scoring",
            LeagueID: "00",
            PlayerID: playerInfo.PERSON_ID,
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val,
            PerMode: "PerGame",
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val,
            PORound: $scope.splits.PORound.selected.val,
            ShotClockRange: $scope.splits.ShotClockRange.selected.val
        };
        getStats()
    })
}]); /*global $, angular, console, stats */
stats.controller("PlayerStatsShootingCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", function($scope, $location, $filter, Splits, SEASONS, StatsRequest) {
    "use strict";
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;
    /*
     *
     *
     *
     *
     */
    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get("playerShooting", "", $scope.params).then(function() {
            var ds = StatsRequest.getResults();
            $scope.datasets = ds.slice(0, ds.length - 1);
            $scope.assists = ds.slice(-1);
            $scope.noData = $scope.datasets[0].rowSet.length === 0 && $scope.splits.SeasonType.selected.val == "Playoffs";
            $scope.noData = $scope.datasets[0].datatable.length ? false : true;
            $scope.isLoading = false
        })
    }
    $scope.$on("runit", function(event) {
        getStats()
    });
    $scope.$watch("playerInfo", function(playerInfo) {
        if (!playerInfo) {
            return
        }
        var initial = $filter("seasonyear")(Math.min(playerInfo.TO_YEAR, SEASONS.playerStats.SeasonYear));
        var range = [Math.max(playerInfo.FROM_YEAR, SEASONS.playerStats.SeasonYearFrom), playerInfo.TO_YEAR];
        if (range[0] > range[1]) {
            $scope.noData = true;
            $scope.isLoading = false;
            return
        }
        $scope.splits = Splits.get([{
            name: "Season",
            initial: initial,
            seasonRange: range
        }, {
            name: "SeasonType",
            initial: SEASONS.playerStats.SeasonType
        }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo", "PORound", "ShotClockRange"]);
        $scope.params = {
            MeasureType: "Base",
            LeagueID: "00",
            PlayerID: playerInfo.PERSON_ID,
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val,
            PerMode: "Totals",
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val,
            PORound: $scope.splits.PORound.selected.val,
            ShotClockRange: $scope.splits.ShotClockRange.selected.val
        };
        getStats()
    })
}]); /*global $, angular, console, stats */
stats.controller("PlayerStatsUsageCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", function($scope, $location, $filter, Splits, SEASONS, StatsRequest) {
    "use strict";
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;
    $scope.feeds = [{
        name: "General Splits",
        val: "general",
        url: "playerGeneralSplits"
    }, {
        name: "Opponent Splits",
        val: "opp",
        url: "playerOpponentSplits"
    }, {
        name: "LastNGames Splits",
        val: "lastn",
        url: "playerLastNGamesSplits"
    }, {
        name: "In Game Splits",
        val: "ingame",
        url: "playerInGameSplits"
    }, {
        name: "Clutch Splits",
        val: "clutch",
        url: "playerClutchSplits"
    }, {
        name: "Team Performance Splits",
        val: "teamperf",
        url: "playerTeamPerformance"
    }, {
        name: "Year Over Year Splits",
        val: "yoy",
        url: "playerYearOverYear"
    }];
    if ($location.search().Split) {
        var split = $filter("filter")($scope.feeds, {
            val: $location.search().Split
        })
    }
    $scope.feed = split ? split[0] : $scope.feeds[0];
    /*
     *
     *
     *
     *
     */
    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get($scope.feed.url, "", $scope.params).then(function() {
            $scope.datasets = StatsRequest.getResults();
            $scope.noData = $scope.datasets[0].rowSet.length === 0 && $scope.splits.SeasonType.selected.val == "Playoffs";
            $scope.noData = $scope.datasets[0].datatable.length ? false : true;
            $scope.isLoading = false
        })
    }
    $scope.$on("runit", function(event) {
        // deep link split feed
        if ($scope.feed == $scope.feeds[0]) {
            $location.search("Split", null)
        } else {
            $location.search("Split", $scope.feed.val)
        }
        getStats()
    });
    $scope.$watch("playerInfo", function(playerInfo) {
        if (!playerInfo) {
            return
        }
        var initial = $filter("seasonyear")(Math.min(playerInfo.TO_YEAR, SEASONS.playerStats.SeasonYear));
        var range = [Math.max(playerInfo.FROM_YEAR, SEASONS.playerStats.SeasonYearFrom), playerInfo.TO_YEAR];
        if (range[0] > range[1]) {
            $scope.noData = true;
            $scope.isLoading = false;
            return
        }
        $scope.splits = Splits.get([{
            name: "Season",
            initial: initial,
            seasonRange: range
        }, {
            name: "SeasonType",
            initial: SEASONS.playerStats.SeasonType
        }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo", "PORound", "ShotClockRange"]);
        $scope.params = {
            MeasureType: "Usage",
            LeagueID: "00",
            PlayerID: playerInfo.PERSON_ID,
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val,
            PerMode: "PerGame",
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val,
            PORound: $scope.splits.PORound.selected.val,
            ShotClockRange: $scope.splits.ShotClockRange.selected.val
        };
        getStats()
    })
}]); /*global $, angular, console, stats */
stats.controller("PlayerSummaryCtrl", ["$scope", "$routeParams", "PlayerSummaryService", "$location", function($scope, $routeParams, PlayerSummaryService, $location) {
    "use strict";
    $scope.isLoading = true;

    function getStats() {
        $scope.isLoading = true;
        PlayerSummaryService.get($scope.params).then(function(player) {
            $scope.playerInfo = player.playerInfo;
            $scope.playerHeadlineStats = player.headlineStats;
            $scope.PlayerCode = player.playerInfo.PLAYERCODE;
            $scope.availableStats = player.availableStats;
            $scope.ai = $scope.playerInfo;
            $scope.isLoading = false
        })
    }
    $scope.isVersus = $location.path().indexOf("vs") > 0 ? true : false;
    $scope.$on("$routeChangeSuccess", function(event, routeData) {
        if (!$routeParams.PlayerID || $routeParams.PlayerID == $scope.PlayerID) {
            return
        }
        $scope.PlayerID = $routeParams.PlayerID;
        $scope.params = {
            SeasonType: "Regular Season",
            LeagueID: "00",
            PlayerID: $scope.PlayerID
        };
        getStats()
    })
}]); /*global $, angular, console, stats */
stats.controller("PlayerTrackingDefenseCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", "SEOFactory", function($scope, $location, $filter, Splits, SEASONS, StatsRequest, SEOFactory) {
    "use strict";
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;
    $scope.errors = {
        emptyData: false
    };
    /*
     *
     *
     *
     *
     */
    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get("playerTrackingDefense", "", $scope.params).then(function() {
            var data = StatsRequest.getData();
            if (data.DefendingShots.datatable.length === 0) {
                $scope.noData = true;
                $scope.datasets = []
            } else {
                $scope.noData = false;
                $scope.datasets = [{
                    name: "DefendingShots",
                    datatable: data.DefendingShots.datatable
                }]
            }
            $scope.isLoading = false
        })
    }
    $scope.$on("runit", function(event) {
        getStats()
    });
    $scope.$watch("playerInfo", function(playerInfo) {
        if (!playerInfo) {
            return
        }
        /**
         * Append Player name to page title.
         *
         * @var {string} _playerName - Private variable. The current player's full name.
         * @var {string} _secton - Private variable. The current tracking section.
         * @var {string} _newPageTitle - Private variable. The new page title.
         *
         */
        var _playerName = playerInfo.DISPLAY_FIRST_LAST;
        var _section = "(Defense)";
        var _newPageTitle = ["Player Tracking for", _playerName, _section].join(" ");
        SEOFactory.appendTitle(_newPageTitle);
        var initial = $filter("seasonyear")(Math.min(playerInfo.TO_YEAR, SEASONS.playerTracking.SeasonYear));
        var range = [Math.max(playerInfo.FROM_YEAR, SEASONS.playerTracking.SeasonYearFrom), playerInfo.TO_YEAR];
        if (range[0] > range[1]) {
            $scope.noData = true;
            $scope.isLoading = false;
            return
        }
        $scope.splits = Splits.get([{
            name: "Season",
            initial: initial,
            seasonRange: range
        }, {
            name: "SeasonType",
            initial: SEASONS.playerTracking.SeasonType,
            without: ["Pre Season"]
        }, "PerMode", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateTo", "DateFrom"]);
        $scope.params = {
            LeagueID: "00",
            PlayerID: playerInfo.PERSON_ID,
            TeamID: 0,
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val,
            PerMode: $scope.splits.PerMode.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        };
        getStats()
    })
}]); /*global $, angular, console, stats */
stats.controller("PlayerTrackingLogsReboundsCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", "SEOFactory", function($scope, $location, $filter, Splits, SEASONS, StatsRequest, SEOFactory) {
    "use strict";
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;
    $scope.errors = {
        emptyData: false
    };
    /*
     *
     *
     *
     *
     */
    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get("playerTrackingLogRebounds", "", $scope.params).then(function() {
            var data = StatsRequest.getData();
            if (data.PtRebLog.datatable.length === 0) {
                $scope.noData = true;
                $scope.datasets = []
            } else {
                $scope.noData = false;
                $scope.datasets = [{
                    name: "PtRebLog",
                    datatable: data.PtRebLog.datatable
                }]
            }
            $scope.isLoading = false
        })
    }
    $scope.$on("runit", function(event) {
        getStats()
    });
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$watch("playerInfo", function(playerInfo) {
        if (!playerInfo) {
            return
        }
        /**
         * Append Player name to page title.
         *
         * @var {string} _playerName - Private variable. The current player's full name.
         * @var {string} _secton - Private variable. The current tracking section.
         * @var {string} _newPageTitle - Private variable. The new page title.
         *
         */
        var _playerName = playerInfo.DISPLAY_FIRST_LAST;
        var _section = "(Rebound Logs)";
        var _newPageTitle = ["Player Tracking for", _playerName, _section].join(" ");
        SEOFactory.appendTitle(_newPageTitle);
        var initial = $filter("seasonyear")(Math.min(playerInfo.TO_YEAR, SEASONS.playerTracking.SeasonYear));
        var range = [Math.max(playerInfo.FROM_YEAR, SEASONS.playerTracking.SeasonYearFrom), playerInfo.TO_YEAR];
        if (range[0] > range[1]) {
            $scope.noData = true;
            $scope.isLoading = false;
            return
        }
        $scope.splits = Splits.get([{
            name: "Season",
            initial: initial,
            seasonRange: range
        }, {
            name: "SeasonType",
            initial: SEASONS.playerTracking.SeasonType,
            without: ["Pre Season"]
        }, "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateTo", "DateFrom"]);
        $scope.params = {
            LeagueID: "00",
            PlayerID: playerInfo.PERSON_ID,
            TeamID: 0,
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        };
        getStats()
    })
}]); /*global $, angular, console, stats */
stats.controller("PlayerTrackingLogsShotsCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", "SEOFactory", function($scope, $location, $filter, Splits, SEASONS, StatsRequest, SEOFactory) {
    "use strict";
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;
    $scope.errors = {
        emptyData: false
    };
    /*
     *
     *
     *
     *
     */
    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get("playerTrackingLogShots", "", $scope.params).then(function() {
            var data = StatsRequest.getData();
            if (data.PtShotLog.datatable.length === 0) {
                $scope.noData = true;
                $scope.datasets = []
            } else {
                $scope.noData = false;
                $scope.datasets = [{
                    name: "PtShotLog",
                    datatable: data.PtShotLog.datatable
                }]
            }
            $scope.isLoading = false
        })
    }
    $scope.$on("runit", function(event) {
        getStats()
    });
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$watch("playerInfo", function(playerInfo) {
        if (!playerInfo) {
            return
        }
        /**
         * Append Player name to page title.
         *
         * @var {string} _playerName - Private variable. The current player's full name.
         * @var {string} _secton - Private variable. The current tracking section.
         * @var {string} _newPageTitle - Private variable. The new page title.
         *
         */
        var _playerName = playerInfo.DISPLAY_FIRST_LAST;
        var _section = "(Shot Logs)";
        var _newPageTitle = ["Player Tracking for", _playerName, _section].join(" ");
        SEOFactory.appendTitle(_newPageTitle);
        var initial = $filter("seasonyear")(Math.min(playerInfo.TO_YEAR, SEASONS.playerTracking.SeasonYear));
        var range = [Math.max(playerInfo.FROM_YEAR, SEASONS.playerTracking.SeasonYearFrom), playerInfo.TO_YEAR];
        if (range[0] > range[1]) {
            $scope.noData = true;
            $scope.isLoading = false;
            return
        }
        $scope.splits = Splits.get([{
            name: "Season",
            initial: initial,
            seasonRange: range
        }, {
            name: "SeasonType",
            initial: SEASONS.playerTracking.SeasonType,
            without: ["Pre Season"]
        }, "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateTo", "DateFrom"]);
        $scope.params = {
            LeagueID: "00",
            PlayerID: playerInfo.PERSON_ID,
            TeamID: 0,
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        };
        getStats()
    })
}]); /*global $, angular, console, stats */
stats.controller("PlayerTrackingPassesCtrl", ["$scope", "$filter", "Splits", "SEASONS", "PlayerTrackingDashPassesService", "SEOFactory", function($scope, $filter, Splits, SEASONS, PlayerTrackingDashPassesService, SEOFactory) {
    "use strict";
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;
    $scope.errors = {
        emptyData: false
    };
    /*
     *
     *
     *
     *
     */
    function getStats() {
        $scope.isLoading = true;
        PlayerTrackingDashPassesService.get($scope.params).then(function(datasets) {
            $scope.noData = false;
            $scope.datasets = datasets;
            if (datasets[0].datatable.length === 0 || datasets[0].datatable.length === 0) {
                $scope.noData = true;
                $scope.datasets = []
            }
            $scope.isLoading = false
        })
    }
    $scope.$on("runit", function(event) {
        getStats()
    });
    $scope.$watch("playerInfo", function(playerInfo) {
        if (!playerInfo) {
            return
        }
        /**
         * Append Player name to page title.
         *
         * @var {string} _playerName - Private variable. The current player's full name.
         * @var {string} _secton - Private variable. The current tracking section.
         * @var {string} _newPageTitle - Private variable. The new page title.
         *
         */
        var _playerName = playerInfo.DISPLAY_FIRST_LAST;
        var _section = "(Passes)";
        var _newPageTitle = ["Player Tracking for", _playerName, _section].join(" ");
        SEOFactory.appendTitle(_newPageTitle);
        var initial = $filter("seasonyear")(Math.min(playerInfo.TO_YEAR, SEASONS.playerTracking.SeasonYear));
        var range = [Math.max(playerInfo.FROM_YEAR, SEASONS.playerTracking.SeasonYearFrom), playerInfo.TO_YEAR];
        if (range[0] > range[1]) {
            $scope.noData = true;
            $scope.isLoading = false;
            return
        }
        $scope.splits = Splits.get([{
            name: "Season",
            initial: initial,
            seasonRange: range
        }, {
            name: "SeasonType",
            initial: SEASONS.playerTracking.SeasonType,
            without: ["Pre Season"]
        }, "PerMode", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "LastNGames", "GameSegment", "Period", "DateFrom", "DateTo"]);
        $scope.params = {
            LeagueID: "00",
            PlayerID: playerInfo.PERSON_ID,
            TeamID: 0,
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val,
            PerMode: $scope.splits.PerMode.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        };
        getStats()
    })
}]); /*global $, angular, console, stats */
stats.controller("PlayerTrackingReboundsCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", "SEOFactory", function($scope, $location, $filter, Splits, SEASONS, StatsRequest, SEOFactory) {
    "use strict";
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;
    $scope.errors = {
        emptyData: false
    };
    /*
     *
     *
     *
     *
     */
    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get("playerTrackingRebounds", "", $scope.params).then(function() {
            var data = StatsRequest.getData();
            if (data.OverallRebounding.datatable.length === 0) {
                $scope.noData = true;
                $scope.datasets = []
            } else {
                $scope.noData = false;
                $scope.datasets = [{
                    name: "OverallRebounding",
                    datatable: data.OverallRebounding.datatable
                }, {
                    name: "NumContestedRebounding",
                    datatable: data.NumContestedRebounding.datatable
                }, {
                    name: "RebDistanceRebounding",
                    datatable: data.RebDistanceRebounding.datatable
                }, {
                    name: "ShotDistanceRebounding",
                    datatable: data.ShotDistanceRebounding.datatable
                }, {
                    name: "ShotTypeRebounding",
                    datatable: data.ShotTypeRebounding.datatable
                }]
            }
            $scope.isLoading = false
        })
    }
    $scope.$on("runit", function(event) {
        getStats()
    });
    $scope.$watch("playerInfo", function(playerInfo) {
        if (!playerInfo) {
            return
        }
        /**
         * Append Player name to page title.
         *
         * @var {string} _playerName - Private variable. The current player's full name.
         * @var {string} _secton - Private variable. The current tracking section.
         * @var {string} _newPageTitle - Private variable. The new page title.
         *
         */
        var _playerName = playerInfo.DISPLAY_FIRST_LAST;
        var _section = "(Rebounds)";
        var _newPageTitle = ["Player Tracking for", _playerName, _section].join(" ");
        SEOFactory.appendTitle(_newPageTitle);
        var initial = $filter("seasonyear")(Math.min(playerInfo.TO_YEAR, SEASONS.playerTracking.SeasonYear));
        var range = [Math.max(playerInfo.FROM_YEAR, SEASONS.playerTracking.SeasonYearFrom), playerInfo.TO_YEAR];
        if (range[0] > range[1]) {
            $scope.noData = true;
            $scope.isLoading = false;
            return
        }
        $scope.splits = Splits.get([{
            name: "Season",
            initial: initial,
            seasonRange: range
        }, {
            name: "SeasonType",
            initial: SEASONS.playerTracking.SeasonType,
            without: ["Pre Season"]
        }, "PerMode", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateTo", "DateFrom"]);
        $scope.params = {
            LeagueID: "00",
            PlayerID: playerInfo.PERSON_ID,
            TeamID: 0,
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val,
            PerMode: $scope.splits.PerMode.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        };
        getStats()
    })
}]); /*global $, angular, console, stats */
stats.controller("PlayerTrackingShotsCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", "SEOFactory", function($scope, $location, $filter, Splits, SEASONS, StatsRequest, SEOFactory) {
    "use strict";
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;
    $scope.errors = {
        emptyData: false
    };
    /*
     *
     *
     *
     *
     */
    function getStats() {
        $scope.isLoading = true;
        $scope.noData = false;
        StatsRequest.get("playerTrackingShots", "", $scope.params).then(function() {
            var data = StatsRequest.getData();
            if (data.Overall.datatable.length === 0) {
                $scope.noData = true;
                $scope.datasets = [];
                return
            }
            $scope.datasets = [{
                name: "Overall",
                datatable: data.Overall.datatable
            }, {
                name: "GeneralShooting",
                datatable: data.GeneralShooting.datatable
            }, {
                name: "ShotClockShooting",
                datatable: data.ShotClockShooting.datatable
            }, {
                name: "DribbleShooting",
                datatable: data.DribbleShooting.datatable
            }, {
                name: "ClosestDefenderShooting",
                datatable: data.ClosestDefenderShooting.datatable
            }, {
                name: "ClosestDefender10ftPlusShooting",
                datatable: data.ClosestDefender10ftPlusShooting.datatable
            }, {
                name: "TouchTimeShooting",
                datatable: data.TouchTimeShooting.datatable
            }];
            $scope.isLoading = false
        })
    }
    $scope.$on("runit", function(event) {
        getStats()
    });
    $scope.$watch("playerInfo", function(playerInfo) {
        if (!playerInfo) {
            return
        }
        /**
         * Append Player name to page title.
         *
         * @var {string} _playerName - Private variable. The current player's full name.
         * @var {string} _secton - Private variable. The current tracking section.
         * @var {string} _newPageTitle - Private variable. The new page title.
         *
         */
        var _playerName = playerInfo.DISPLAY_FIRST_LAST;
        var _section = "(Shots)";
        var _newPageTitle = ["Player Tracking for", _playerName, _section].join(" ");
        SEOFactory.appendTitle(_newPageTitle);
        var initial = $filter("seasonyear")(Math.min(playerInfo.TO_YEAR, SEASONS.playerTracking.SeasonYear));
        var range = [Math.max(playerInfo.FROM_YEAR, SEASONS.playerTracking.SeasonYearFrom), playerInfo.TO_YEAR];
        if (range[0] > range[1]) {
            $scope.noData = true;
            $scope.isLoading = false;
            return
        }
        $scope.splits = Splits.get([{
            name: "Season",
            initial: initial,
            seasonRange: range
        }, {
            name: "SeasonType",
            initial: SEASONS.playerTracking.SeasonType,
            without: ["Pre Season"]
        }, "PerMode", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateTo", "DateFrom"]);
        $scope.params = {
            LeagueID: "00",
            PlayerID: playerInfo.PERSON_ID,
            TeamID: 0,
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val,
            PerMode: $scope.splits.PerMode.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        };
        getStats()
    })
}]);
(function() {
    stats.controller("PlayerNewsCtrl", PlayerNewsCtrl);
    PlayerNewsCtrl.$inject = ["$scope", "$http", "$location"];

    function PlayerNewsCtrl($scope, $http, $location) {
        $scope.isLoading = true;
        $scope.params = {
            FirstName: "",
            LastName: ""
        };

        function getPlayerNews() {
            $http({
                method: "GET",
                url: "/feeds/RotoWirePlayers-583598/" + $location.search().PlayerID + ".json"
            }).then(function(response) {
                $scope.isLoading = false;
                var stories = response.data.PlayerRotowires;
                $scope.params.FirstName = stories[0].FirstName;
                $scope.params.LastName = stories[0].LastName;
                $scope.stories = stories
            })
        }
        getPlayerNews()
    }
})();
/*
 * NO 11/5 - DP special... make this not suck
 */
(function() {
    stats.controller("PlayerListCtrl", PlayerListCtrl);
    PlayerListCtrl.$inject = ["$scope", "$filter", "$location", "$timeout", "SEASONS", "PlayerListService"];

    function PlayerListCtrl($scope, $filter, $location, $timeout, SEASONS, PlayerListService) {
        // private variables
        var playersActive;
        var playersActiveGrouped;
        var playersAll;
        var playersAllGrouped;
        // scope properties
        $scope.alphabet = "A B C D E F G H I J K L M N O P Q R S T U V W X Y Z".split(" ");
        $scope.isLoading = true;
        $scope.onlyActive = !$location.search().historic;
        $scope.selectedLetter = "";
        // for player index on homepage
        $scope.listShown = false;
        // scope functions
        $scope.onlyInitial = onlyInitialFn;
        $scope.shouldHideLetter = shouldHideLetterFn;
        // for player index on homepage
        $scope.closeList = closeListFn;
        $scope.search = {
            player: "",
            team: ""
        };
        // scope watchers
        $scope.$watch("onlyActive", onlyActiveFn);
        $scope.$watch("search.team", searchTeamFn);
        $scope.$watch("search.player", searchPlayerFn);
        /**
         * onlyInitialFn()
         *
         *
         *
         */
        function onlyInitialFn(letter) {
            // if $scope.search has zero length...
            if ($scope.search.player.length === 0 && $scope.search.team.length === 0) {
                // set the selected letter...
                $scope.selectedLetter = $scope.selectedLetter == letter ? "" : letter
            }
            // otherwise just reset filters
            $scope.letters = $scope.onlyActive ? playersActiveGrouped.slice(0) : playersAllGrouped.slice(0);
            $scope.search.player = "";
            $scope.search.team = "";
            // for player index on homepage
            $scope.listShown = $scope.selectedLetter === "" ? false : true
        }
        /**
         * shouldHideLetterFn()
         *
         *
         *
         */
        function shouldHideLetterFn(letter) {
            return letter.items.length === 0 || $scope.selectedLetter !== "" && $scope.selectedLetter != letter.initial
        }
        /**
         * closeListFn()
         * for player index on homepage
         *
         *
         */
        function closeListFn() {
            // reset filters
            $scope.letters = $scope.onlyActive ? playersActiveGrouped.slice(0) : playersAllGrouped.slice(0);
            $scope.search.player = "";
            $scope.search.team = "";
            $scope.selectedLetter = "";
            // hide list
            $scope.listShown = false
        }
        /**
         * onlyActiveFn()
         *
         *
         *
         */
        function onlyActiveFn(onlyActive) {
            // if $scope.search exists...
            if ($scope.search.player.length === 0 && $scope.search.team.length === 0) {
                // and the search field has zero length, show the plaery list. Otherwise, hide the list.
                $scope.listShown = $scope.search.length === 0 ? true : false
            }
            // reset filters
            $scope.search.player = "";
            $scope.search.team = "";
            $scope.letters = onlyActive ? playersActiveGrouped : playersAllGrouped
        }
        /**
         * searchPlayerFn()
         * filter players based on user input
         *
         * @param {string} search - the current value of the user input
         * @param {string} prevSearch - the previous value of the user input
         * @param {Object} scope  - the angular scope object
         */
        function searchPlayerFn(search, prevSearch, scope) {
            // if playersAllGrouped or search don't exist...
            if (!playersAllGrouped || search === undefined) {
                // exit gracefully
                return
            }
            // reset filters
            $scope.letters = $scope.onlyActive ? playersActiveGrouped.slice(0) : playersAllGrouped.slice(0);
            $scope.search.team = "";
            $scope.selectedLetter = "";
            // if search is 3 characters long...
            if (search.length >= 3) {
                // iterate over each letter in the alphabet...
                for (var i in $scope.letters) {
                    // create empty array for later use...
                    var items = [];
                    // filter players by name (case-insensitive)...
                    items = $filter("filter")($scope.letters[i].items, {
                        DISPLAY_LAST_COMMA_FIRST: search
                    }, false);
                    // and attach the filtered list to the scope
                    $scope.letters[i] = {
                        initial: $scope.letters[i].initial,
                        items: items
                    }
                }
                // for player index on homepage
                $scope.listShown = true
            }
            // if search is less than 3 characters...
            if (search.length < 3) {
                // hide the player list
                $scope.listShown = false
            }
        }
        /**
         * searchTeamFn()
         * filter teams based on user input
         *
         * @param {string} search - the current value of the user input
         * @param {string} prevSearch - the previous value of the user input
         * @param {Object} scope  - the angular scope object
         */
        function searchTeamFn(search, prevSearch, scope) {
            // if playersAllGrouped or search don't exist...
            if (!playersAllGrouped || search === undefined) {
                // exit gracefully
                return
            }
            // reset filters
            $scope.letters = $scope.onlyActive ? playersActiveGrouped.slice(0) : playersAllGrouped.slice(0);
            $scope.search.player = "";
            $scope.selectedLetter = "";
            // if search is 3 characters long...
            if (search.length >= 3) {
                // iterate over each letter in the alphabet...
                for (var i in $scope.letters) {
                    for (var i in $scope.letters) {
                        // create empty array for later use
                        var items = [];
                        // filter items by team properties...
                        var _teamAbbr = $filter("filter")($scope.letters[i].items, {
                            TEAM_ABBREVIATION: search
                        }, false);
                        var _teamName = $filter("filter")($scope.letters[i].items, {
                            TEAM_NAME: search
                        }, false);
                        var _teamCity = $filter("filter")($scope.letters[i].items, {
                            TEAM_CITY: search
                        }, false);
                        // and attach to the items array
                        if (_teamAbbr.length) {
                            items = _teamAbbr
                        }
                        if (_teamName.length) {
                            items = _teamName
                        }
                        if (_teamCity.length) {
                            items = _teamCity
                        }
                        $scope.letters[i] = {
                            initial: $scope.letters[i].initial,
                            items: items
                        }
                    }
                }
                // for player index on homepage
                $scope.listShown = true
            }
            // if search is less than 3 characters...
            if (search.length < 3) {
                // hide the player list
                $scope.listShown = false
            }
        }
        /**
         * StatsRequest()
         *
         *
         *
         */
        var params = {
            Season: SEASONS.site.Season,
            LeagueID: "00",
            IsOnlyCurrentSeason: "0"
        };
        PlayerListService.get(params).then(function(leaguePlayers) {
            $scope.isLoading = false;
            $scope.search.player = $location.search().player || "";
            playersAll = leaguePlayers;
            playersActive = $filter("filter")(playersAll, {
                ROSTERSTATUS: 1
            });
            playersAllGrouped = $filter("byLetter")(playersAll, "DISPLAY_LAST_COMMA_FIRST").sort(SortByInitial);
            playersActiveGrouped = $filter("byLetter")(playersActive, "DISPLAY_LAST_COMMA_FIRST").sort(SortByInitial);
            $scope.letters = playersActiveGrouped
        });
        /**
         * SortByInitial()
         */
        function SortByInitial(a, b) {
            return a.initial > b.initial ? 1 : -1
        }
    }
})();
stats.controller("PlaylistCtrl", ["$scope", "$element", "$http", "$location", "$filter", function($scope, $element, $http, $location, $filter) {
    "use strict";
    $scope.isLoading = true;
    $scope.playAll = true;
    $scope.currentIndex = 0;
    $scope.selectedItem = {};
    var params = {
        LeagueID: "00",
        Season: "2013-14",
        SeasonType: "Regular Season",
        TeamID: "0",
        PlayerID: "0",
        GameID: "",
        Outcome: "",
        Location: "",
        Month: "0",
        SeasonSegment: "",
        DateFrom: "",
        DateTo: "",
        OpponentTeamID: "0",
        VsConference: "",
        VsDivision: "",
        Position: "",
        RookieYear: "",
        GameSegment: "",
        Period: "0",
        LastNGames: "0",
        ClutchTime: "",
        AheadBehind: "",
        PointDiff: "",
        RangeType: "1",
        StartPeriod: 1,
        EndPeriod: 10,
        StartRange: 0,
        EndRange: 0,
        ContextFilter: "",
        ContextMeasure: "FG_PCT"
    };
    var feeds = {
        details: "/stats/videodetails",
        events: "/stats/videoevents",
        shotzone: "/stats/videoshotzone",
        shotzoneContext: "/stats/videoshotzonecontext"
    };
    var feed = "";
    // extend default params with query string values
    angular.extend(params, $location.search());
    if (params.ZoneMode) {
        feed = feeds.shotzoneContext
    } else if (params.GameEventID) {
        feed = feeds.events
    } else if (params.EventList) {
        feed = feeds.shotzone
    } else {
        feed = feeds.details
    }
    $http({
        method: "GET",
        url: feed,
        params: params
    }).success(function(data) {
        var items = data.resultSets.playlist;
        items.forEach(parseItem);
        $scope.items = $filter("filter")(items, {
            pta: "1"
        });
        $scope.isLoading = false;
        // play first item
        $scope.playItem(0)
    });

    function parseItem(item) {
        //      item.duration = '00:12:34';
        item.teams = item.gc.split("/")[1];
        item.vtm = item.teams.substr(0, 3);
        item.htm = item.teams.substr(3, 3)
    }
    $scope.changeItem = function(dir) {
        var i = $scope.currentIndex + dir;
        if (i >= 0 && i < $scope.items.length) {
            $scope.playItem(i)
        }
    };
    $scope.playItem = function(i) {
        // broadcast details about selected playlist item to view
        $scope.currentIndex = i;
        $scope.selectedItem = $scope.items[i]
    };
    $scope.$on("finishedPlaying", function(shouldDigest) {
        $scope.changeItem(1);
        if (shouldDigest) {
            $scope.$digest()
        }
    })
}]); /*global IS_MOBILE */
(function() {
    stats.controller("PlayoffPictureCtrl", PlayoffPictureCtrl);
    PlayoffPictureCtrl.$inject = ["$scope", "SEASONS", "PlayoffPictureService"];

    function PlayoffPictureCtrl($scope, SEASONS, PlayoffPictureService) {
        $scope.isLoading = true;
        $scope.activeTab = "East";
        $scope.showRules = !IS_MOBILE;
        $scope.params = {
            LeagueID: SEASONS.site.LeagueID,
            SeasonID: "2" + SEASONS.site.SeasonYear.toString()
        };

        function getStats() {
            $scope.isLoading = true;
            PlayoffPictureService.get($scope.params).then(function(data) {
                $scope.datasets = data;
                $scope.isLoading = false
            })
        }
        getStats();
        // inject turner ad script
        var s = document.createElement("script");
        s.src = "http://i.cdn.turner.com/ads/nba/nba_standings_playoffpictures.js";
        document.body.appendChild(s)
    }
})(); /*global $, angular, console, stats */
stats.controller("PlayTypeBallHandlerCtrl", ["$scope", "$location", "Splits", "$http", "StatsRequest", "$filter", "SEASONS", "TAB_DEFINITIONS", "$sce", "DeepLinksFactory", "PlayTypeDataFactory", function($scope, $location, Splits, $http, StatsRequest, $filter, SEASONS, TAB_DEFINITIONS, $sce, DeepLinksFactory, PlayTypeDataFactory) {
    "use strict";
    /**
     * @var {Object} _locationSearchObj - Private variable. The $location query string object.
     * @var {Boolean} _hasDeepLink - Private variable. True if _locationSearchObj has 1 or more keys.
     */
    var _locationSearchObj = DeepLinksFactory.getSearchURL();
    var _hasDeepLink = Object.keys(_locationSearchObj).length;
    // Referense to `this` when using "Controler As" syntax.
    var vm = this;
    $scope.currentIndex = 0;
    $scope.currentOD = _locationSearchObj.OD || "offensive";
    $scope.currentPT = _locationSearchObj.PT || "player";
    $scope.dataArray = [];
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.tabListArray = $filter("toArray")(TAB_DEFINITIONS.playtype);
    $scope.tabListObj = TAB_DEFINITIONS.playtype;
    DeepLinksFactory.setSearchURL({
        PT: $scope.currentPT
    });
    DeepLinksFactory.setSearchURL({
        OD: $scope.currentOD
    });
    setTabNav();
    /**
     * setTabNav()
     * Set navigation tab URLs based on user input
     */
    function setTabNav() {
        var _nodeList = document.querySelectorAll(".playtype-tab-nav__link");
        var queryString = DeepLinksFactory.getFullURL().split("?")[1];
        for (var i = _nodeList.length; i--;) {
            var rootURL = _nodeList[i].getAttribute("href").split("?")[0];
            _nodeList[i].setAttribute("href", [rootURL, "?", queryString].join(""))
        }
    }
    /**
     * setCurrentOD()
     * Sets the current option and updates stats.
     * @param {string} op - The selected option.
     */
    $scope.setCurrentOD = function setCurrentOD(op) {
        $scope.currentOD = op;
        DeepLinksFactory.setSearchURL({
            OD: $scope.currentOD
        });
        setTabNav();
        getStats()
    };
    /**
     * setCurrentPT()
     * Sets the current option and updates stats.
     * @param {string} op - The selected option.
     */
    $scope.setCurrentPT = function setCurrentPT(op) {
        $scope.currentPT = op;
        DeepLinksFactory.setSearchURL({
            PT: $scope.currentPT
        });
        setTabNav();
        getStats()
    };

    function getStats() {
        $scope.isLoading = true;
        PlayTypeDataFactory.get($scope.params, "PRBallHandler", $scope.currentPT).then(function(synergyResponse) {
            buildDataArray(synergyResponse);
            $scope.isLoading = false
        })
    }
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("runit", function(event) {
        $scope.params = {
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val
        };
        $scope.currentPT = $scope.splits.PT.selected.val;
        $scope.currentOD = $scope.splits.OD.selected.val;
        $scope.perMode = $scope.splits.PerMode.selected.val;
        if ($scope.currentOD === "offensive") {
            DeepLinksFactory.setSearchURL({
                dir: 1
            })
        }
        if ($scope.currentOD === "defensive") {
            DeepLinksFactory.setSearchURL({
                dir: -1
            })
        }
        setTabNav();
        getStats()
    });
    $scope.$watch("currentPT", function(currentPT) {
        if (!currentPT) {
            return
        }
        $scope.splits = Splits.get([{
            name: "Season",
            initial: SEASONS.playtypeStats.Season,
            seasonRange: [SEASONS.playtypeStats.SeasonFrom, SEASONS.playtypeStats.Season]
        }, {
            name: "SeasonType",
            initial: SEASONS.playtypeStats.SeasonType,
            without: ["Pre Season", "All Star"]
        }, {
            name: "PerMode",
            initial: "Totals",
            "default": "Totals"
        }, {
            name: "OD",
            initial: "offensive"
        }, {
            name: "PT",
            initial: "player"
        }]);
        $scope.params = {
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val
        };
        getStats()
    });
    /**
     * buildDataArray()
     * Returns a subset of data and assigns it to $scope.dataArray.
     *
     * @param {Object} AJAXResponse - The full data set.
     *
     */
    function buildDataArray(AJAXResponse) {
        if ($scope.currentPT === "player" && $scope.currentOD === "offensive") {
            $scope.datasets = [AJAXResponse.sets.Offensive]
        }
        if ($scope.currentPT === "player" && $scope.currentOD === "defensive") {
            $scope.datasets = [AJAXResponse.sets.Deffensive]
        }
        if ($scope.currentPT === "team" && $scope.currentOD === "offensive") {
            $scope.datasets = [AJAXResponse.sets.Offensive]
        }
        if ($scope.currentPT === "team" && $scope.currentOD === "defensive") {
            $scope.datasets = [AJAXResponse.sets.Defensive]
        }
        // Add Percentile property to each entry in the dataset.
        $scope.datasets[0].datatable.forEach(function(v, i, a) {
            v.Percentile = v.WorsePPP / (v.WorsePPP + v.BetterPPP) * 100;
            v.PlayerFullName = [v.PlayerFirstName, v.PlayerLastName].join(" ")
        });
        $scope.perMode = $scope.splits.PerMode.selected.val;
        $scope.datasets.initalSortField = "Points";
        $scope.datasets.shouldReverse = true
    }
}]); /*global $, angular, console, stats */
stats.controller("PlayTypeCutCtrl", ["$scope", "$location", "Splits", "$http", "StatsRequest", "$filter", "SEASONS", "TAB_DEFINITIONS", "$sce", "DeepLinksFactory", "PlayTypeDataFactory", function($scope, $location, Splits, $http, StatsRequest, $filter, SEASONS, TAB_DEFINITIONS, $sce, DeepLinksFactory, PlayTypeDataFactory) {
    "use strict";
    /**
     * @var {Object} _locationSearchObj - Private variable. The $location query string object.
     * @var {Boolean} _hasDeepLink - Private variable. True if _locationSearchObj has 1 or more keys.
     */
    var _locationSearchObj = DeepLinksFactory.getSearchURL();
    var _hasDeepLink = Object.keys(_locationSearchObj).length;
    // Referense to `this` when using "Controler As" syntax.
    var vm = this;
    $scope.currentIndex = 0;
    $scope.currentOD = _locationSearchObj.OD || "offensive";
    $scope.currentPT = _locationSearchObj.PT || "player";
    $scope.dataArray = [];
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.tabListArray = $filter("toArray")(TAB_DEFINITIONS.playtype);
    $scope.tabListObj = TAB_DEFINITIONS.playtype;
    DeepLinksFactory.setSearchURL({
        PT: $scope.currentPT
    });
    DeepLinksFactory.setSearchURL({
        OD: $scope.currentOD
    });
    setTabNav();
    /**
     * setTabNav()
     * Set navigation tab URLs based on user input
     */
    function setTabNav() {
        var _nodeList = document.querySelectorAll(".playtype-tab-nav__link");
        var queryString = DeepLinksFactory.getFullURL().split("?")[1];
        for (var i = _nodeList.length; i--;) {
            var rootURL = _nodeList[i].getAttribute("href").split("?")[0];
            _nodeList[i].setAttribute("href", [rootURL, "?", queryString].join(""))
        }
    }
    /**
     * setCurrentOD()
     * Sets the current option and updates stats.
     * @param {string} op - The selected option.
     */
    $scope.setCurrentOD = function setCurrentOD(op) {
        $scope.currentOD = op;
        DeepLinksFactory.setSearchURL({
            OD: $scope.currentOD
        });
        setTabNav();
        getStats()
    };
    /**
     * setCurrentPT()
     * Sets the current option and updates stats.
     * @param {string} op - The selected option.
     */
    $scope.setCurrentPT = function setCurrentPT(op) {
        $scope.currentPT = op;
        DeepLinksFactory.setSearchURL({
            PT: $scope.currentPT
        });
        setTabNav();
        getStats()
    };

    function getStats() {
        $scope.isLoading = true;
        PlayTypeDataFactory.get($scope.params, "Cut", $scope.currentPT).then(function(synergyResponse) {
            buildDataArray(synergyResponse);
            $scope.isLoading = false
        })
    }
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("runit", function(event) {
        $scope.params = {
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val
        };
        $scope.currentPT = $scope.splits.PT.selected.val;
        $scope.currentOD = $scope.splits.OD.selected.val;
        $scope.perMode = $scope.splits.PerMode.selected.val;
        if ($scope.currentOD === "offensive") {
            DeepLinksFactory.setSearchURL({
                dir: 1
            })
        }
        if ($scope.currentOD === "defensive") {
            DeepLinksFactory.setSearchURL({
                dir: -1
            })
        }
        setTabNav();
        getStats()
    });
    $scope.$watch("currentPT", function(currentPT) {
        if (!currentPT) {
            return
        }
        $scope.splits = Splits.get([{
            name: "Season",
            initial: SEASONS.playtypeStats.Season,
            seasonRange: [SEASONS.playtypeStats.SeasonFrom, SEASONS.playtypeStats.Season]
        }, {
            name: "SeasonType",
            initial: SEASONS.playtypeStats.SeasonType,
            without: ["Pre Season", "All Star"]
        }, {
            name: "PerMode",
            initial: "Totals",
            "default": "Totals"
        }, {
            name: "OD",
            initial: "offensive"
        }, {
            name: "PT",
            initial: "player"
        }]);
        $scope.params = {
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val
        };
        getStats()
    });
    /**
     * buildDataArray()
     * Returns a subset of data and assigns it to $scope.dataArray.
     *
     * @param {Object} AJAXResponse - The full data set.
     *
     */
    function buildDataArray(AJAXResponse) {
        if ($scope.currentPT === "player" && $scope.currentOD === "offensive") {
            $scope.datasets = [AJAXResponse.sets.Offensive]
        }
        if ($scope.currentPT === "player" && $scope.currentOD === "defensive") {
            $scope.datasets = [AJAXResponse.sets.Deffensive]
        }
        if ($scope.currentPT === "team" && $scope.currentOD === "offensive") {
            $scope.datasets = [AJAXResponse.sets.Offensive]
        }
        if ($scope.currentPT === "team" && $scope.currentOD === "defensive") {
            $scope.datasets = [AJAXResponse.sets.Defensive]
        }
        // Add Percentile property to each entry in the dataset.
        $scope.datasets[0].datatable.forEach(function(v, i, a) {
            v.Percentile = v.WorsePPP / (v.WorsePPP + v.BetterPPP) * 100;
            v.PlayerFullName = [v.PlayerFirstName, v.PlayerLastName].join(" ")
        });
        $scope.perMode = $scope.splits.PerMode.selected.val;
        $scope.datasets.initalSortField = "Points";
        $scope.datasets.shouldReverse = true
    }
}]); /*global $, angular, console, stats */
stats.controller("PlayTypeHandOffCtrl", ["$scope", "$location", "Splits", "$http", "StatsRequest", "$filter", "SEASONS", "TAB_DEFINITIONS", "$sce", "DeepLinksFactory", "PlayTypeDataFactory", function($scope, $location, Splits, $http, StatsRequest, $filter, SEASONS, TAB_DEFINITIONS, $sce, DeepLinksFactory, PlayTypeDataFactory) {
    "use strict";
    /**
     * @var {Object} _locationSearchObj - Private variable. The $location query string object.
     * @var {Boolean} _hasDeepLink - Private variable. True if _locationSearchObj has 1 or more keys.
     */
    var _locationSearchObj = DeepLinksFactory.getSearchURL();
    var _hasDeepLink = Object.keys(_locationSearchObj).length;
    // Referense to `this` when using "Controler As" syntax.
    var vm = this;
    $scope.currentIndex = 0;
    $scope.currentOD = _locationSearchObj.OD || "offensive";
    $scope.currentPT = _locationSearchObj.PT || "player";
    $scope.dataArray = [];
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.tabListArray = $filter("toArray")(TAB_DEFINITIONS.playtype);
    $scope.tabListObj = TAB_DEFINITIONS.playtype;
    DeepLinksFactory.setSearchURL({
        PT: $scope.currentPT
    });
    DeepLinksFactory.setSearchURL({
        OD: $scope.currentOD
    });
    setTabNav();
    /**
     * setTabNav()
     * Set navigation tab URLs based on user input
     */
    function setTabNav() {
        var _nodeList = document.querySelectorAll(".playtype-tab-nav__link");
        var queryString = DeepLinksFactory.getFullURL().split("?")[1];
        for (var i = _nodeList.length; i--;) {
            var rootURL = _nodeList[i].getAttribute("href").split("?")[0];
            _nodeList[i].setAttribute("href", [rootURL, "?", queryString].join(""))
        }
    }
    /**
     * setCurrentOD()
     * Sets the current option and updates stats.
     * @param {string} op - The selected option.
     */
    $scope.setCurrentOD = function setCurrentOD(op) {
        $scope.currentOD = op;
        DeepLinksFactory.setSearchURL({
            OD: $scope.currentOD
        });
        setTabNav();
        getStats()
    };
    /**
     * setCurrentPT()
     * Sets the current option and updates stats.
     * @param {string} op - The selected option.
     */
    $scope.setCurrentPT = function setCurrentPT(op) {
        $scope.currentPT = op;
        DeepLinksFactory.setSearchURL({
            PT: $scope.currentPT
        });
        setTabNav();
        getStats()
    };

    function getStats() {
        $scope.isLoading = true;
        PlayTypeDataFactory.get($scope.params, "Handoff", $scope.currentPT).then(function(synergyResponse) {
            buildDataArray(synergyResponse);
            $scope.isLoading = false
        })
    }
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("runit", function(event) {
        $scope.params = {
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val
        };
        $scope.currentPT = $scope.splits.PT.selected.val;
        $scope.currentOD = $scope.splits.OD.selected.val;
        $scope.perMode = $scope.splits.PerMode.selected.val;
        if ($scope.currentOD === "offensive") {
            DeepLinksFactory.setSearchURL({
                dir: 1
            })
        }
        if ($scope.currentOD === "defensive") {
            DeepLinksFactory.setSearchURL({
                dir: -1
            })
        }
        setTabNav();
        getStats()
    });
    $scope.$watch("currentPT", function(currentPT) {
        if (!currentPT) {
            return
        }
        $scope.splits = Splits.get([{
            name: "Season",
            initial: SEASONS.playtypeStats.Season,
            seasonRange: [SEASONS.playtypeStats.SeasonFrom, SEASONS.playtypeStats.Season]
        }, {
            name: "SeasonType",
            initial: SEASONS.playtypeStats.SeasonType,
            without: ["Pre Season", "All Star"]
        }, {
            name: "PerMode",
            initial: "Totals",
            "default": "Totals"
        }, {
            name: "OD",
            initial: "offensive"
        }, {
            name: "PT",
            initial: "player"
        }]);
        $scope.params = {
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val
        };
        getStats()
    });
    /**
     * buildDataArray()
     * Returns a subset of data and assigns it to $scope.dataArray.
     *
     * @param {Object} AJAXResponse - The full data set.
     *
     */
    function buildDataArray(AJAXResponse) {
        if ($scope.currentPT === "player" && $scope.currentOD === "offensive") {
            $scope.datasets = [AJAXResponse.sets.Offensive]
        }
        if ($scope.currentPT === "player" && $scope.currentOD === "defensive") {
            $scope.datasets = [AJAXResponse.sets.Deffensive]
        }
        if ($scope.currentPT === "team" && $scope.currentOD === "offensive") {
            $scope.datasets = [AJAXResponse.sets.Offensive]
        }
        if ($scope.currentPT === "team" && $scope.currentOD === "defensive") {
            $scope.datasets = [AJAXResponse.sets.Defensive]
        }
        // Add Percentile property to each entry in the dataset.
        $scope.datasets[0].datatable.forEach(function(v, i, a) {
            v.Percentile = v.WorsePPP / (v.WorsePPP + v.BetterPPP) * 100;
            v.PlayerFullName = [v.PlayerFirstName, v.PlayerLastName].join(" ")
        });
        $scope.perMode = $scope.splits.PerMode.selected.val;
        $scope.datasets.initalSortField = "Points";
        $scope.datasets.shouldReverse = true
    }
}]); /*global $, angular, console, stats */
stats.controller("PlayTypeIsolationCtrl", ["$scope", "$location", "Splits", "$http", "StatsRequest", "$filter", "SEASONS", "TAB_DEFINITIONS", "$sce", "DeepLinksFactory", "PlayTypeDataFactory", function($scope, $location, Splits, $http, StatsRequest, $filter, SEASONS, TAB_DEFINITIONS, $sce, DeepLinksFactory, PlayTypeDataFactory) {
    "use strict";
    /**
     * @var {Object} _locationSearchObj - Private variable. The $location query string object.
     * @var {Boolean} _hasDeepLink - Private variable. True if _locationSearchObj has 1 or more keys.
     */
    var _locationSearchObj = DeepLinksFactory.getSearchURL();
    var _hasDeepLink = Object.keys(_locationSearchObj).length;
    // Referense to `this` when using "Controler As" syntax.
    var vm = this;
    $scope.currentIndex = 0;
    $scope.currentOD = _locationSearchObj.OD || "offensive";
    $scope.currentPT = _locationSearchObj.PT || "player";
    $scope.dataArray = [];
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.tabListArray = $filter("toArray")(TAB_DEFINITIONS.playtype);
    $scope.tabListObj = TAB_DEFINITIONS.playtype;
    DeepLinksFactory.setSearchURL({
        PT: $scope.currentPT
    });
    DeepLinksFactory.setSearchURL({
        OD: $scope.currentOD
    });
    setTabNav();
    /**
     * setTabNav()
     * Set navigation tab URLs based on user input
     */
    function setTabNav() {
        var _nodeList = document.querySelectorAll(".playtype-tab-nav__link");
        var queryString = DeepLinksFactory.getFullURL().split("?")[1];
        for (var i = _nodeList.length; i--;) {
            var rootURL = _nodeList[i].getAttribute("href").split("?")[0];
            _nodeList[i].setAttribute("href", [rootURL, "?", queryString].join(""))
        }
    }
    /**
     * setCurrentOD()
     * Sets the current option and updates stats.
     * @param {string} op - The selected option.
     */
    $scope.setCurrentOD = function setCurrentOD(op) {
        $scope.currentOD = op;
        DeepLinksFactory.setSearchURL({
            OD: $scope.currentOD
        });
        setTabNav();
        getStats()
    };
    /**
     * setCurrentPT()
     * Sets the current option and updates stats.
     * @param {string} op - The selected option.
     */
    $scope.setCurrentPT = function setCurrentPT(op) {
        $scope.currentPT = op;
        DeepLinksFactory.setSearchURL({
            PT: $scope.currentPT
        });
        setTabNav();
        getStats()
    };

    function getStats() {
        $scope.isLoading = true;
        PlayTypeDataFactory.get($scope.params, "Isolation", $scope.currentPT).then(function(synergyResponse) {
            buildDataArray(synergyResponse);
            $scope.isLoading = false
        })
    }
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("runit", function(event) {
        $scope.params = {
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val
        };
        $scope.currentPT = $scope.splits.PT.selected.val;
        $scope.currentOD = $scope.splits.OD.selected.val;
        $scope.perMode = $scope.splits.PerMode.selected.val;
        if ($scope.currentOD === "offensive") {
            DeepLinksFactory.setSearchURL({
                dir: 1
            })
        }
        if ($scope.currentOD === "defensive") {
            DeepLinksFactory.setSearchURL({
                dir: -1
            })
        }
        setTabNav();
        getStats()
    });
    $scope.$watch("currentPT", function(currentPT) {
        if (!currentPT) {
            return
        }
        $scope.splits = Splits.get([{
            name: "Season",
            initial: SEASONS.playtypeStats.Season,
            seasonRange: [SEASONS.playtypeStats.SeasonFrom, SEASONS.playtypeStats.Season]
        }, {
            name: "SeasonType",
            initial: SEASONS.playtypeStats.SeasonType,
            without: ["Pre Season", "All Star"]
        }, {
            name: "PerMode",
            initial: "Totals",
            "default": "Totals"
        }, {
            name: "OD",
            initial: "offensive"
        }, {
            name: "PT",
            initial: "player"
        }]);
        $scope.params = {
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val
        };
        getStats()
    });
    /**
     * buildDataArray()
     * Returns a subset of data and assigns it to $scope.dataArray.
     *
     * @param {Object} AJAXResponse - The full data set.
     *
     */
    function buildDataArray(AJAXResponse) {
        if ($scope.currentPT === "player" && $scope.currentOD === "offensive") {
            $scope.datasets = [AJAXResponse.sets.Offensive]
        }
        if ($scope.currentPT === "player" && $scope.currentOD === "defensive") {
            $scope.datasets = [AJAXResponse.sets.Deffensive]
        }
        if ($scope.currentPT === "team" && $scope.currentOD === "offensive") {
            $scope.datasets = [AJAXResponse.sets.Offensive]
        }
        if ($scope.currentPT === "team" && $scope.currentOD === "defensive") {
            $scope.datasets = [AJAXResponse.sets.Defensive]
        }
        // Add Percentile property to each entry in the dataset.
        $scope.datasets[0].datatable.forEach(function(v, i, a) {
            v.Percentile = v.WorsePPP / (v.WorsePPP + v.BetterPPP) * 100;
            v.PlayerFullName = [v.PlayerFirstName, v.PlayerLastName].join(" ")
        });
        $scope.perMode = $scope.splits.PerMode.selected.val;
        $scope.datasets.initalSortField = "Points";
        $scope.datasets.shouldReverse = true
    }
}]); /*global $, angular, console, stats */
stats.controller("PlayTypeMiscCtrl", ["$scope", "$location", "Splits", "$http", "StatsRequest", "$filter", "SEASONS", "TAB_DEFINITIONS", "$sce", "DeepLinksFactory", "PlayTypeDataFactory", function($scope, $location, Splits, $http, StatsRequest, $filter, SEASONS, TAB_DEFINITIONS, $sce, DeepLinksFactory, PlayTypeDataFactory) {
    "use strict";
    /**
     * @var {Object} _locationSearchObj - Private variable. The $location query string object.
     * @var {Boolean} _hasDeepLink - Private variable. True if _locationSearchObj has 1 or more keys.
     */
    var _locationSearchObj = DeepLinksFactory.getSearchURL();
    var _hasDeepLink = Object.keys(_locationSearchObj).length;
    // Referense to `this` when using "Controler As" syntax.
    var vm = this;
    $scope.currentIndex = 0;
    $scope.currentOD = _locationSearchObj.OD || "offensive";
    $scope.currentPT = _locationSearchObj.PT || "player";
    $scope.dataArray = [];
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.tabListArray = $filter("toArray")(TAB_DEFINITIONS.playtype);
    $scope.tabListObj = TAB_DEFINITIONS.playtype;
    DeepLinksFactory.setSearchURL({
        PT: $scope.currentPT
    });
    DeepLinksFactory.setSearchURL({
        OD: $scope.currentOD
    });
    setTabNav();
    /**
     * setTabNav()
     * Set navigation tab URLs based on user input
     */
    function setTabNav() {
        var _nodeList = document.querySelectorAll(".playtype-tab-nav__link");
        var queryString = DeepLinksFactory.getFullURL().split("?")[1];
        for (var i = _nodeList.length; i--;) {
            var rootURL = _nodeList[i].getAttribute("href").split("?")[0];
            _nodeList[i].setAttribute("href", [rootURL, "?", queryString].join(""))
        }
    }
    /**
     * setCurrentOD()
     * Sets the current option and updates stats.
     * @param {string} op - The selected option.
     */
    $scope.setCurrentOD = function setCurrentOD(op) {
        $scope.currentOD = op;
        DeepLinksFactory.setSearchURL({
            OD: $scope.currentOD
        });
        setTabNav();
        getStats()
    };
    /**
     * setCurrentPT()
     * Sets the current option and updates stats.
     * @param {string} op - The selected option.
     */
    $scope.setCurrentPT = function setCurrentPT(op) {
        $scope.currentPT = op;
        DeepLinksFactory.setSearchURL({
            PT: $scope.currentPT
        });
        setTabNav();
        getStats()
    };

    function getStats() {
        $scope.isLoading = true;
        PlayTypeDataFactory.get($scope.params, "Misc", $scope.currentPT).then(function(synergyResponse) {
            buildDataArray(synergyResponse);
            $scope.isLoading = false
        })
    }
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("runit", function(event) {
        $scope.params = {
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val
        };
        $scope.currentPT = $scope.splits.PT.selected.val;
        $scope.currentOD = $scope.splits.OD.selected.val;
        $scope.perMode = $scope.splits.PerMode.selected.val;
        if ($scope.currentOD === "offensive") {
            DeepLinksFactory.setSearchURL({
                dir: 1
            })
        }
        if ($scope.currentOD === "defensive") {
            DeepLinksFactory.setSearchURL({
                dir: -1
            })
        }
        setTabNav();
        getStats()
    });
    $scope.$watch("currentPT", function(currentPT) {
        if (!currentPT) {
            return
        }
        $scope.splits = Splits.get([{
            name: "Season",
            initial: SEASONS.playtypeStats.Season,
            seasonRange: [SEASONS.playtypeStats.SeasonFrom, SEASONS.playtypeStats.Season]
        }, {
            name: "SeasonType",
            initial: SEASONS.playtypeStats.SeasonType,
            without: ["Pre Season", "All Star"]
        }, {
            name: "PerMode",
            initial: "Totals",
            "default": "Totals"
        }, {
            name: "OD",
            initial: "offensive"
        }, {
            name: "PT",
            initial: "player"
        }]);
        $scope.params = {
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val
        };
        getStats()
    });
    /**
     * buildDataArray()
     * Returns a subset of data and assigns it to $scope.dataArray.
     *
     * @param {Object} AJAXResponse - The full data set.
     *
     */
    function buildDataArray(AJAXResponse) {
        if ($scope.currentPT === "player" && $scope.currentOD === "offensive") {
            $scope.datasets = [AJAXResponse.sets.Offensive]
        }
        if ($scope.currentPT === "player" && $scope.currentOD === "defensive") {
            $scope.datasets = [AJAXResponse.sets.Deffensive]
        }
        if ($scope.currentPT === "team" && $scope.currentOD === "offensive") {
            $scope.datasets = [AJAXResponse.sets.Offensive]
        }
        if ($scope.currentPT === "team" && $scope.currentOD === "defensive") {
            $scope.datasets = [AJAXResponse.sets.Defensive]
        }
        // Add Percentile property to each entry in the dataset.
        $scope.datasets[0].datatable.forEach(function(v, i, a) {
            v.Percentile = v.WorsePPP / (v.WorsePPP + v.BetterPPP) * 100;
            v.PlayerFullName = [v.PlayerFirstName, v.PlayerLastName].join(" ")
        });
        $scope.perMode = $scope.splits.PerMode.selected.val;
        $scope.datasets.initalSortField = "Points";
        $scope.datasets.shouldReverse = true
    }
}]); /*global $, angular, console, stats */
stats.controller("PlayTypeOffScreenCtrl", ["$scope", "$location", "Splits", "$http", "StatsRequest", "$filter", "SEASONS", "TAB_DEFINITIONS", "$sce", "DeepLinksFactory", "PlayTypeDataFactory", function($scope, $location, Splits, $http, StatsRequest, $filter, SEASONS, TAB_DEFINITIONS, $sce, DeepLinksFactory, PlayTypeDataFactory) {
    "use strict";
    /**
     * @var {Object} _locationSearchObj - Private variable. The $location query string object.
     * @var {Boolean} _hasDeepLink - Private variable. True if _locationSearchObj has 1 or more keys.
     */
    var _locationSearchObj = DeepLinksFactory.getSearchURL();
    var _hasDeepLink = Object.keys(_locationSearchObj).length;
    // Referense to `this` when using "Controler As" syntax.
    var vm = this;
    $scope.currentIndex = 0;
    $scope.currentOD = _locationSearchObj.OD || "offensive";
    $scope.currentPT = _locationSearchObj.PT || "player";
    $scope.dataArray = [];
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.tabListArray = $filter("toArray")(TAB_DEFINITIONS.playtype);
    $scope.tabListObj = TAB_DEFINITIONS.playtype;
    DeepLinksFactory.setSearchURL({
        PT: $scope.currentPT
    });
    DeepLinksFactory.setSearchURL({
        OD: $scope.currentOD
    });
    setTabNav();
    /**
     * setTabNav()
     * Set navigation tab URLs based on user input
     */
    function setTabNav() {
        var _nodeList = document.querySelectorAll(".playtype-tab-nav__link");
        var queryString = DeepLinksFactory.getFullURL().split("?")[1];
        for (var i = _nodeList.length; i--;) {
            var rootURL = _nodeList[i].getAttribute("href").split("?")[0];
            _nodeList[i].setAttribute("href", [rootURL, "?", queryString].join(""))
        }
    }
    /**
     * setCurrentOD()
     * Sets the current option and updates stats.
     * @param {string} op - The selected option.
     */
    $scope.setCurrentOD = function setCurrentOD(op) {
        $scope.currentOD = op;
        DeepLinksFactory.setSearchURL({
            OD: $scope.currentOD
        });
        setTabNav();
        getStats()
    };
    /**
     * setCurrentPT()
     * Sets the current option and updates stats.
     * @param {string} op - The selected option.
     */
    $scope.setCurrentPT = function setCurrentPT(op) {
        $scope.currentPT = op;
        DeepLinksFactory.setSearchURL({
            PT: $scope.currentPT
        });
        setTabNav();
        getStats()
    };

    function getStats() {
        $scope.isLoading = true;
        PlayTypeDataFactory.get($scope.params, "OffScreen", $scope.currentPT).then(function(synergyResponse) {
            buildDataArray(synergyResponse);
            $scope.isLoading = false
        })
    }
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("runit", function(event) {
        $scope.params = {
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val
        };
        $scope.currentPT = $scope.splits.PT.selected.val;
        $scope.currentOD = $scope.splits.OD.selected.val;
        $scope.perMode = $scope.splits.PerMode.selected.val;
        if ($scope.currentOD === "offensive") {
            DeepLinksFactory.setSearchURL({
                dir: 1
            })
        }
        if ($scope.currentOD === "defensive") {
            DeepLinksFactory.setSearchURL({
                dir: -1
            })
        }
        setTabNav();
        getStats()
    });
    $scope.$watch("currentPT", function(currentPT) {
        if (!currentPT) {
            return
        }
        $scope.splits = Splits.get([{
            name: "Season",
            initial: SEASONS.playtypeStats.Season,
            seasonRange: [SEASONS.playtypeStats.SeasonFrom, SEASONS.playtypeStats.Season]
        }, {
            name: "SeasonType",
            initial: SEASONS.playtypeStats.SeasonType,
            without: ["Pre Season", "All Star"]
        }, {
            name: "PerMode",
            initial: "Totals",
            "default": "Totals"
        }, {
            name: "OD",
            initial: "offensive"
        }, {
            name: "PT",
            initial: "player"
        }]);
        $scope.params = {
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val
        };
        getStats()
    });
    /**
     * buildDataArray()
     * Returns a subset of data and assigns it to $scope.dataArray.
     *
     * @param {Object} AJAXResponse - The full data set.
     *
     */
    function buildDataArray(AJAXResponse) {
        if ($scope.currentPT === "player" && $scope.currentOD === "offensive") {
            $scope.datasets = [AJAXResponse.sets.Offensive]
        }
        if ($scope.currentPT === "player" && $scope.currentOD === "defensive") {
            $scope.datasets = [AJAXResponse.sets.Deffensive]
        }
        if ($scope.currentPT === "team" && $scope.currentOD === "offensive") {
            $scope.datasets = [AJAXResponse.sets.Offensive]
        }
        if ($scope.currentPT === "team" && $scope.currentOD === "defensive") {
            $scope.datasets = [AJAXResponse.sets.Defensive]
        }
        // Add Percentile property to each entry in the dataset.
        $scope.datasets[0].datatable.forEach(function(v, i, a) {
            v.Percentile = v.WorsePPP / (v.WorsePPP + v.BetterPPP) * 100;
            v.PlayerFullName = [v.PlayerFirstName, v.PlayerLastName].join(" ")
        });
        $scope.perMode = $scope.splits.PerMode.selected.val;
        $scope.datasets.initalSortField = "Points";
        $scope.datasets.shouldReverse = true
    }
}]); /*global $, angular, console, stats */
stats.controller("PlayTypePostUpCtrl", ["$scope", "$location", "Splits", "$http", "StatsRequest", "$filter", "SEASONS", "TAB_DEFINITIONS", "$sce", "DeepLinksFactory", "PlayTypeDataFactory", function($scope, $location, Splits, $http, StatsRequest, $filter, SEASONS, TAB_DEFINITIONS, $sce, DeepLinksFactory, PlayTypeDataFactory) {
    "use strict";
    /**
     * @var {Object} _locationSearchObj - Private variable. The $location query string object.
     * @var {Boolean} _hasDeepLink - Private variable. True if _locationSearchObj has 1 or more keys.
     */
    var _locationSearchObj = DeepLinksFactory.getSearchURL();
    var _hasDeepLink = Object.keys(_locationSearchObj).length;
    // Referense to `this` when using "Controler As" syntax.
    var vm = this;
    $scope.currentIndex = 0;
    $scope.currentOD = _locationSearchObj.OD || "offensive";
    $scope.currentPT = _locationSearchObj.PT || "player";
    $scope.dataArray = [];
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.tabListArray = $filter("toArray")(TAB_DEFINITIONS.playtype);
    $scope.tabListObj = TAB_DEFINITIONS.playtype;
    /**
     * setCurrentOD()
     * Sets the current option and updates stats.
     * @param {string} op - The selected option.
     */
    $scope.setCurrentOD = function setCurrentOD(op) {
        $scope.currentOD = op;
        DeepLinksFactory.setSearchURL({
            OD: $scope.currentOD
        });
        getStats()
    };
    /**
     * setCurrentPT()
     * Sets the current option and updates stats.
     * @param {string} op - The selected option.
     */
    $scope.setCurrentPT = function setCurrentPT(op) {
        $scope.currentPT = op;
        DeepLinksFactory.setSearchURL({
            PT: $scope.currentPT
        });
        getStats()
    };

    function getStats() {
        $scope.isLoading = true;
        PlayTypeDataFactory.get($scope.params, "Postup", $scope.currentPT).then(function(synergyResponse) {
            buildDataArray(synergyResponse);
            $scope.isLoading = false
        })
    }
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("runit", function(event) {
        $scope.params = {
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val
        };
        $scope.currentPT = $scope.splits.PT.selected.val;
        $scope.currentOD = $scope.splits.OD.selected.val;
        $scope.perMode = $scope.splits.PerMode.selected.val;
        if ($scope.currentOD === "offensive") {
            DeepLinksFactory.setSearchURL({
                dir: 1
            })
        }
        if ($scope.currentOD === "defensive") {
            DeepLinksFactory.setSearchURL({
                dir: -1
            })
        }
        getStats()
    });
    $scope.$watch("currentPT", function(currentPT) {
        if (!currentPT) {
            return
        }
        $scope.splits = Splits.get([{
            name: "Season",
            initial: SEASONS.playtypeStats.Season,
            seasonRange: [SEASONS.playtypeStats.SeasonFrom, SEASONS.playtypeStats.Season]
        }, {
            name: "SeasonType",
            initial: SEASONS.playtypeStats.SeasonType,
            without: ["Pre Season", "All Star"]
        }, {
            name: "PerMode",
            initial: "Totals",
            "default": "Totals"
        }, {
            name: "OD",
            initial: "offensive"
        }, {
            name: "PT",
            initial: "player"
        }]);
        $scope.params = {
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val
        };
        getStats()
    });
    /**
     * buildDataArray()
     * Returns a subset of data and assigns it to $scope.dataArray.
     *
     * @param {Object} AJAXResponse - The full data set.
     *
     */
    function buildDataArray(AJAXResponse) {
        if ($scope.currentPT === "player" && $scope.currentOD === "offensive") {
            $scope.datasets = [AJAXResponse.sets.Offensive]
        }
        if ($scope.currentPT === "player" && $scope.currentOD === "defensive") {
            $scope.datasets = [AJAXResponse.sets.Deffensive]
        }
        if ($scope.currentPT === "team" && $scope.currentOD === "offensive") {
            $scope.datasets = [AJAXResponse.sets.Offensive]
        }
        if ($scope.currentPT === "team" && $scope.currentOD === "defensive") {
            $scope.datasets = [AJAXResponse.sets.Defensive]
        }
        // Add Percentile property to each entry in the dataset.
        $scope.datasets[0].datatable.forEach(function(v, i, a) {
            v.Percentile = v.WorsePPP / (v.WorsePPP + v.BetterPPP) * 100;
            v.PlayerFullName = [v.PlayerFirstName, v.PlayerLastName].join(" ")
        });
        $scope.perMode = $scope.splits.PerMode.selected.val;
        $scope.datasets.initalSortField = "Points";
        $scope.datasets.shouldReverse = true
    }
}]); /*global $, angular, console, stats */
stats.controller("PlayTypePutbacksCtrl", ["$scope", "$location", "Splits", "$http", "StatsRequest", "$filter", "SEASONS", "TAB_DEFINITIONS", "$sce", "DeepLinksFactory", "PlayTypeDataFactory", function($scope, $location, Splits, $http, StatsRequest, $filter, SEASONS, TAB_DEFINITIONS, $sce, DeepLinksFactory, PlayTypeDataFactory) {
    "use strict";
    /**
     * @var {Object} _locationSearchObj - Private variable. The $location query string object.
     * @var {Boolean} _hasDeepLink - Private variable. True if _locationSearchObj has 1 or more keys.
     */
    var _locationSearchObj = DeepLinksFactory.getSearchURL();
    var _hasDeepLink = Object.keys(_locationSearchObj).length;
    // Referense to `this` when using "Controler As" syntax.
    var vm = this;
    $scope.currentIndex = 0;
    $scope.currentOD = _locationSearchObj.OD || "offensive";
    $scope.currentPT = _locationSearchObj.PT || "player";
    $scope.dataArray = [];
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.tabListArray = $filter("toArray")(TAB_DEFINITIONS.playtype);
    $scope.tabListObj = TAB_DEFINITIONS.playtype;
    DeepLinksFactory.setSearchURL({
        PT: $scope.currentPT
    });
    DeepLinksFactory.setSearchURL({
        OD: $scope.currentOD
    });
    setTabNav();
    /**
     * setTabNav()
     * Set navigation tab URLs based on user input
     */
    function setTabNav() {
        var _nodeList = document.querySelectorAll(".playtype-tab-nav__link");
        var queryString = DeepLinksFactory.getFullURL().split("?")[1];
        for (var i = _nodeList.length; i--;) {
            var rootURL = _nodeList[i].getAttribute("href").split("?")[0];
            _nodeList[i].setAttribute("href", [rootURL, "?", queryString].join(""))
        }
    }
    /**
     * setCurrentOD()
     * Sets the current option and updates stats.
     * @param {string} op - The selected option.
     */
    $scope.setCurrentOD = function setCurrentOD(op) {
        $scope.currentOD = op;
        DeepLinksFactory.setSearchURL({
            OD: $scope.currentOD
        });
        setTabNav();
        getStats()
    };
    /**
     * setCurrentPT()
     * Sets the current option and updates stats.
     * @param {string} op - The selected option.
     */
    $scope.setCurrentPT = function setCurrentPT(op) {
        $scope.currentPT = op;
        DeepLinksFactory.setSearchURL({
            PT: $scope.currentPT
        });
        setTabNav();
        getStats()
    };

    function getStats() {
        $scope.isLoading = true;
        PlayTypeDataFactory.get($scope.params, "OffRebound", $scope.currentPT).then(function(synergyResponse) {
            buildDataArray(synergyResponse);
            $scope.isLoading = false
        })
    }
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("runit", function(event) {
        $scope.params = {
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val
        };
        $scope.currentPT = $scope.splits.PT.selected.val;
        $scope.currentOD = $scope.splits.OD.selected.val;
        $scope.perMode = $scope.splits.PerMode.selected.val;
        if ($scope.currentOD === "offensive") {
            DeepLinksFactory.setSearchURL({
                dir: 1
            })
        }
        if ($scope.currentOD === "defensive") {
            DeepLinksFactory.setSearchURL({
                dir: -1
            })
        }
        setTabNav();
        getStats()
    });
    $scope.$watch("currentPT", function(currentPT) {
        if (!currentPT) {
            return
        }
        $scope.splits = Splits.get([{
            name: "Season",
            initial: SEASONS.playtypeStats.Season,
            seasonRange: [SEASONS.playtypeStats.SeasonFrom, SEASONS.playtypeStats.Season]
        }, {
            name: "SeasonType",
            initial: SEASONS.playtypeStats.SeasonType,
            without: ["Pre Season", "All Star"]
        }, {
            name: "PerMode",
            initial: "Totals",
            "default": "Totals"
        }, {
            name: "OD",
            initial: "offensive"
        }, {
            name: "PT",
            initial: "player"
        }]);
        $scope.params = {
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val
        };
        getStats()
    });
    /**
     * buildDataArray()
     * Returns a subset of data and assigns it to $scope.dataArray.
     *
     * @param {Object} AJAXResponse - The full data set.
     *
     */
    function buildDataArray(AJAXResponse) {
        if ($scope.currentPT === "player" && $scope.currentOD === "offensive") {
            $scope.datasets = [AJAXResponse.sets.Offensive]
        }
        if ($scope.currentPT === "player" && $scope.currentOD === "defensive") {
            $scope.datasets = [AJAXResponse.sets.Deffensive]
        }
        if ($scope.currentPT === "team" && $scope.currentOD === "offensive") {
            $scope.datasets = [AJAXResponse.sets.Offensive]
        }
        if ($scope.currentPT === "team" && $scope.currentOD === "defensive") {
            $scope.datasets = [AJAXResponse.sets.Defensive]
        }
        // Add Percentile property to each entry in the dataset.
        $scope.datasets[0].datatable.forEach(function(v, i, a) {
            v.Percentile = v.WorsePPP / (v.WorsePPP + v.BetterPPP) * 100;
            v.PlayerFullName = [v.PlayerFirstName, v.PlayerLastName].join(" ")
        });
        $scope.perMode = $scope.splits.PerMode.selected.val;
        $scope.datasets.initalSortField = "Points";
        $scope.datasets.shouldReverse = true
    }
}]); /*global $, angular, console, stats */
stats.controller("PlayTypeRollManCtrl", ["$scope", "$location", "Splits", "$http", "StatsRequest", "$filter", "SEASONS", "TAB_DEFINITIONS", "$sce", "DeepLinksFactory", "PlayTypeDataFactory", function($scope, $location, Splits, $http, StatsRequest, $filter, SEASONS, TAB_DEFINITIONS, $sce, DeepLinksFactory, PlayTypeDataFactory) {
    "use strict";
    /**
     * @var {Object} _locationSearchObj - Private variable. The $location query string object.
     * @var {Boolean} _hasDeepLink - Private variable. True if _locationSearchObj has 1 or more keys.
     */
    var _locationSearchObj = DeepLinksFactory.getSearchURL();
    var _hasDeepLink = Object.keys(_locationSearchObj).length;
    // Referense to `this` when using "Controler As" syntax.
    var vm = this;
    $scope.currentIndex = 0;
    $scope.currentOD = _locationSearchObj.OD || "offensive";
    $scope.currentPT = _locationSearchObj.PT || "player";
    $scope.dataArray = [];
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.tabListArray = $filter("toArray")(TAB_DEFINITIONS.playtype);
    $scope.tabListObj = TAB_DEFINITIONS.playtype;
    DeepLinksFactory.setSearchURL({
        PT: $scope.currentPT
    });
    DeepLinksFactory.setSearchURL({
        OD: $scope.currentOD
    });
    setTabNav();
    /**
     * setTabNav()
     * Set navigation tab URLs based on user input
     */
    function setTabNav() {
        var _nodeList = document.querySelectorAll(".playtype-tab-nav__link");
        var queryString = DeepLinksFactory.getFullURL().split("?")[1];
        for (var i = _nodeList.length; i--;) {
            var rootURL = _nodeList[i].getAttribute("href").split("?")[0];
            _nodeList[i].setAttribute("href", [rootURL, "?", queryString].join(""))
        }
    }
    /**
     * setCurrentOD()
     * Sets the current option and updates stats.
     * @param {string} op - The selected option.
     */
    $scope.setCurrentOD = function setCurrentOD(op) {
        $scope.currentOD = op;
        DeepLinksFactory.setSearchURL({
            OD: $scope.currentOD
        });
        setTabNav();
        getStats()
    };
    /**
     * setCurrentPT()
     * Sets the current option and updates stats.
     * @param {string} op - The selected option.
     */
    $scope.setCurrentPT = function setCurrentPT(op) {
        $scope.currentPT = op;
        DeepLinksFactory.setSearchURL({
            PT: $scope.currentPT
        });
        setTabNav();
        getStats()
    };

    function getStats() {
        $scope.isLoading = true;
        PlayTypeDataFactory.get($scope.params, "PRRollMan", $scope.currentPT).then(function(synergyResponse) {
            buildDataArray(synergyResponse);
            $scope.isLoading = false
        })
    }
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("runit", function(event) {
        $scope.params = {
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val
        };
        $scope.currentPT = $scope.splits.PT.selected.val;
        $scope.currentOD = $scope.splits.OD.selected.val;
        $scope.perMode = $scope.splits.PerMode.selected.val;
        if ($scope.currentOD === "offensive") {
            DeepLinksFactory.setSearchURL({
                dir: 1
            })
        }
        if ($scope.currentOD === "defensive") {
            DeepLinksFactory.setSearchURL({
                dir: -1
            })
        }
        setTabNav();
        getStats()
    });
    $scope.$watch("currentPT", function(currentPT) {
        if (!currentPT) {
            return
        }
        $scope.splits = Splits.get([{
            name: "Season",
            initial: SEASONS.playtypeStats.Season,
            seasonRange: [SEASONS.playtypeStats.SeasonFrom, SEASONS.playtypeStats.Season]
        }, {
            name: "SeasonType",
            initial: SEASONS.playtypeStats.SeasonType,
            without: ["Pre Season", "All Star"]
        }, {
            name: "PerMode",
            initial: "Totals",
            "default": "Totals"
        }, {
            name: "OD",
            initial: "offensive"
        }, {
            name: "PT",
            initial: "player"
        }]);
        $scope.params = {
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val
        };
        getStats()
    });
    /**
     * buildDataArray()
     * Returns a subset of data and assigns it to $scope.dataArray.
     *
     * @param {Object} AJAXResponse - The full data set.
     *
     */
    function buildDataArray(AJAXResponse) {
        if ($scope.currentPT === "player" && $scope.currentOD === "offensive") {
            $scope.datasets = [AJAXResponse.sets.Offensive]
        }
        if ($scope.currentPT === "player" && $scope.currentOD === "defensive") {
            $scope.datasets = [AJAXResponse.sets.Deffensive]
        }
        if ($scope.currentPT === "team" && $scope.currentOD === "offensive") {
            $scope.datasets = [AJAXResponse.sets.Offensive]
        }
        if ($scope.currentPT === "team" && $scope.currentOD === "defensive") {
            $scope.datasets = [AJAXResponse.sets.Defensive]
        }
        // Add Percentile property to each entry in the dataset.
        $scope.datasets[0].datatable.forEach(function(v, i, a) {
            v.Percentile = v.WorsePPP / (v.WorsePPP + v.BetterPPP) * 100;
            v.PlayerFullName = [v.PlayerFirstName, v.PlayerLastName].join(" ")
        });
        $scope.perMode = $scope.splits.PerMode.selected.val;
        $scope.datasets.initalSortField = "Points";
        $scope.datasets.shouldReverse = true
    }
}]); /*global $, angular, console, stats */
stats.controller("PlayTypeSpotUpCtrl", ["$scope", "$location", "Splits", "$http", "StatsRequest", "$filter", "SEASONS", "TAB_DEFINITIONS", "$sce", "DeepLinksFactory", "PlayTypeDataFactory", function($scope, $location, Splits, $http, StatsRequest, $filter, SEASONS, TAB_DEFINITIONS, $sce, DeepLinksFactory, PlayTypeDataFactory) {
    "use strict";
    /**
     * @var {Object} _locationSearchObj - Private variable. The $location query string object.
     * @var {Boolean} _hasDeepLink - Private variable. True if _locationSearchObj has 1 or more keys.
     */
    var _locationSearchObj = DeepLinksFactory.getSearchURL();
    var _hasDeepLink = Object.keys(_locationSearchObj).length;
    // Referense to `this` when using "Controler As" syntax.
    var vm = this;
    $scope.currentIndex = 0;
    $scope.currentOD = _locationSearchObj.OD || "offensive";
    $scope.currentPT = _locationSearchObj.PT || "player";
    $scope.dataArray = [];
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.tabListArray = $filter("toArray")(TAB_DEFINITIONS.playtype);
    $scope.tabListObj = TAB_DEFINITIONS.playtype;
    DeepLinksFactory.setSearchURL({
        PT: $scope.currentPT
    });
    DeepLinksFactory.setSearchURL({
        OD: $scope.currentOD
    });
    setTabNav();
    /**
     * setTabNav()
     * Set navigation tab URLs based on user input
     */
    function setTabNav() {
        var _nodeList = document.querySelectorAll(".playtype-tab-nav__link");
        var queryString = DeepLinksFactory.getFullURL().split("?")[1];
        for (var i = _nodeList.length; i--;) {
            var rootURL = _nodeList[i].getAttribute("href").split("?")[0];
            _nodeList[i].setAttribute("href", [rootURL, "?", queryString].join(""))
        }
    }
    /**
     * setCurrentOD()
     * Sets the current option and updates stats.
     * @param {string} op - The selected option.
     */
    $scope.setCurrentOD = function setCurrentOD(op) {
        $scope.currentOD = op;
        DeepLinksFactory.setSearchURL({
            OD: $scope.currentOD
        });
        setTabNav();
        getStats()
    };
    /**
     * setCurrentPT()
     * Sets the current option and updates stats.
     * @param {string} op - The selected option.
     */
    $scope.setCurrentPT = function setCurrentPT(op) {
        $scope.currentPT = op;
        DeepLinksFactory.setSearchURL({
            PT: $scope.currentPT
        });
        setTabNav();
        getStats()
    };

    function getStats() {
        $scope.isLoading = true;
        PlayTypeDataFactory.get($scope.params, "Spotup", $scope.currentPT).then(function(synergyResponse) {
            buildDataArray(synergyResponse);
            $scope.isLoading = false
        })
    }
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("runit", function(event) {
        $scope.params = {
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val
        };
        $scope.currentPT = $scope.splits.PT.selected.val;
        $scope.currentOD = $scope.splits.OD.selected.val;
        $scope.perMode = $scope.splits.PerMode.selected.val;
        if ($scope.currentOD === "offensive") {
            DeepLinksFactory.setSearchURL({
                dir: 1
            })
        }
        if ($scope.currentOD === "defensive") {
            DeepLinksFactory.setSearchURL({
                dir: -1
            })
        }
        setTabNav();
        getStats()
    });
    $scope.$watch("currentPT", function(currentPT) {
        if (!currentPT) {
            return
        }
        $scope.splits = Splits.get([{
            name: "Season",
            initial: SEASONS.playtypeStats.Season,
            seasonRange: [SEASONS.playtypeStats.SeasonFrom, SEASONS.playtypeStats.Season]
        }, {
            name: "SeasonType",
            initial: SEASONS.playtypeStats.SeasonType,
            without: ["Pre Season", "All Star"]
        }, {
            name: "PerMode",
            initial: "Totals",
            "default": "Totals"
        }, {
            name: "OD",
            initial: "offensive"
        }, {
            name: "PT",
            initial: "player"
        }]);
        $scope.params = {
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val
        };
        getStats()
    });
    /**
     * buildDataArray()
     * Returns a subset of data and assigns it to $scope.dataArray.
     *
     * @param {Object} AJAXResponse - The full data set.
     *
     */
    function buildDataArray(AJAXResponse) {
        if ($scope.currentPT === "player" && $scope.currentOD === "offensive") {
            $scope.datasets = [AJAXResponse.sets.Offensive]
        }
        if ($scope.currentPT === "player" && $scope.currentOD === "defensive") {
            $scope.datasets = [AJAXResponse.sets.Deffensive]
        }
        if ($scope.currentPT === "team" && $scope.currentOD === "offensive") {
            $scope.datasets = [AJAXResponse.sets.Offensive]
        }
        if ($scope.currentPT === "team" && $scope.currentOD === "defensive") {
            $scope.datasets = [AJAXResponse.sets.Defensive]
        }
        // Add Percentile property to each entry in the dataset.
        $scope.datasets[0].datatable.forEach(function(v, i, a) {
            v.Percentile = v.WorsePPP / (v.WorsePPP + v.BetterPPP) * 100;
            v.PlayerFullName = [v.PlayerFirstName, v.PlayerLastName].join(" ")
        });
        $scope.perMode = $scope.splits.PerMode.selected.val;
        $scope.datasets.initalSortField = "Points";
        $scope.datasets.shouldReverse = true
    }
}]); /* global $, angular, console, stats */
stats.controller("PlayTypeSummaryCtrl", ["$scope", "$location", "Splits", "$http", "StatsRequest", "$filter", "SEASONS", "TAB_DEFINITIONS", "$sce", "DeepLinksFactory", "PlayTypeSummaryDataFactory", function($scope, $location, Splits, $http, StatsRequest, $filter, SEASONS, TAB_DEFINITIONS, $sce, DeepLinksFactory, PlayTypeSummaryDataFactory) {
    "use strict";
    /**
     * @var {Object} _locationSearchObj - Private variable. The $location query string object.
     * @var {Boolean} _hasDeepLink - Private variable. True if _locationSearchObj has 1 or more keys.
     */
    var _locationSearchObj = DeepLinksFactory.getSearchURL();
    var _hasDeepLink = DeepLinksFactory.hasSearchURL();
    // Referense to `this` when using "Controler As" syntax.
    var vm = this;
    $scope.currentIndex = 0;
    $scope.currentOD = _locationSearchObj.OD || "offensive";
    $scope.currentPT = _locationSearchObj.PT || "player";
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.tabListArray = $filter("toArray")(TAB_DEFINITIONS.playtype);
    $scope.tabListObj = TAB_DEFINITIONS.playtype;
    DeepLinksFactory.setSearchURL({
        PT: $scope.currentPT
    });
    DeepLinksFactory.setSearchURL({
        OD: $scope.currentOD
    });
    /**
     * setTabNav()
     * Set navigation tab URLs based on user input
     */
    function setTabNav() {
        var _nodeList = document.querySelectorAll(".playtype-tab-nav__link");
        var queryString = DeepLinksFactory.getFullURL().split("?")[1];
        for (var i = _nodeList.length; i--;) {
            var rootURL = _nodeList[i].getAttribute("href").split("?")[0];
            _nodeList[i].setAttribute("href", [rootURL, "?", queryString].join(""))
        }
    }
    /**
     * setCurrentOD()
     * Sets the current option and updates stats.
     * @param {string} op - The selected option.
     */
    $scope.setCurrentOD = function setCurrentOD(op) {
        $scope.currentOD = op;
        DeepLinksFactory.setSearchURL({
            OD: $scope.currentOD
        });
        setTabNav();
        getStats()
    };
    /**
     * setCurrentPT()
     * Sets the current option and updates stats.
     * @param {string} op - The selected option.
     */
    $scope.setCurrentPT = function setCurrentPT(op) {
        $scope.currentPT = op;
        DeepLinksFactory.setSearchURL({
            PT: $scope.currentPT
        });
        setTabNav();
        getStats()
    };
    /**
     * onNavChange()
     * Sets the url to the selected play type on mobile.
     * @params {none}
     */
    $scope.onNavChange = function onNavChange() {
        $location.path($scope.selected.url)
    };
    $scope.changePanel = function(direction) {
        if ($scope.currentIndex + direction < 8 && $scope.currentIndex + direction > 0) {
            $scope.currentIndex += direction
        } else {
            if ($scope.currentIndex + direction < 0) {
                $scope.currentIndex = 7
            } else $scope.currentIndex = 0
        }
    };
    $scope.splits = Splits.get([{
        name: "Season",
        initial: SEASONS.playtypeStats.Season,
        seasonRange: [SEASONS.playtypeStats.SeasonFrom, SEASONS.playtypeStats.Season]
    }, {
        name: "SeasonType",
        initial: SEASONS.playtypeStats.SeasonType,
        without: ["Pre Season", "All Star"]
    }]);
    $scope.params = {
        Season: $scope.splits.Season.selected.val,
        SeasonType: $scope.splits.SeasonType.selected.val
    };

    function getStats() {
        $scope.isLoading = true;
        PlayTypeSummaryDataFactory.get($scope.params, "Top", $scope.currentPT).then(function(synergyResponse) {
            buildTabListArray(synergyResponse);
            $scope.isLoading = false
        })
    }
    $http.get("/frags/stats-site-page-play-type-more-list.html").then(function(resp) {
        $scope.moreStats = $sce.trustAsHtml(resp.data)
    });
    $scope.onrunit = function() {
        setTabNav();
        getStats()
    };
    // emitted by statsRunIt
    $scope.$on("runit", function() {
        getStats()
    });
    setTabNav();
    getStats();
    /**
     * buildTabListArray()
     * Returns a subset of data and assigns it to $scope.tabListArray.
     *
     * @param {Object} AJAXResponse - The full data set.
     *
     */
    function buildTabListArray(AJAXResponse) {
        if ($scope.currentPT === "player" && $scope.currentOD === "offensive") {
            $scope.tabListArray.forEach(function(tab, i, a) {
                if (tab.value.summaryDataKey.player) {
                    $scope.tabListArray[i].data = AJAXResponse[tab.value.summaryDataKey.player].sets.Offensive.datatable
                }
            })
        }
        if ($scope.currentPT === "player" && $scope.currentOD === "defensive") {
            $scope.tabListArray.forEach(function(tab, i, a) {
                if (tab.value.summaryDataKey.player) {
                    $scope.tabListArray[i].data = AJAXResponse[tab.value.summaryDataKey.player].sets.Defensive.datatable
                }
            })
        }
        if ($scope.currentPT === "team" && $scope.currentOD === "offensive") {
            $scope.tabListArray.forEach(function(tab, i, a) {
                if (tab.value.summaryDataKey.team) {
                    $scope.tabListArray[i].data = AJAXResponse[tab.value.summaryDataKey.team].sets.Offensive.datatable
                }
            })
        }
        if ($scope.currentPT === "team" && $scope.currentOD === "defensive") {
            $scope.tabListArray.forEach(function(tab, i, a) {
                if (tab.value.summaryDataKey.team) {
                    $scope.tabListArray[i].data = AJAXResponse[tab.value.summaryDataKey.team].sets.Defensive.datatable
                }
            })
        }
        $scope.tabListArray.forEach(function(tab, i, a) {
            tab.data.forEach(function(player, i, a) {
                player.PlayerFullName = [player.PlayerFirstName, player.PlayerLastName].join(" ")
            })
        })
    }
}]); /*global $, angular, console, stats */
stats.controller("PlayTypeTransitionCtrl", ["$scope", "$location", "Splits", "$http", "StatsRequest", "$filter", "SEASONS", "TAB_DEFINITIONS", "$sce", "DeepLinksFactory", "PlayTypeDataFactory", function($scope, $location, Splits, $http, StatsRequest, $filter, SEASONS, TAB_DEFINITIONS, $sce, DeepLinksFactory, PlayTypeDataFactory) {
    "use strict";
    /**
     * @var {Object} _locationSearchObj - Private variable. The $location query string object.
     * @var {Boolean} _hasDeepLink - Private variable. True if _locationSearchObj has 1 or more keys.
     */
    var _locationSearchObj = DeepLinksFactory.getSearchURL();
    var _hasDeepLink = Object.keys(_locationSearchObj).length;
    // Referense to `this` when using "Controler As" syntax.
    var vm = this;
    $scope.currentIndex = 0;
    $scope.currentOD = _locationSearchObj.OD || "offensive";
    $scope.currentPT = _locationSearchObj.PT || "player";
    $scope.dataArray = [];
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.tabListArray = $filter("toArray")(TAB_DEFINITIONS.playtype);
    $scope.tabListObj = TAB_DEFINITIONS.playtype;
    DeepLinksFactory.setSearchURL({
        PT: $scope.currentPT
    });
    DeepLinksFactory.setSearchURL({
        OD: $scope.currentOD
    });
    setTabNav();
    /**
     * setTabNav()
     * Set navigation tab URLs based on user input
     */
    function setTabNav() {
        var _nodeList = document.querySelectorAll(".playtype-tab-nav__link");
        var queryString = DeepLinksFactory.getFullURL().split("?")[1];
        for (var i = _nodeList.length; i--;) {
            var rootURL = _nodeList[i].getAttribute("href").split("?")[0];
            _nodeList[i].setAttribute("href", [rootURL, "?", queryString].join(""))
        }
    }
    /**
     * setCurrentOD()
     * Sets the current option and updates stats.
     * @param {string} op - The selected option.
     */
    $scope.setCurrentOD = function setCurrentOD(op) {
        $scope.currentOD = op;
        DeepLinksFactory.setSearchURL({
            OD: $scope.currentOD
        });
        setTabNav();
        getStats()
    };
    /**
     * setCurrentPT()
     * Sets the current option and updates stats.
     * @param {string} op - The selected option.
     */
    $scope.setCurrentPT = function setCurrentPT(op) {
        $scope.currentPT = op;
        DeepLinksFactory.setSearchURL({
            PT: $scope.currentPT
        });
        setTabNav();
        getStats()
    };

    function getStats() {
        $scope.isLoading = true;
        PlayTypeDataFactory.get($scope.params, "Transition", $scope.currentPT).then(function(synergyResponse) {
            buildDataArray(synergyResponse);
            $scope.isLoading = false
        })
    }
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("runit", function(event) {
        $scope.params = {
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val
        };
        $scope.currentPT = $scope.splits.PT.selected.val;
        $scope.currentOD = $scope.splits.OD.selected.val;
        $scope.perMode = $scope.splits.PerMode.selected.val;
        if ($scope.currentOD === "offensive") {
            DeepLinksFactory.setSearchURL({
                dir: 1
            })
        }
        if ($scope.currentOD === "defensive") {
            DeepLinksFactory.setSearchURL({
                dir: -1
            })
        }
        setTabNav();
        getStats()
    });
    $scope.$watch("currentPT", function(currentPT) {
        if (!currentPT) {
            return
        }
        $scope.splits = Splits.get([{
            name: "Season",
            initial: SEASONS.playtypeStats.Season,
            seasonRange: [SEASONS.playtypeStats.SeasonFrom, SEASONS.playtypeStats.Season]
        }, {
            name: "SeasonType",
            initial: SEASONS.playtypeStats.SeasonType,
            without: ["Pre Season", "All Star"]
        }, {
            name: "PerMode",
            initial: "Totals",
            "default": "Totals"
        }, {
            name: "OD",
            initial: "offensive"
        }, {
            name: "PT",
            initial: "player"
        }]);
        $scope.params = {
            Season: $scope.splits.Season.selected.val,
            SeasonType: $scope.splits.SeasonType.selected.val
        };
        getStats()
    });
    /**
     * buildDataArray()
     * Returns a subset of data and assigns it to $scope.dataArray.
     *
     * @param {Object} AJAXResponse - The full data set.
     *
     */
    function buildDataArray(AJAXResponse) {
        if ($scope.currentPT === "player" && $scope.currentOD === "offensive") {
            $scope.datasets = [AJAXResponse.sets.Offensive]
        }
        if ($scope.currentPT === "player" && $scope.currentOD === "defensive") {
            $scope.datasets = [AJAXResponse.sets.Deffensive]
        }
        if ($scope.currentPT === "team" && $scope.currentOD === "offensive") {
            $scope.datasets = [AJAXResponse.sets.Offensive]
        }
        if ($scope.currentPT === "team" && $scope.currentOD === "defensive") {
            $scope.datasets = [AJAXResponse.sets.Defensive]
        }
        // Add Percentile property to each entry in the dataset.
        $scope.datasets[0].datatable.forEach(function(v, i, a) {
            v.Percentile = v.WorsePPP / (v.WorsePPP + v.BetterPPP) * 100;
            v.PlayerFullName = [v.PlayerFirstName, v.PlayerLastName].join(" ")
        });
        $scope.perMode = $scope.splits.PerMode.selected.val;
        $scope.datasets.initalSortField = "Points";
        $scope.datasets.shouldReverse = true
    }
}]);
/*
 * NO - 10/29 try using the gamedate controller instead of duplicating code / functionality
 */
stats.controller("ScoresCtrl", ["$scope", "$location", "$filter", "$http", "SEASONS", "ScoresService", function($scope, $location, $filter, $http, SEASONS, ScoresService) {
    "use strict";
    $scope.isLoading = true;
    $scope.noGames = true;
    $scope.games = [];
    $scope.lgames = [];
    $scope.showCal = false;
    $scope.dt = $location.path().slice(1);
    $scope.format = "dd/MM/yyyy";
    $scope.params = {
        LeagueID: "00",
        DayOffset: "0",
        gameDate: ""
    };

    function setDate(adj) {
        var date = new Date($scope.params.gameDate);
        date.setDate(date.getDate() + adj);
        var urlDate = $filter("date")(date, "MM/dd/yyyy");
        $location.path(urlDate)
    }
    $scope.changeDate = function(direction) {
        if ($scope.isLoading) {
            return
        }
        switch (direction) {
            case "next":
                setDate(1); // Function to update activeDate +1
                break;
            case "prev":
                setDate(-1); // Function to update activeDate -1
                break;
            default:
                setDate(1)
        }
        callOmniture()
    };
    $scope.$watch("dt", function(newval, oldval) {
        var urlDate = $filter("date")($scope.dt, "MM/dd/yyyy");
        $location.path(urlDate)
    });
    var referred = document.referrer;
    $scope.$watch(function() {
        return $location.path()
    }, function() {
        if ($location.path().slice(1)) {
            $scope.params.gameDate = $location.path().slice(1);
            getStats()
        } else {
            var date = new Date;
            var urlDate = $filter("date")(date, "MM/dd/yyyy");
            if (urlDate == $scope.params.gameDate) {
                window.location.href = referred
            }
            $location.path(urlDate)
        }
    });
    /*
     *
     *
     *
     *
     */
    function getStats() {
        $scope.isLoading = true;
        ScoresService.get($scope.params).then(function(data) {
            $scope.games = data.games;
            $scope.standings = data.standings;
            $scope.isLoading = false;
            if ($scope.games.length === 0) {
                $scope.noGames = true
            } else {
                $scope.noGames = false
            }
            var resetTimer = false;
            $scope.games.forEach(function(n, i) {
                if ($scope.games[i].GAME_STATUS_ID == 1) {
                    //get game time and add 12 to convert to PM
                    var getGameTime = data.games[i].GAME_STATUS_TEXT;
                    getGameTime = getGameTime.split(":", 1);
                    getGameTime = getGameTime * 1 + 12;
                    var getUTCTime = new Date;
                    getUTCTime = getUTCTime.getUTCHours();
                    if (getUTCTime < 4) {
                        //offset UTC time
                        getUTCTime = getUTCTime + 20
                    }
                    var timerOffset = getUTCTime - getGameTime;
                    //five hour offset window to account for EST
                    if (timerOffset < 5 && timerOffset > 0) {
                        resetTimer = true
                    }
                }
                //if any games are currently live set timeout
                if ($scope.games[i].GAME_STATUS_ID == 2) {
                    //get live data
                    liveGameStats();
                    //set timeout to capture final state
                    resetTimer = true
                }
            });
            if (resetTimer) {
                setTimeout(getStats, 6e4)
            }
        })
    }
    //if game is live
    function liveGameStats() {
        var getDate = new Date;
        var getYear = getDate.getFullYear();
        var livescores = "http://data.nba.com/data/5s/v" + 2015 + "/json/mobile_teams/nba/" + 2015 + "/scores/00_todays_scores.json";
        $http.get(livescores).then(function(data) {
            $scope.lgames = data.data.gs.g
        });
        setTimeout(liveGameStats, 6e4)
    }
}]);
/*
 * NO - 10/29 try using the gamedate controller instead of duplicating code / functionality
 */
stats.controller("StandingsCtrl", ["$scope", "$location", "$filter", "StatsRequest", function($scope, $location, $filter, StatsRequest) {
    "use strict";
    $scope.isLoading = true;
    $scope.showCal = false;
    $scope.showCal = false;
    $scope.dt = $location.path().slice(1);
    $scope.format = "dd/MM/yyyy";
    $scope.params = {
        LeagueID: "00",
        DayOffset: "0",
        gameDate: ""
    };

    function setDate(adj) {
        var date = new Date($scope.params.gameDate);
        date.setDate(date.getDate() + adj);
        var urlDate = $filter("date")(date, "MM/dd/yyyy");
        $location.path(urlDate)
    }
    $scope.changeDate = function(direction) {
        if ($scope.isLoading) {
            return
        }
        switch (direction) {
            case "next":
                setDate(1); // Function to update activeDate +1
                break;
            case "prev":
                setDate(-1); // Function to update activeDate -1
                break;
            default:
                setDate(1)
        }
    };
    $scope.$watch("dt", function(newval, oldval) {
        var urlDate = $filter("date")($scope.dt, "MM/dd/yyyy");
        $location.path(urlDate)
    });
    $scope.$watch(function() {
        return $location.path()
    }, function() {
        if ($location.path().slice(1)) {
            $scope.params.gameDate = $location.path().slice(1);
            getStats()
        } else {
            var date = new Date;
            var urlDate = $filter("date")(date, "MM/dd/yyyy");
            $location.path(urlDate)
        }
    });
    /*
     *
     *
     *
     *
     */
    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get("scoreboard", "", $scope.params).then(function() {
            var datasets = StatsRequest.getData();
            $scope.datasets = [{
                title: "Eastern Conference",
                datatable: datasets.EastConfStandingsByDay.datatable
            }, {
                title: "Western Conference",
                datatable: datasets.WestConfStandingsByDay.datatable
            }];
            $scope.isLoading = false
        })
    }
}]);
/*
 * NO 10/29 use svg responsive directive
 */
stats.controller("ShotchartCtrl", ["$scope", "$element", "$location", "$filter", "browser", "ShotchartService", function($scope, $element, $location, $filter, browser, ShotchartService) {
    "use strict";
    $scope.isLoading = true;
    $scope.zoneModes = [{
        label: "Basic Zones",
        value: "Basic"
    }, {
        label: "Advanced Zones",
        value: "Advanced"
    }];
    $scope.zoneMode = $scope.zoneModes[1];
    $scope.showZones = true;
    $scope.showDetails = true;
    $scope.showShots = true;
    $scope.showSplits = false;
    $scope.court = {
        margin: {
            top: 15,
            right: 10,
            bottom: 10,
            left: 10
        },
        width: 478,
        height: 450,
        rotation: 40
    };
    $scope.svg = {
        elm: $element.find("svg"),
        width: $scope.court.width + $scope.court.margin.left + $scope.court.margin.right,
        height: $scope.court.height + $scope.court.margin.top + $scope.court.margin.bottom
    };
    $scope.svg.aspect = $scope.svg.height / $scope.svg.width;
    $scope.params = {
        PlayerID: "0",
        Season: "",
        SeasonType: "",
        LeagueID: "00",
        TeamID: "0",
        GameID: "",
        Outcome: "",
        Location: "",
        Month: "0",
        SeasonSegment: "",
        DateFrom: "",
        DateTo: "",
        OpponentTeamID: "0",
        VsConference: "",
        VsDivision: "",
        Position: "",
        RookieYear: "",
        GameSegment: "",
        Period: "0",
        LastNGames: 0,
        ContextFilter: "",
        ContextMeasure: "FG_PCT",
        CFID: "",
        CFPARAMS: ""
    };
    $scope.getZoneFill = function(type, zone) {
        if (!$scope.zones || !$scope.zones[type] || !$scope.zones[type][zone]) {
            return
        }
        switch ($scope.zones[type][zone].leaguePerformance) {
            case "above":
                return "#00ff00";
            case "average":
                return "#ffff00";
            case "below":
                return "#ff0000";
            default:
                return "none"
        }
    };
    $scope.getShotFill = function(made) {
        return made ? "#33cc33  " : "#cc3333"
    };
    $scope.download = function() {
        console.log("download image");
        var $xml = $("#court").clone();
        // have to remove xlmns attribute because ie is dumb dumb and
        // includes it twice on one element and breaks the transcoding
        $xml.find("svg").removeAttr("style").removeAttr("xmlns");
        $xml.find("desc, defs").remove();
        var xml = $xml.html();
        var filename = "Shotchart_" + Date.now();
        if (browser() == "ie") {
            filename += ".png"
        }
        var $file = $("<input></input>").attr({
            type: "hidden",
            value: "Shotchart_" + Date.now() + ".png",
            name: "Filename"
        });
        var $svg = $("<input></input>").attr({
            type: "hidden",
            value: xml,
            name: "Data"
        });
        var $form = $("<form></form>").attr({
            method: "post",
            action: "/util/transcode",
            enctype: "application/x-www-form-urlencoded"
        }).append($svg, $file).appendTo(document.body).submit();
        return false
    };
    /*
     *
     *
     *
     *
     */
    function getStats() {
        $scope.isLoading = true;
        ShotchartService.get($scope.params).then(function(shotchart) {
            $scope.zones = shotchart.groupedShots;
            $scope.league = shotchart.groupedLeague;
            $scope.shots = shotchart.shots;
            $scope.isLoading = false;
            setTimeout(onResize, 100)
        })
    }

    function setParams() {
        for (var i in $location.search()) {
            var param = $location.search()[i];
            $scope.params[i] = param
        }
    }

    function initOptions() {
        var mode = $location.search().mode || "Advanced";
        $scope.zoneMode = $filter("filter")($scope.zoneModes, {
            value: mode
        })[0];
        $scope.showZones = $location.search().showZones != "0";
        $scope.showDetails = $location.search().showDetails != "0";
        $scope.showShots = $location.search().showShots == "1"
    }

    function updateURL() {
        $location.search("mode", $scope.zoneMode.value);
        $location.search("showZones", $scope.showZones ? 1 : 0);
        $location.search("showDetails", $scope.showDetails ? 1 : 0);
        $location.search("showShots", $scope.showShots ? 1 : 0)
    }
    setParams();
    getStats();
    $scope.$watch("zoneMode", updateURL);
    $scope.$watch("showZones", updateURL);
    $scope.$watch("showDetails", updateURL);
    $scope.$watch("showShots", updateURL);
    initOptions();
    /*
     *
     *
     *
     *
     */
    /*** RESIZE EVENT ***/
    // this has to be done unfortunately to make
    // the svg resize properly
    var onResize = function() {
        var width = Math.min(525, Math.max(295, $scope.svg.elm.width()));
        $scope.svg.elm.attr("width", width);
        $scope.svg.elm.attr("height", width * $scope.svg.aspect)
    };
    setTimeout(onResize, 250);
    $(window).resize(onResize)
}]); /*global $, angular, console, stats */
stats.controller("TeamGamelogsCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", "TeamFactory", function($scope, $location, $filter, Splits, SEASONS, StatsRequest, TeamFactory) {
    "use strict";
    /**
     * @var {Boolean} _isAllstar - Private variable. True if $scope.TeamID is an All Star team ID.
     * @var {Object} _teamInfo - Private variable. Defined later by $scope.$watch("teamInfo").
     */
    var _isAllstar = TeamFactory.isAllstar($scope.TeamID);
    var _teamInfo = {};
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;
    $scope.datasets = {};

    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get("teamGameLogs", "", $scope.params).then(function() {
            $scope.datasets = StatsRequest.getData();
            $scope.noData = $scope.datasets.TeamGameLog.rowSet.length === 0 ? true : false;
            $scope.isLoading = false
        })
    }
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("runit", function(event) {
        setStatsParams(_teamInfo);
        getStats()
    });
    $scope.$watch("teamInfo", function(teamInfo) {
        /**
         * @var {Object} _teamInfo - Private variable. Declared earlier in this script.
         */
        _teamInfo = teamInfo;
        if (!_teamInfo) {
            return
        }
        setStatsParams(_teamInfo);
        getStats()
    });

    function setStatsParams(teamInfo) {
        $scope.splits = Splits.get([{
            name: "Season",
            initial: _isAllstar ? SEASONS.allstar.Season : SEASONS.teamGameLogs.Season,
            seasonRange: _isAllstar ? [SEASONS.allstar.SeasonYearFrom, SEASONS.allstar.SeasonYear] : [teamInfo.MIN_YEAR, teamInfo.MAX_YEAR],
            include: _isAllstar ? [{
                val: "ALL",
                text: "All"
            }] : null
        }, {
            name: "SeasonType",
            initial: _isAllstar ? "All Star" : SEASONS.teamGameLogs.SeasonType,
            without: ["All Star"]
        }]);
        if (_isAllstar) {
            $scope.splits.Season.options.forEach(function(value, idex, array) {
                value.text = $filter("seasonToSeasonYear")(value.text)
            })
        }
        $scope.params = {
            LeagueID: "00",
            TeamID: teamInfo.TEAM_ID,
            Season: $scope.splits.Season.selected.val,
            SeasonType: _isAllstar ? "All Star" : $scope.splits.SeasonType.selected.val
        }
    }
}]); /*global $, angular, console, stats */
stats.controller("TeamLineupsAdvancedCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", "TeamFactory", function($scope, $location, $filter, Splits, SEASONS, StatsRequest, TeamFactory) {
    "use strict";
    /**
     * @var {Boolean} _isAllstar - Private variable. True if $scope.TeamID is an All Star team ID.
     * @var {Object} _teamInfo - Private variable. Defined later by $scope.$watch("teamInfo").
     */
    var _isAllstar = TeamFactory.isAllstar($scope.TeamID);
    var _teamInfo = {};
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.rowsPerPage = 50;
    $scope.noData = false;

    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get("teamLineups", "", $scope.params).then(function() {
            var datasets = StatsRequest.getData();
            $scope.datasets = {
                lineups: datasets.Lineups
            };
            $scope.noData = datasets.Lineups.rowSet.length === 0;
            $scope.isLoading = false
        })
    }
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("runit", function(event) {
        setStatsParams(_teamInfo);
        getStats()
    });
    $scope.$watch("teamInfo", function(teamInfo) {
        /**
         * @var {Object} _teamInfo - Private variable. Declared earlier in this script.
         */
        _teamInfo = teamInfo;
        if (!_teamInfo) {
            return
        }
        setStatsParams(_teamInfo);
        getStats()
    });

    function setStatsParams(teamInfo) {
        $scope.splits = Splits.get([{
            name: "Season",
            initial: _isAllstar ? SEASONS.allstar.Season : SEASONS.teamLineups.Season,
            seasonRange: _isAllstar ? [SEASONS.allstar.SeasonYearFrom, SEASONS.allstar.SeasonYear] : [SEASONS.teamLineups.SeasonYearFrom, teamInfo.MAX_YEAR]
        }, {
            name: "SeasonType",
            initial: _isAllstar ? "All Star" : SEASONS.teamLineups.SeasonType,
            without: ["Preseason", "All Star"]
        }, {
            name: "PerMode",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "GroupQuantity", "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo"]);
        if (_isAllstar) {
            $scope.splits.Season.options.forEach(function(value, idex, array) {
                value.text = $filter("seasonToSeasonYear")(value.text)
            })
        }
        $scope.params = {
            MeasureType: "Advanced",
            LeagueID: "00",
            TeamID: teamInfo.TEAM_ID,
            GroupQuantity: $scope.splits.GroupQuantity.selected.val,
            Season: $scope.splits.Season.selected.val,
            SeasonType: _isAllstar ? "All Star" : $scope.splits.SeasonType.selected.val,
            PerMode: $scope.splits.PerMode.selected.val,
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            GameID: $location.search().GameID || "",
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        }
    }
}]); /*global $, angular, console, stats */
stats.controller("TeamLineupsBaseCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", "TeamFactory", function($scope, $location, $filter, Splits, SEASONS, StatsRequest, TeamFactory) {
    "use strict";
    /**
     * @var {Boolean} _isAllstar - Private variable. True if $scope.TeamID is an All Star team ID.
     * @var {Object} _teamInfo - Private variable. Defined later by $scope.$watch("teamInfo").
     */
    var _isAllstar = TeamFactory.isAllstar($scope.TeamID);
    var _teamInfo = {};
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.rowsPerPage = 50;
    $scope.noData = false;

    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get("teamLineups", "", $scope.params).then(function() {
            var datasets = StatsRequest.getData();
            $scope.datasets = {
                lineups: datasets.Lineups
            };
            $scope.noData = datasets.Lineups.rowSet.length === 0;
            $scope.isLoading = false
        })
    }
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("runit", function(event) {
        setStatsParams(_teamInfo);
        getStats()
    });
    $scope.$watch("teamInfo", function(teamInfo) {
        /**
         * @var {Object} _teamInfo - Private variable. Declared earlier in this script.
         */
        _teamInfo = teamInfo;
        if (!_teamInfo) {
            return
        }
        setStatsParams(_teamInfo);
        getStats()
    });

    function setStatsParams(teamInfo) {
        $scope.splits = Splits.get([{
            name: "Season",
            initial: _isAllstar ? SEASONS.allstar.Season : SEASONS.teamLineups.Season,
            seasonRange: _isAllstar ? [SEASONS.allstar.SeasonYearFrom, SEASONS.allstar.SeasonYear] : [SEASONS.teamLineups.SeasonYearFrom, teamInfo.MAX_YEAR]
        }, {
            name: "SeasonType",
            initial: _isAllstar ? "All Star" : SEASONS.teamLineups.SeasonType,
            without: ["Preseason", "All Star"]
        }, {
            name: "PerMode",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "GroupQuantity", "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo"]);
        if (_isAllstar) {
            $scope.splits.Season.options.forEach(function(value, idex, array) {
                value.text = $filter("seasonToSeasonYear")(value.text)
            })
        }
        $scope.params = {
            MeasureType: "Base",
            LeagueID: "00",
            TeamID: teamInfo.TEAM_ID,
            GroupQuantity: $scope.splits.GroupQuantity.selected.val,
            Season: $scope.splits.Season.selected.val,
            SeasonType: _isAllstar ? "All Star" : $scope.splits.SeasonType.selected.val,
            PerMode: $scope.splits.PerMode.selected.val,
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            GameID: $location.search().GameID || "",
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        }
    }
}]); /*global $, angular, console, stats */
stats.controller("TeamLineupsFourFactorsCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", "TeamFactory", function($scope, $location, $filter, Splits, SEASONS, StatsRequest, TeamFactory) {
    "use strict";
    /**
     * @var {Boolean} _isAllstar - Private variable. True if $scope.TeamID is an All Star team ID.
     * @var {Object} _teamInfo - Private variable. Defined later by $scope.$watch("teamInfo").
     */
    var _isAllstar = TeamFactory.isAllstar($scope.TeamID);
    var _teamInfo = {};
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.rowsPerPage = 50;
    $scope.noData = false;

    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get("teamLineups", "", $scope.params).then(function() {
            var datasets = StatsRequest.getData();
            $scope.datasets = {
                lineups: datasets.Lineups
            };
            $scope.noData = datasets.Lineups.rowSet.length === 0;
            $scope.isLoading = false
        })
    }
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("runit", function(event) {
        setStatsParams(_teamInfo);
        getStats()
    });
    $scope.$watch("teamInfo", function(teamInfo) {
        /**
         * @var {Object} _teamInfo - Private variable. Declared earlier in this script.
         */
        _teamInfo = teamInfo;
        if (!_teamInfo) {
            return
        }
        setStatsParams(_teamInfo);
        getStats()
    });

    function setStatsParams(teamInfo) {
        $scope.splits = Splits.get([{
            name: "Season",
            initial: _isAllstar ? SEASONS.allstar.Season : SEASONS.teamLineups.Season,
            seasonRange: _isAllstar ? [SEASONS.allstar.SeasonYearFrom, SEASONS.allstar.SeasonYear] : [SEASONS.teamLineups.SeasonYearFrom, teamInfo.MAX_YEAR]
        }, {
            name: "SeasonType",
            initial: _isAllstar ? "All Star" : SEASONS.teamLineups.SeasonType,
            without: ["Pre Season", "All Star"]
        }, {
            name: "PerMode",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "GroupQuantity", "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo"]);
        if (_isAllstar) {
            $scope.splits.Season.options.forEach(function(value, idex, array) {
                value.text = $filter("seasonToSeasonYear")(value.text)
            })
        }
        $scope.params = {
            MeasureType: "Four Factors",
            LeagueID: "00",
            TeamID: teamInfo.TEAM_ID,
            GroupQuantity: $scope.splits.GroupQuantity.selected.val,
            Season: $scope.splits.Season.selected.val,
            SeasonType: _isAllstar ? "All Star" : $scope.splits.SeasonType.selected.val,
            PerMode: $scope.splits.PerMode.selected.val,
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            GameID: $location.search().GameID || "",
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        }
    }
}]); /*global $, angular, console, stats */
stats.controller("TeamLineupsMiscCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", "TeamFactory", function($scope, $location, $filter, Splits, SEASONS, StatsRequest, TeamFactory) {
    "use strict";
    /**
     * @var {Boolean} _isAllstar - Private variable. True if $scope.TeamID is an All Star team ID.
     * @var {Object} _teamInfo - Private variable. Defined later by $scope.$watch("teamInfo").
     */
    var _isAllstar = TeamFactory.isAllstar($scope.TeamID);
    var _teamInfo = {};
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.rowsPerPage = 50;
    $scope.noData = false;

    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get("teamLineups", "", $scope.params).then(function() {
            var datasets = StatsRequest.getData();
            $scope.datasets = {
                lineups: datasets.Lineups
            };
            $scope.noData = datasets.Lineups.rowSet.length === 0;
            $scope.isLoading = false
        })
    }
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("runit", function(event) {
        setStatsParams(_teamInfo);
        getStats()
    });
    $scope.$watch("teamInfo", function(teamInfo) {
        /**
         * @var {Object} _teamInfo - Private variable. Declared earlier in this script.
         */
        _teamInfo = teamInfo;
        if (!_teamInfo) {
            return
        }
        setStatsParams(_teamInfo);
        getStats()
    });

    function setStatsParams(teamInfo) {
        $scope.splits = Splits.get([{
            name: "Season",
            initial: _isAllstar ? SEASONS.allstar.Season : SEASONS.teamLineups.Season,
            seasonRange: _isAllstar ? [SEASONS.allstar.SeasonYearFrom, SEASONS.allstar.SeasonYear] : [SEASONS.teamLineups.SeasonYearFrom, teamInfo.MAX_YEAR]
        }, {
            name: "SeasonType",
            initial: _isAllstar ? "All Star" : SEASONS.teamLineups.SeasonType,
            without: ["Pre Season", "All Star"]
        }, {
            name: "PerMode",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "GroupQuantity", "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo"]);
        if (_isAllstar) {
            $scope.splits.Season.options.forEach(function(value, idex, array) {
                value.text = $filter("seasonToSeasonYear")(value.text)
            })
        }
        $scope.params = {
            MeasureType: "Misc",
            LeagueID: "00",
            TeamID: teamInfo.TEAM_ID,
            GroupQuantity: $scope.splits.GroupQuantity.selected.val,
            Season: $scope.splits.Season.selected.val,
            SeasonType: _isAllstar ? "All Star" : $scope.splits.SeasonType.selected.val,
            PerMode: $scope.splits.PerMode.selected.val,
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            GameID: $location.search().GameID || "",
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        }
    }
}]); /*global $, angular, console, stats */
stats.controller("TeamLineupsOpponentCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", "TeamFactory", function($scope, $location, $filter, Splits, SEASONS, StatsRequest, TeamFactory) {
    "use strict";
    /**
     * @var {Boolean} _isAllstar - Private variable. True if $scope.TeamID is an All Star team ID.
     * @var {Object} _teamInfo - Private variable. Defined later by $scope.$watch("teamInfo").
     */
    var _isAllstar = TeamFactory.isAllstar($scope.TeamID);
    var _teamInfo = {};
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.rowsPerPage = 50;
    $scope.noData = false;

    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get("teamLineups", "", $scope.params).then(function() {
            var datasets = StatsRequest.getData();
            $scope.datasets = {
                lineups: datasets.Lineups
            };
            $scope.noData = datasets.Lineups.rowSet.length === 0;
            $scope.isLoading = false
        })
    }
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("runit", function(event) {
        setStatsParams(_teamInfo);
        getStats()
    });
    $scope.$watch("teamInfo", function(teamInfo) {
        /**
         * @var {Object} _teamInfo - Private variable. Declared earlier in this script.
         */
        _teamInfo = teamInfo;
        if (!_teamInfo) {
            return
        }
        setStatsParams(_teamInfo);
        getStats()
    });

    function setStatsParams(teamInfo) {
        $scope.splits = Splits.get([{
            name: "Season",
            initial: _isAllstar ? SEASONS.allstar.Season : SEASONS.teamLineups.Season,
            seasonRange: _isAllstar ? [SEASONS.allstar.SeasonYearFrom, SEASONS.allstar.SeasonYear] : [SEASONS.teamLineups.SeasonYearFrom, teamInfo.MAX_YEAR]
        }, {
            name: "SeasonType",
            initial: _isAllstar ? "All Star" : SEASONS.teamLineups.SeasonType,
            without: ["Pre Season", "All Star"]
        }, {
            name: "PerMode",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "GroupQuantity", "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo"]);
        if (_isAllstar) {
            $scope.splits.Season.options.forEach(function(value, idex, array) {
                value.text = $filter("seasonToSeasonYear")(value.text)
            })
        }
        $scope.params = {
            MeasureType: "Opponent",
            LeagueID: "00",
            TeamID: teamInfo.TEAM_ID,
            GroupQuantity: $scope.splits.GroupQuantity.selected.val,
            Season: $scope.splits.Season.selected.val,
            SeasonType: _isAllstar ? "All Star" : $scope.splits.SeasonType.selected.val,
            PerMode: $scope.splits.PerMode.selected.val,
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            GameID: $location.search().GameID || "",
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        }
    }
}]); /*global $, angular, console, stats */
stats.controller("TeamLineupsScoringCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", "TeamFactory", function($scope, $location, $filter, Splits, SEASONS, StatsRequest, TeamFactory) {
    "use strict";
    /**
     * @var {Boolean} _isAllstar - Private variable. True if $scope.TeamID is an All Star team ID.
     * @var {Object} _teamInfo - Private variable. Defined later by $scope.$watch("teamInfo").
     */
    var _isAllstar = TeamFactory.isAllstar($scope.TeamID);
    var _teamInfo = {};
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.rowsPerPage = 50;
    $scope.noData = false;

    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get("teamLineups", "", $scope.params).then(function() {
            var datasets = StatsRequest.getData();
            $scope.datasets = {
                lineups: datasets.Lineups
            };
            $scope.noData = datasets.Lineups.rowSet.length === 0;
            $scope.isLoading = false
        })
    }
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("runit", function(event) {
        setStatsParams(_teamInfo);
        getStats()
    });
    $scope.$watch("teamInfo", function(teamInfo) {
        /**
         * @var {Object} _teamInfo - Private variable. Declared earlier in this script.
         */
        _teamInfo = teamInfo;
        if (!_teamInfo) {
            return
        }
        setStatsParams(_teamInfo);
        getStats()
    });

    function setStatsParams(teamInfo) {
        $scope.splits = Splits.get([{
            name: "Season",
            initial: _isAllstar ? SEASONS.allstar.Season : SEASONS.teamLineups.Season,
            seasonRange: _isAllstar ? [SEASONS.allstar.SeasonYearFrom, SEASONS.allstar.SeasonYear] : [SEASONS.teamLineups.SeasonYearFrom, teamInfo.MAX_YEAR]
        }, {
            name: "SeasonType",
            initial: _isAllstar ? "All Star" : SEASONS.teamLineups.SeasonType,
            without: ["Pre Season", "All Star"]
        }, {
            name: "PerMode",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "GroupQuantity", "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo"]);
        if (_isAllstar) {
            $scope.splits.Season.options.forEach(function(value, idex, array) {
                value.text = $filter("seasonToSeasonYear")(value.text)
            })
        }
        $scope.params = {
            MeasureType: "Scoring",
            LeagueID: "00",
            TeamID: teamInfo.TEAM_ID,
            GroupQuantity: $scope.splits.GroupQuantity.selected.val,
            Season: $scope.splits.Season.selected.val,
            SeasonType: _isAllstar ? "All Star" : $scope.splits.SeasonType.selected.val,
            PerMode: $scope.splits.PerMode.selected.val,
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            GameID: $location.search().GameID || "",
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        }
    }
}]); /*global $, angular, console, stats */
stats.controller("TeamNavCtrl", ["$scope", "$location", "$route", function($scope, $location, $route) {
    "use strict";
    $scope.$on("$routeChangeSuccess", function(event, routeData) {
        $scope.page = $route.current.page;
        $scope.selected = $scope.pages.filter(function(n) {
            return n.page == $scope.page
        })[0]
    });
    $scope.pages = [{
        page: "profile",
        path: "",
        text: "Profile"
    }, {
        page: "statsTraditional",
        path: "stats/",
        text: "Stats Traditional"
    }, {
        page: "statsAdvanced",
        path: "stats/advanced/",
        text: "Stats Advanced"
    }, {
        page: "statsFourFactors",
        path: "stats/fourfactors/",
        text: "Stats Four Factors"
    }, {
        page: "statsMisc",
        path: "stats/misc/",
        text: "Stats Misc"
    }, {
        page: "statsScoring",
        path: "stats/scoring/",
        text: "Stats Scoring"
    }, {
        page: "statsOpponent",
        path: "stats/opponent/",
        text: "Stats Opponent"
    }, {
        page: "statsShooting",
        path: "stats/shooting/",
        text: "Stats Shooting"
    }, {
        page: "lineupsTraditional",
        path: "lineups/",
        text: "Lineups Traditional"
    }, {
        page: "lineupsAdvanced",
        path: "lineups/advanced/",
        text: "Lineups Advanced"
    }, {
        page: "lineupsFourFactors",
        path: "lineups/fourfactors/",
        text: "Lineups Four Factors"
    }, {
        page: "lineupsMisc",
        path: "lineups/misc",
        text: "Lineups Misc"
    }, {
        page: "lineupsScoring",
        path: "lineups/scoring",
        text: "Lineups Scoring"
    }, {
        page: "lineupsOpponent",
        path: "lineups/opponent",
        text: "Lineups Opponent"
    }, {
        page: "playersTraditional",
        path: "players/",
        text: "Players Traditional"
    }, {
        page: "playersAdvanced",
        path: "players/advanced",
        text: "Players Advanced"
    }, {
        page: "playersMisc",
        path: "players/misc",
        text: "Players Misc"
    }, {
        page: "playersScoring",
        path: "players/scoring",
        text: "Players Scoring"
    }, {
        page: "playersUsage",
        path: "players/usage",
        text: "Players Usage"
    }, {
        page: "onoffcourtTraditional",
        path: "onoffcourt/",
        text: "On/Off Court Traditional"
    }, {
        page: "onoffcourtAdvanced",
        path: "onoffcourt/advanced",
        text: "On/Off Court Advanced"
    }, {
        page: "onoffcourtFourFactors",
        path: "onoffcourt/fourfactors",
        text: "On/Off Court Four Factors"
    }, {
        page: "onoffcourtMisc",
        path: "onoffcourt/misc",
        text: "On/Off Court Misc"
    }, {
        page: "onoffcourtScoring",
        path: "onoffcourt/scoring",
        text: "On/Off Court Scoring"
    }, {
        page: "onoffcourtOpponent",
        path: "onoffcourt/opponent",
        text: "On/Off Court Opponent"
    }, {
        page: "onoffcourtSummary",
        path: "onoffcourt/summary",
        text: "On/Off Court Summary"
    }, {
        page: "seasons",
        path: "seasons/",
        text: "Seasons"
    }, {
        page: "gamelogs",
        path: "gamelogs/",
        text: "Game Logs"
    }, {
        page: "yearoveryear",
        path: "yearoveryear/",
        text: "Year Over Year"
    }, {
        page: "trackingdashshots",
        path: "tracking/shots/",
        text: "Tracking Shots"
    }, {
        page: "trackingdashrebounds",
        path: "tracking/rebounds/",
        text: "Tracking Rebounds"
    }, {
        page: "trackingdashpasses",
        path: "tracking/passes/",
        text: "Tracking Passes"
    }];
    $scope.onNavChange = function() {
        $location.path($scope.TeamID + "/" + $scope.selected.path)
    }
}]); /*global $, angular, console, stats */
stats.controller("TeamOnOffCourtAdvancedCtrl", ["$scope", "$location", "$filter", "Splits", "StatsRequest", "SEASONS", "TeamFactory", function($scope, $location, $filter, Splits, StatsRequest, SEASONS, TeamFactory) {
    "use strict";
    /**
     * @var {Boolean} _isAllstar - Private variable. True if $scope.TeamID is an All Star team ID.
     * @var {Object} _teamInfo - Private variable. Defined later by $scope.$watch("teamInfo").
     */
    var _isAllstar = TeamFactory.isAllstar($scope.TeamID);
    var _teamInfo = {};
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;

    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get("teamPlayerOnOffDetails", "", $scope.params).then(function() {
            var datasets = StatsRequest.getResults();
            $scope.overall = datasets.slice(0, 1);
            $scope.players = datasets.slice(1);
            $scope.noData = datasets[0].rowSet.length === 0;
            $scope.isLoading = false
        })
    }
    $scope.$on("runit", function(event) {
        setStatsParams(_teamInfo);
        getStats()
    });
    $scope.$watch("teamInfo", function(teamInfo) {
        /**
         * @var {Object} _teamInfo - Private variable. Declared earlier in this script.
         */
        _teamInfo = teamInfo;
        if (!_teamInfo) {
            return
        }
        setStatsParams(_teamInfo);
        getStats()
    });

    function setStatsParams(teamInfo) {
        $scope.splits = Splits.get([{
            name: "Season",
            initial: _isAllstar ? SEASONS.allstar.Season : SEASONS.teamOnOffCourt.Season,
            seasonRange: _isAllstar ? [SEASONS.allstar.SeasonYearFrom, SEASONS.allstar.SeasonYear] : [SEASONS.teamOnOffCourt.SeasonYearFrom, teamInfo.MAX_YEAR]
        }, {
            name: "SeasonType",
            initial: _isAllstar ? "All Star" : SEASONS.teamOnOffCourt.SeasonType,
            without: ["Pre Season", "All Star"]
        }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo"]);
        if (_isAllstar) {
            $scope.splits.Season.options.forEach(function(value, idex, array) {
                value.text = $filter("seasonToSeasonYear")(value.text)
            })
        }
        $scope.params = {
            MeasureType: "Advanced",
            LeagueID: "00",
            TeamID: teamInfo.TEAM_ID,
            Season: $scope.splits.Season.selected.val,
            SeasonType: _isAllstar ? "All Star" : $scope.splits.SeasonType.selected.val,
            PerMode: "Totals",
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        }
    }
}]); /*global $, angular, console, stats */
stats.controller("TeamOnOffCourtBaseCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", "TeamFactory", function($scope, $location, $filter, Splits, SEASONS, StatsRequest, TeamFactory) {
    "use strict";
    /**
     * @var {Boolean} _isAllstar - Private variable. True if $scope.TeamID is an All Star team ID.
     * @var {Object} _teamInfo - Private variable. Defined later by $scope.$watch("teamInfo").
     */
    var _isAllstar = TeamFactory.isAllstar($scope.TeamID);
    var _teamInfo = {};
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;

    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get("teamPlayerOnOffDetails", "", $scope.params).then(function() {
            var datasets = StatsRequest.getResults();
            $scope.overall = datasets.slice(0, 1);
            $scope.players = datasets.slice(1);
            $scope.noData = datasets[0].rowSet.length === 0;
            $scope.isLoading = false
        })
    }
    $scope.$on("runit", function(event) {
        setStatsParams(_teamInfo);
        getStats()
    });
    $scope.$watch("teamInfo", function(teamInfo) {
        /**
         * @var {Object} _teamInfo - Private variable. Declared earlier in this script.
         */
        _teamInfo = teamInfo;
        if (!_teamInfo) {
            return
        }
        setStatsParams(_teamInfo);
        getStats()
    });

    function setStatsParams(teamInfo) {
        $scope.splits = Splits.get([{
            name: "Season",
            initial: _isAllstar ? SEASONS.allstar.Season : SEASONS.teamOnOffCourt.Season,
            seasonRange: _isAllstar ? [SEASONS.allstar.SeasonYearFrom, SEASONS.allstar.SeasonYear] : [SEASONS.teamOnOffCourt.SeasonYearFrom, teamInfo.MAX_YEAR]
        }, {
            name: "SeasonType",
            initial: _isAllstar ? "All Star" : SEASONS.teamOnOffCourt.SeasonType,
            without: ["Pre Season", "All Star"]
        }, {
            name: "PerMode",
            initial: "Per48",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo"]);
        if (_isAllstar) {
            $scope.splits.Season.options.forEach(function(value, idex, array) {
                value.text = $filter("seasonToSeasonYear")(value.text)
            })
        }
        $scope.params = {
            MeasureType: "Base",
            LeagueID: "00",
            TeamID: teamInfo.TEAM_ID,
            Season: $scope.splits.Season.selected.val,
            SeasonType: _isAllstar ? "All Star" : $scope.splits.SeasonType.selected.val,
            PerMode: $scope.splits.PerMode.selected.val,
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        }
    }
}]); /*global $, angular, console, stats */
stats.controller("TeamOnOffCourtFourFactorsCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", "TeamFactory", function($scope, $location, $filter, Splits, SEASONS, StatsRequest, TeamFactory) {
    "use strict";
    /**
     * @var {Boolean} _isAllstar - Private variable. True if $scope.TeamID is an All Star team ID.
     * @var {Object} _teamInfo - Private variable. Defined later by $scope.$watch("teamInfo").
     */
    var _isAllstar = TeamFactory.isAllstar($scope.TeamID);
    var _teamInfo = {};
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;

    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get("teamPlayerOnOffDetails", "", $scope.params).then(function() {
            var datasets = StatsRequest.getResults();
            $scope.overall = datasets.slice(0, 1);
            $scope.players = datasets.slice(1);
            $scope.noData = datasets[0].rowSet.length === 0;
            $scope.isLoading = false
        })
    }
    $scope.$on("runit", function(event) {
        setStatsParams(_teamInfo);
        getStats()
    });
    $scope.$watch("teamInfo", function(teamInfo) {
        /**
         * @var {Object} _teamInfo - Private variable. Declared earlier in this script.
         */
        _teamInfo = teamInfo;
        if (!_teamInfo) {
            return
        }
        setStatsParams(_teamInfo);
        getStats()
    });

    function setStatsParams(teamInfo) {
        $scope.splits = Splits.get([{
            name: "Season",
            initial: _isAllstar ? SEASONS.allstar.Season : SEASONS.teamOnOffCourt.Season,
            seasonRange: _isAllstar ? [SEASONS.allstar.SeasonYearFrom, SEASONS.allstar.SeasonYear] : [SEASONS.teamOnOffCourt.SeasonYearFrom, teamInfo.MAX_YEAR]
        }, {
            name: "SeasonType",
            initial: _isAllstar ? "All Star" : SEASONS.teamOnOffCourt.SeasonType,
            without: ["Pre Season", "All Star"]
        }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo"]);
        if (_isAllstar) {
            $scope.splits.Season.options.forEach(function(value, idex, array) {
                value.text = $filter("seasonToSeasonYear")(value.text)
            })
        }
        $scope.params = {
            MeasureType: "Four Factors",
            LeagueID: "00",
            TeamID: teamInfo.TEAM_ID,
            Season: $scope.splits.Season.selected.val,
            SeasonType: _isAllstar ? "All Star" : $scope.splits.SeasonType.selected.val,
            PerMode: "Totals",
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        }
    }
}]); /*global $, angular, console, stats */
stats.controller("TeamOnOffCourtMiscCtrl", ["$scope", "$location", "$filter", "Splits", "StatsRequest", "SEASONS", "TeamFactory", function($scope, $location, $filter, Splits, StatsRequest, SEASONS, TeamFactory) {
    "use strict";
    /**
     * @var {Boolean} _isAllstar - Private variable. True if $scope.TeamID is an All Star team ID.
     * @var {Object} _teamInfo - Private variable. Defined later by $scope.$watch("teamInfo").
     */
    var _isAllstar = TeamFactory.isAllstar($scope.TeamID);
    var _teamInfo = {};
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;

    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get("teamPlayerOnOffDetails", "", $scope.params).then(function() {
            var datasets = StatsRequest.getResults();
            $scope.overall = datasets.slice(0, 1);
            $scope.players = datasets.slice(1);
            $scope.noData = datasets[0].rowSet.length === 0;
            $scope.isLoading = false
        })
    }
    $scope.$on("runit", function(event) {
        setStatsParams(_teamInfo);
        getStats()
    });
    $scope.$watch("teamInfo", function(teamInfo) {
        /**
         * @var {Object} _teamInfo - Private variable. Declared earlier in this script.
         */
        _teamInfo = teamInfo;
        if (!_teamInfo) {
            return
        }
        setStatsParams(_teamInfo);
        getStats()
    });

    function setStatsParams(teamInfo) {
        $scope.splits = Splits.get([{
            name: "Season",
            initial: _isAllstar ? SEASONS.allstar.Season : SEASONS.teamOnOffCourt.Season,
            seasonRange: _isAllstar ? [SEASONS.allstar.SeasonYearFrom, SEASONS.allstar.SeasonYear] : [SEASONS.teamOnOffCourt.SeasonYearFrom, teamInfo.MAX_YEAR]
        }, {
            name: "SeasonType",
            initial: _isAllstar ? "All Star" : SEASONS.teamOnOffCourt.SeasonType,
            without: ["Pre Season", "All Star"]
        }, {
            name: "PerMode",
            initial: "Totals",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo"]);
        if (_isAllstar) {
            $scope.splits.Season.options.forEach(function(value, idex, array) {
                value.text = $filter("seasonToSeasonYear")(value.text)
            })
        }
        $scope.params = {
            MeasureType: "Misc",
            LeagueID: "00",
            TeamID: teamInfo.TEAM_ID,
            Season: $scope.splits.Season.selected.val,
            SeasonType: _isAllstar ? "All Star" : $scope.splits.SeasonType.selected.val,
            PerMode: $scope.splits.PerMode.selected.val,
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        }
    }
}]); /*global $, angular, console, stats */
stats.controller("TeamOnOffCourtOpponentCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", "TeamFactory", function($scope, $location, $filter, Splits, SEASONS, StatsRequest, TeamFactory) {
    "use strict";
    /**
     * @var {Boolean} _isAllstar - Private variable. True if $scope.TeamID is an All Star team ID.
     * @var {Object} _teamInfo - Private variable. Defined later by $scope.$watch("teamInfo").
     */
    var _isAllstar = TeamFactory.isAllstar($scope.TeamID);
    var _teamInfo = {};
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;

    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get("teamPlayerOnOffDetails", "", $scope.params).then(function() {
            var datasets = StatsRequest.getResults();
            $scope.overall = datasets.slice(0, 1);
            $scope.players = datasets.slice(1);
            $scope.noData = datasets[0].rowSet.length === 0;
            $scope.isLoading = false
        })
    }
    $scope.$on("runit", function(event) {
        setStatsParams(_teamInfo);
        getStats()
    });
    $scope.$watch("teamInfo", function(teamInfo) {
        /**
         * @var {Object} _teamInfo - Private variable. Declared earlier in this script.
         */
        _teamInfo = teamInfo;
        if (!_teamInfo) {
            return
        }
        setStatsParams(_teamInfo);
        getStats()
    });

    function setStatsParams(teamInfo) {
        $scope.splits = Splits.get([{
            name: "Season",
            initial: _isAllstar ? SEASONS.allstar.Season : SEASONS.teamOnOffCourt.Season,
            seasonRange: _isAllstar ? [SEASONS.allstar.SeasonYearFrom, SEASONS.allstar.SeasonYear] : [SEASONS.teamOnOffCourt.SeasonYearFrom, teamInfo.MAX_YEAR]
        }, {
            name: "SeasonType",
            initial: _isAllstar ? "All Star" : SEASONS.teamOnOffCourt.SeasonType,
            without: ["Pre Season", "All Star"]
        }, {
            name: "PerMode",
            initial: "Per48",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo"]);
        if (_isAllstar) {
            $scope.splits.Season.options.forEach(function(value, idex, array) {
                value.text = $filter("seasonToSeasonYear")(value.text)
            })
        }
        $scope.params = {
            MeasureType: "Opponent",
            LeagueID: "00",
            TeamID: teamInfo.TEAM_ID,
            Season: $scope.splits.Season.selected.val,
            SeasonType: _isAllstar ? "All Star" : $scope.splits.SeasonType.selected.val,
            PerMode: $scope.splits.PerMode.selected.val,
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        }
    }
}]); /*global $, angular, console, stats */
stats.controller("TeamOnOffCourtScoringCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", "TeamFactory", function($scope, $location, $filter, Splits, SEASONS, StatsRequest, TeamFactory) {
    "use strict";
    /**
     * @var {Boolean} _isAllstar - Private variable. True if $scope.TeamID is an All Star team ID.
     * @var {Object} _teamInfo - Private variable. Defined later by $scope.$watch("teamInfo").
     */
    var _isAllstar = TeamFactory.isAllstar($scope.TeamID);
    var _teamInfo = {};
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;

    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get("teamPlayerOnOffDetails", "", $scope.params).then(function() {
            var datasets = StatsRequest.getResults();
            $scope.overall = datasets.slice(0, 1);
            $scope.players = datasets.slice(1);
            $scope.noData = datasets[0].rowSet.length === 0;
            $scope.isLoading = false
        })
    }
    $scope.$on("runit", function(event) {
        setStatsParams(_teamInfo);
        getStats()
    });
    $scope.$watch("teamInfo", function(teamInfo) {
        /**
         * @var {Object} _teamInfo - Private variable. Declared earlier in this script.
         */
        _teamInfo = teamInfo;
        if (!_teamInfo) {
            return
        }
        setStatsParams(_teamInfo);
        getStats()
    });

    function setStatsParams(teamInfo) {
        $scope.splits = Splits.get([{
            name: "Season",
            initial: _isAllstar ? SEASONS.allstar.Season : SEASONS.teamOnOffCourt.Season,
            seasonRange: _isAllstar ? [SEASONS.allstar.SeasonYearFrom, SEASONS.allstar.SeasonYear] : [SEASONS.teamOnOffCourt.SeasonYearFrom, teamInfo.MAX_YEAR]
        }, {
            name: "SeasonType",
            initial: _isAllstar ? "All Star" : SEASONS.teamOnOffCourt.SeasonType,
            without: ["Pre Season", "All Star"]
        }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo"]);
        if (_isAllstar) {
            $scope.splits.Season.options.forEach(function(value, idex, array) {
                value.text = $filter("seasonToSeasonYear")(value.text)
            })
        }
        $scope.params = {
            MeasureType: "Scoring",
            LeagueID: "00",
            TeamID: teamInfo.TEAM_ID,
            Season: $scope.splits.Season.selected.val,
            SeasonType: _isAllstar ? "All Star" : $scope.splits.SeasonType.selected.val,
            PerMode: "PerGame",
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        }
    }
}]); /*global $, angular, console, stats */
stats.controller("TeamOnOffCourtSummaryCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", "TeamFactory", function($scope, $location, $filter, Splits, SEASONS, StatsRequest, TeamFactory) {
    "use strict";
    /**
     * @var {Boolean} _isAllstar - Private variable. True if $scope.TeamID is an All Star team ID.
     * @var {Object} _teamInfo - Private variable. Defined later by $scope.$watch("teamInfo").
     */
    var _isAllstar = TeamFactory.isAllstar($scope.TeamID);
    var _teamInfo = {};
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;

    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get("teamPlayerOnOffSummary", "", $scope.params).then(function() {
            var datasets = StatsRequest.getResults();
            $scope.overall = datasets.slice(0, 1);
            $scope.players = datasets.slice(1);
            $scope.noData = datasets[0].rowSet.length === 0;
            $scope.isLoading = false
        })
    }
    $scope.$on("runit", function(event) {
        setStatsParams(_teamInfo);
        getStats()
    });
    $scope.$watch("teamInfo", function(teamInfo) {
        /**
         * @var {Object} _teamInfo - Private variable. Declared earlier in this script.
         */
        _teamInfo = teamInfo;
        if (!_teamInfo) {
            return
        }
        setStatsParams(_teamInfo);
        getStats()
    });

    function setStatsParams(teamInfo) {
        $scope.splits = Splits.get([{
            name: "Season",
            initial: _isAllstar ? SEASONS.allstar.Season : SEASONS.teamOnOffCourt.Season,
            seasonRange: _isAllstar ? [SEASONS.allstar.SeasonYearFrom, SEASONS.allstar.SeasonYear] : [SEASONS.teamOnOffCourt.SeasonYearFrom, teamInfo.MAX_YEAR]
        }, {
            name: "SeasonType",
            initial: _isAllstar ? "All Star" : SEASONS.teamOnOffCourt.SeasonType,
            without: ["Pre Season", "All Star"]
        }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo"]);
        if (_isAllstar) {
            $scope.splits.Season.options.forEach(function(value, idex, array) {
                value.text = $filter("seasonToSeasonYear")(value.text)
            })
        }
        $scope.params = {
            MeasureType: "Base",
            LeagueID: "00",
            TeamID: teamInfo.TEAM_ID,
            Season: $scope.splits.Season.selected.val,
            SeasonType: _isAllstar ? "All Star" : $scope.splits.SeasonType.selected.val,
            PerMode: "Totals",
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        }
    }
}]); /*global $, angular, console, stats */
stats.controller("TeamPlayersAdvancedCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", "TeamFactory", function($scope, $location, $filter, Splits, SEASONS, StatsRequest, TeamFactory) {
    "use strict";
    /**
     * @var {Boolean} _isAllstar - Private variable. True if $scope.TeamID is an All Star team ID.
     * @var {Object} _teamInfo - Private variable. Defined later by $scope.$watch("teamInfo").
     */
    var _isAllstar = TeamFactory.isAllstar($scope.TeamID);
    var _teamInfo = {};
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;

    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get("teamPlayers", "", $scope.params).then(function() {
            var datasets = StatsRequest.getResults();
            $scope.overall = [datasets[0]];
            $scope.players = [datasets[1]];
            $scope.noData = datasets[0].rowSet.length === 0 ? true : false;
            $scope.isLoading = false
        })
    }
    $scope.$on("runit", function(event) {
        setStatsParams(_teamInfo);
        getStats()
    });
    $scope.$watch("teamInfo", function(teamInfo) {
        /**
         * @var {Object} _teamInfo - Private variable. Declared earlier in this script.
         */
        _teamInfo = teamInfo;
        if (!_teamInfo) {
            return
        }
        setStatsParams(_teamInfo);
        getStats()
    });

    function setStatsParams(teamInfo) {
        $scope.splits = Splits.get([{
            name: "Season",
            initial: _isAllstar ? SEASONS.allstar.Season : SEASONS.teamPlayer.Season,
            seasonRange: _isAllstar ? [SEASONS.allstar.SeasonYearFrom, SEASONS.allstar.SeasonYear] : [SEASONS.teamPlayer.SeasonYearFrom, teamInfo.MAX_YEAR]
        }, {
            name: "SeasonType",
            initial: _isAllstar ? "All Star" : SEASONS.teamPlayer.SeasonType,
            without: ["All Star"]
        }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo"]);
        if (_isAllstar) {
            $scope.splits.Season.options.forEach(function(value, idex, array) {
                value.text = $filter("seasonToSeasonYear")(value.text)
            })
        }
        $scope.params = {
            MeasureType: "Advanced",
            LeagueID: "00",
            TeamID: teamInfo.TEAM_ID,
            Season: $scope.splits.Season.selected.val,
            SeasonType: _isAllstar ? "All Star" : $scope.splits.SeasonType.selected.val,
            PerMode: "PerGame",
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        }
    }
}]); /*global $, angular, console, stats */
stats.controller("TeamPlayersBaseCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", "TeamFactory", function($scope, $location, $filter, Splits, SEASONS, StatsRequest, TeamFactory) {
    "use strict";
    /**
     * @var {Boolean} _isAllstar - Private variable. True if $scope.TeamID is an All Star team ID.
     * @var {Object} _teamInfo - Private variable. Defined later by $scope.$watch("teamInfo").
     */
    var _isAllstar = TeamFactory.isAllstar($scope.TeamID);
    var _teamInfo = {};
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;

    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get("teamPlayers", "", $scope.params).then(function() {
            var datasets = StatsRequest.getResults();
            $scope.overall = [datasets[0]];
            $scope.players = [datasets[1]];
            $scope.noData = datasets[0].rowSet.length === 0 ? true : false;
            $scope.isLoading = false;
            if (datasets[0].datatable.length) {
                $scope.noData = false
            }
        })
    }
    $scope.$on("runit", function(event) {
        setStatsParams(_teamInfo);
        getStats()
    });
    $scope.$watch("teamInfo", function(teamInfo) {
        /**
         * @var {Object} _teamInfo - Private variable. Declared earlier in this script.
         */
        _teamInfo = teamInfo;
        if (!_teamInfo) {
            return
        }
        setStatsParams(_teamInfo);
        getStats()
    });

    function setStatsParams(teamInfo) {
        $scope.splits = Splits.get([{
            name: "Season",
            initial: _isAllstar ? SEASONS.allstar.Season : SEASONS.teamPlayer.Season,
            seasonRange: _isAllstar ? [SEASONS.allstar.SeasonYearFrom, SEASONS.allstar.SeasonYear] : [SEASONS.teamPlayer.SeasonYearFrom, teamInfo.MAX_YEAR]
        }, {
            name: "SeasonType",
            initial: _isAllstar ? "All Star" : SEASONS.teamPlayer.SeasonType,
            without: ["All Star"]
        }, {
            name: "PerMode",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo"]);
        if (_isAllstar) {
            $scope.splits.Season.options.forEach(function(value, idex, array) {
                value.text = $filter("seasonToSeasonYear")(value.text)
            })
        }
        $scope.params = {
            MeasureType: "Base",
            LeagueID: "00",
            TeamID: teamInfo.TEAM_ID,
            Season: $scope.splits.Season.selected.val,
            SeasonType: _isAllstar ? "All Star" : $scope.splits.SeasonType.selected.val,
            PerMode: $scope.splits.PerMode.selected.val,
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        }
    }
}]); /*global $, angular, console, stats */
stats.controller("TeamPlayersMiscCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", "TeamFactory", function($scope, $location, $filter, Splits, SEASONS, StatsRequest, TeamFactory) {
    "use strict";
    /**
     * @var {Boolean} _isAllstar - Private variable. True if $scope.TeamID is an All Star team ID.
     * @var {Object} _teamInfo - Private variable. Defined later by $scope.$watch("teamInfo").
     */
    var _isAllstar = TeamFactory.isAllstar($scope.TeamID);
    var _teamInfo = {};
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;

    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get("teamPlayers", "", $scope.params).then(function() {
            var datasets = StatsRequest.getResults();
            $scope.overall = [datasets[0]];
            $scope.players = [datasets[1]];
            $scope.noData = datasets[0].rowSet.length === 0 ? true : false;
            $scope.isLoading = false
        })
    }
    $scope.$on("runit", function(event) {
        setStatsParams(_teamInfo);
        getStats()
    });
    $scope.$watch("teamInfo", function(teamInfo) {
        /**
         * @var {Object} _teamInfo - Private variable. Declared earlier in this script.
         */
        _teamInfo = teamInfo;
        if (!_teamInfo) {
            return
        }
        setStatsParams(_teamInfo);
        getStats()
    });

    function setStatsParams(teamInfo) {
        $scope.splits = Splits.get([{
            name: "Season",
            initial: _isAllstar ? SEASONS.allstar.Season : SEASONS.teamPlayer.Season,
            seasonRange: _isAllstar ? [SEASONS.allstar.SeasonYearFrom, SEASONS.allstar.SeasonYear] : [SEASONS.teamPlayer.SeasonYearFrom, teamInfo.MAX_YEAR]
        }, {
            name: "SeasonType",
            initial: _isAllstar ? "All Star" : SEASONS.teamPlayer.SeasonType,
            without: ["All Star"]
        }, {
            name: "PerMode",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo"]);
        if (_isAllstar) {
            $scope.splits.Season.options.forEach(function(value, idex, array) {
                value.text = $filter("seasonToSeasonYear")(value.text)
            })
        }
        $scope.params = {
            MeasureType: "Misc",
            LeagueID: "00",
            TeamID: teamInfo.TEAM_ID,
            Season: $scope.splits.Season.selected.val,
            SeasonType: _isAllstar ? "All Star" : $scope.splits.SeasonType.selected.val,
            PerMode: $scope.splits.PerMode.selected.val,
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        }
    }
}]); /*global $, angular, console, stats */
stats.controller("TeamPlayersScoringCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", "TeamFactory", function($scope, $location, $filter, Splits, SEASONS, StatsRequest, TeamFactory) {
    "use strict";
    /**
     * @var {Boolean} _isAllstar - Private variable. True if $scope.TeamID is an All Star team ID.
     * @var {Object} _teamInfo - Private variable. Defined later by $scope.$watch("teamInfo").
     */
    var _isAllstar = TeamFactory.isAllstar($scope.TeamID);
    var _teamInfo = {};
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;

    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get("teamPlayers", "", $scope.params).then(function() {
            var datasets = StatsRequest.getResults();
            $scope.overall = [datasets[0]];
            $scope.players = [datasets[1]];
            $scope.noData = datasets[0].rowSet.length === 0 ? true : false;
            $scope.isLoading = false
        })
    }
    $scope.$on("runit", function(event) {
        setStatsParams(_teamInfo);
        getStats()
    });
    $scope.$watch("teamInfo", function(teamInfo) {
        /**
         * @var {Object} _teamInfo - Private variable. Declared earlier in this script.
         */
        _teamInfo = teamInfo;
        if (!_teamInfo) {
            return
        }
        setStatsParams(_teamInfo);
        getStats()
    });

    function setStatsParams(teamInfo) {
        $scope.splits = Splits.get([{
            name: "Season",
            initial: _isAllstar ? SEASONS.allstar.Season : SEASONS.teamPlayer.Season,
            seasonRange: _isAllstar ? [SEASONS.allstar.SeasonYearFrom, SEASONS.allstar.SeasonYear] : [SEASONS.teamPlayer.SeasonYearFrom, teamInfo.MAX_YEAR]
        }, {
            name: "SeasonType",
            initial: _isAllstar ? "All Star" : SEASONS.teamPlayer.SeasonType,
            without: ["All Star"]
        }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo"]);
        if (_isAllstar) {
            $scope.splits.Season.options.forEach(function(value, idex, array) {
                value.text = $filter("seasonToSeasonYear")(value.text)
            })
        }
        $scope.params = {
            MeasureType: "Scoring",
            LeagueID: "00",
            TeamID: teamInfo.TEAM_ID,
            Season: $scope.splits.Season.selected.val,
            SeasonType: _isAllstar ? "All Star" : $scope.splits.SeasonType.selected.val,
            PerMode: "PerGame",
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        }
    }
}]); /*global $, angular, console, stats */
stats.controller("TeamPlayersUsageCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", "TeamFactory", function($scope, $location, $filter, Splits, SEASONS, StatsRequest, TeamFactory) {
    "use strict";
    /**
     * @var {Boolean} _isAllstar - Private variable. True if $scope.TeamID is an All Star team ID.
     * @var {Object} _teamInfo - Private variable. Defined later by $scope.$watch("teamInfo").
     */
    var _isAllstar = TeamFactory.isAllstar($scope.TeamID);
    var _teamInfo = {};
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;

    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get("teamPlayers", "", $scope.params).then(function() {
            var datasets = StatsRequest.getResults();
            $scope.overall = [datasets[0]];
            $scope.players = [datasets[1]];
            $scope.noData = datasets[0].rowSet.length === 0 ? true : false;
            $scope.isLoading = false
        })
    }
    $scope.$on("runit", function(event) {
        setStatsParams(_teamInfo);
        getStats()
    });
    $scope.$watch("teamInfo", function(teamInfo) {
        /**
         * @var {Object} _teamInfo - Private variable. Declared earlier in this script.
         */
        _teamInfo = teamInfo;
        if (!_teamInfo) {
            return
        }
        setStatsParams(_teamInfo);
        getStats()
    });

    function setStatsParams(teamInfo) {
        $scope.splits = Splits.get([{
            name: "Season",
            initial: _isAllstar ? SEASONS.allstar.Season : SEASONS.teamPlayer.Season,
            seasonRange: _isAllstar ? [SEASONS.allstar.SeasonYearFrom, SEASONS.allstar.SeasonYear] : [SEASONS.teamPlayer.SeasonYearFrom, teamInfo.MAX_YEAR]
        }, {
            name: "SeasonType",
            initial: _isAllstar ? "All Star" : SEASONS.teamPlayer.SeasonType,
            without: ["All Star"]
        }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo"]);
        if (_isAllstar) {
            $scope.splits.Season.options.forEach(function(value, idex, array) {
                value.text = $filter("seasonToSeasonYear")(value.text)
            })
        }
        $scope.params = {
            MeasureType: "Usage",
            LeagueID: "00",
            TeamID: teamInfo.TEAM_ID,
            Season: $scope.splits.Season.selected.val,
            SeasonType: _isAllstar ? "All Star" : $scope.splits.SeasonType.selected.val,
            PerMode: "Totals",
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        }
    }
}]); /*global $, angular, console, stats */
stats.controller("TeamProfileCtrl", ["$scope", "$location", "$http", "TeamFactory", function($scope, $location, $http, TeamFactory) {
    "use strict";
    var _isAllstar = TeamFactory.isAllstar($scope.TeamID);
    $scope.isLoading = true;
    var joinLeaderData = function(headers, fields) {
        var obj = {};
        for (var i in headers) {
            obj[headers[i]] = fields[i]
        }
        return obj
    };
    $scope.$on("coachesLoaded", function(event, coaches) {
        $scope.coaches = coaches
    });
    $scope.$watch("teamInfo", function(teamInfo) {
        if (!teamInfo) {
            return
        }
        if (!_isAllstar) {
            var profileURL = "/feeds/teams/profile/" + teamInfo.TEAM_ID + "_TeamProfile.js";
            var historical = "/feeds/teams/stats/" + teamInfo.TEAM_ID + "_HistoricalLeaders.js";
            var fantasyNews = "/feeds/RotoWirePlayers-583598/" + teamInfo.TEAM_ID + ".json";
            $http({
                method: "GET",
                url: profileURL
            }).then(function(response) {
                var profile = response.data.TeamDetails;
                $scope.profile = {
                    details: profile[0].Details[0],
                    history: profile[1].History,
                    social: profile[2].SocialSites,
                    awards: {
                        championships: profile[3].Awards[0].Championships,
                        conferences: profile[3].Awards[1].ConferenceTitles,
                        divisions: profile[3].Awards[2].DivitionalTitles
                    },
                    hof: profile[4].HallOfFameInductees,
                    retired: profile[5].RetiredMembers
                }
            });
            $http({
                method: "GET",
                url: historical
            }).then(function(response) {
                var leaders = response.data.resultSets[0];
                $scope.leaders = joinLeaderData(leaders.headers, leaders.rowSet[0])
            });
            $http({
                method: "GET",
                url: fantasyNews
            }).then(function(response) {
                var fantasynews = response.data.TeamRotowires;
                $scope.fantasynews = fantasynews.slice(0, 3)
            })
        }
    })
}]); /*global $, angular, console, stats */
stats.controller("TeamRosterCtrl", ["$scope", "$location", "$rootScope", "$filter", "Splits", "SEASONS", "StatsRequest", "TeamFactory", function($scope, $location, $rootScope, $filter, Splits, SEASONS, StatsRequest, TeamFactory) {
    "use strict";
    $scope.isLoading = true;
    $scope.showSplits = false;

    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get("teamCommonRoster", "", $scope.params).then(function() {
            var datasets = StatsRequest.getResults();
            $scope.datasets = [datasets[0]];
            $rootScope.$broadcast("coachesLoaded", datasets[1].datatable);
            $scope.isLoading = false
        })
    }
    $scope.$on("runit", function(event) {
        getStats()
    });
    $scope.$watch("teamInfo", function(teamInfo) {
        var _isAllstar = TeamFactory.isAllstar($scope.TeamID);
        if (!teamInfo) {
            return
        }
        $scope.splits = Splits.get([{
            name: "Season",
            initial: _isAllstar ? SEASONS.allstarRoster.Season : SEASONS.teamRoster.Season,
            seasonRange: _isAllstar ? [SEASONS.leagueAllstar.SeasonYearFrom, SEASONS.leagueAllstar.SeasonYear] : [teamInfo.MIN_YEAR, teamInfo.MAX_YEAR]
        }]);
        // Declare params object for later use
        $scope.params = {};
        if (_isAllstar) {
            // Declare property on existing params object
            $scope.params.SeasonType = "All Star";
            $scope.splits.Season.options.forEach(function(value, idex, array) {
                value.text = $filter("seasonToSeasonYear")(value.text)
            })
        }
        // Declare property on existing params object
        $scope.params.LeagueID = "00";
        $scope.params.TeamID = teamInfo.TEAM_ID;
        $scope.params.Season = $scope.splits.Season.selected.val;
        getStats()
    })
}]); /*global $, angular, console, stats */
stats.controller("TeamSeasonsCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", "TeamFactory", function($scope, $location, $filter, Splits, SEASONS, StatsRequest, TeamFactory) {
    "use strict";
    var _isAllstar = TeamFactory.isAllstar($scope.TeamID);
    $scope.isLoading = true;
    $scope.rowsPerPage = 100;
    $scope.noData = false;
    $scope.datasets = {};
    if (_isAllstar) {
        $scope.noData = true
    }

    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get("teamSeason", "", $scope.params).then(function() {
            $scope.datasets = StatsRequest.getData();
            $scope.isLoading = false
        })
    }
    $scope.$watch("teamInfo", function(teamInfo) {
        if (!teamInfo) {
            return
        }
        $scope.params = {
            LeagueID: "00",
            TeamID: teamInfo.TEAM_ID,
            PerMode: "Totals",
            SeasonType: "Regular Season"
        };
        getStats()
    })
}]); /*global $, angular, console, stats */
stats.controller("TeamStatsAdvancedCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", "TeamFactory", function($scope, $location, $filter, Splits, SEASONS, StatsRequest, TeamFactory) {
    "use strict";
    /**
     * @var {Boolean} _isAllstar - Private variable. True if $scope.TeamID is an All Star team ID.
     * @var {Object} _teamInfo - Private variable. Defined later by $scope.$watch("teamInfo").
     */
    var _isAllstar = TeamFactory.isAllstar($scope.TeamID);
    var _teamInfo = {};
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;
    $scope.feeds = [{
        name: "General Splits",
        val: "general",
        url: "teamGeneralSplits"
    }, {
        name: "Opponent Splits",
        val: "opp",
        url: "teamOpponentSplits"
    }, {
        name: "LastNGames Splits",
        val: "lastn",
        url: "teamLastNGamesSplits"
    }, {
        name: "In Game Splits",
        val: "ingame",
        url: "teamInGameSplits"
    }, {
        name: "Clutch Splits",
        val: "clutch",
        url: "teamClutchSplits"
    }, {
        name: "Team Performance Splits",
        val: "teamperf",
        url: "teamPerformanceSplits"
    }, {
        name: "Year over Year",
        val: "yoy",
        url: "teamYearOverYearSplits"
    }];
    if ($location.search().Split) {
        var split = $filter("filter")($scope.feeds, {
            val: $location.search().Split
        })
    }
    $scope.feed = split ? split[0] : $scope.feeds[0];

    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get($scope.feed.url, "", $scope.params).then(function() {
            $scope.datasets = StatsRequest.getResults();
            $scope.noData = $scope.datasets[0].rowSet.length === 0 ? true : false;
            $scope.isLoading = false
        })
    }
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("runit", function(event) {
        // deep link split feed
        if ($scope.feed == $scope.feeds[0]) {
            $location.search("Split", null)
        } else {
            $location.search("Split", $scope.feed.val)
        }
        setStatsParams(_teamInfo);
        getStats()
    });
    $scope.$watch("teamInfo", function(teamInfo) {
        /**
         * @var {Object} _teamInfo - Private variable. Declared earlier in this script.
         */
        _teamInfo = teamInfo;
        if (!_teamInfo) {
            return
        }
        setStatsParams(_teamInfo);
        getStats()
    });

    function setStatsParams(teamInfo) {
        $scope.splits = Splits.get([{
            name: "Season",
            initial: _isAllstar ? SEASONS.allstar.Season : SEASONS.teamStats.Season,
            seasonRange: _isAllstar ? [SEASONS.allstar.SeasonYearFrom, SEASONS.allstar.SeasonYear] : [SEASONS.teamStats.SeasonYearFrom, teamInfo.MAX_YEAR]
        }, {
            name: "SeasonType",
            initial: _isAllstar ? "All Star" : SEASONS.teamStats.SeasonType,
            without: ["All Star"]
        }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "PORound", "ShotClockRange", "DateFrom", "DateTo"]);
        if (_isAllstar) {
            $scope.splits.Season.options.forEach(function(value, idex, array) {
                value.text = $filter("seasonToSeasonYear")(value.text)
            })
        }
        $scope.params = {
            MeasureType: "Advanced",
            LeagueID: "00",
            TeamID: teamInfo.TEAM_ID,
            Season: $scope.splits.Season.selected.val,
            SeasonType: _isAllstar ? "All Star" : $scope.splits.SeasonType.selected.val,
            PerMode: "PerGame",
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            PORound: $scope.splits.PORound.selected.val,
            ShotClockRange: $scope.splits.ShotClockRange.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        }
    }
}]); /*global $, angular, console, stats */
stats.controller("TeamStatsBaseCtrl", ["$scope", "$location", "$filter", "Splits", "StatsRequest", "SEASONS", "TeamFactory", function($scope, $location, $filter, Splits, StatsRequest, SEASONS, TeamFactory) {
    "use strict";
    /**
     * @var {Boolean} _isAllstar - Private variable. True if $scope.TeamID is an All Star team ID.
     * @var {Object} _teamInfo - Private variable. Defined later by $scope.$watch("teamInfo").
     */
    var _isAllstar = TeamFactory.isAllstar($scope.TeamID);
    var _teamInfo = {};
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.hasShotchart = true;
    $scope.hasVideo = true;
    $scope.hasTracking = false;
    $scope.noData = false;
    $scope.feeds = [{
        name: "General Splits",
        val: "general",
        url: "teamGeneralSplits"
    }, {
        name: "Opponent Splits",
        val: "opp",
        url: "teamOpponentSplits"
    }, {
        name: "LastNGames Splits",
        val: "lastn",
        url: "teamLastNGamesSplits"
    }, {
        name: "In Game Splits",
        val: "ingame",
        url: "teamInGameSplits"
    }, {
        name: "Clutch Splits",
        val: "clutch",
        url: "teamClutchSplits"
    }, {
        name: "Team Performance Splits",
        val: "teamperf",
        url: "teamPerformanceSplits"
    }, {
        name: "Year over Year",
        val: "yoy",
        url: "teamYearOverYearSplits"
    }];
    if ($location.search().Split) {
        var split = $filter("filter")($scope.feeds, {
            val: $location.search().Split
        })
    }
    $scope.feed = split ? split[0] : $scope.feeds[0];

    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get($scope.feed.url, "", $scope.params).then(function() {
            $scope.datasets = StatsRequest.getResults();
            $scope.noData = $scope.datasets[0].rowSet.length === 0 ? true : false;
            $scope.isLoading = false
        })
    }
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("runit", function(event) {
        // deep link split feed
        if ($scope.feed == $scope.feeds[0]) {
            $location.search("Split", null)
        } else {
            $location.search("Split", $scope.feed.val)
        }
        setStatsParams(_teamInfo);
        getStats()
    });
    $scope.$watch("teamInfo", function(teamInfo) {
        /**
         * @var {Object} _teamInfo - Private variable. Declared earlier in this script.
         */
        _teamInfo = teamInfo;
        if (!_teamInfo) {
            return
        }
        setStatsParams(_teamInfo);
        getStats()
    });

    function setStatsParams(teamInfo) {
        $scope.splits = Splits.get([{
            name: "Season",
            initial: _isAllstar ? SEASONS.allstar.Season : SEASONS.teamStats.Season,
            seasonRange: _isAllstar ? [SEASONS.allstar.SeasonYearFrom, SEASONS.allstar.SeasonYear] : [SEASONS.teamStats.SeasonYearFrom, teamInfo.MAX_YEAR]
        }, {
            name: "SeasonType",
            initial: _isAllstar ? "All Star" : SEASONS.teamStats.SeasonType,
            without: ["All Star"]
        }, {
            name: "PerMode",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "PORound", "ShotClockRange", "DateFrom", "DateTo"]);
        if (_isAllstar) {
            $scope.splits.Season.options.forEach(function(value, idex, array) {
                value.text = $filter("seasonToSeasonYear")(value.text)
            })
        }
        $scope.params = {
            MeasureType: "Base",
            LeagueID: "00",
            TeamID: teamInfo.TEAM_ID,
            Season: $scope.splits.Season.selected.val,
            SeasonType: _isAllstar ? "All Star" : $scope.splits.SeasonType.selected.val,
            PerMode: $scope.splits.PerMode.selected.val,
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            PORound: $scope.splits.PORound.selected.val,
            ShotClockRange: $scope.splits.ShotClockRange.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        }
    }
}]); /*global $, angular, console, stats */
stats.controller("TeamStatsFourFactorsCtrl", ["$scope", "$location", "$filter", "Splits", "StatsRequest", "SEASONS", "TeamFactory", function($scope, $location, $filter, Splits, StatsRequest, SEASONS, TeamFactory) {
    "use strict";
    /**
     * @var {Boolean} _isAllstar - Private variable. True if $scope.TeamID is an All Star team ID.
     * @var {Object} _teamInfo - Private variable. Defined later by $scope.$watch("teamInfo").
     */
    var _isAllstar = TeamFactory.isAllstar($scope.TeamID);
    var _teamInfo = {};
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;
    $scope.feeds = [{
        name: "General Splits",
        val: "general",
        url: "teamGeneralSplits"
    }, {
        name: "Opponent Splits",
        val: "opp",
        url: "teamOpponentSplits"
    }, {
        name: "LastNGames Splits",
        val: "lastn",
        url: "teamLastNGamesSplits"
    }, {
        name: "In Game Splits",
        val: "ingame",
        url: "teamInGameSplits"
    }, {
        name: "Clutch Splits",
        val: "clutch",
        url: "teamClutchSplits"
    }, {
        name: "Team Performance Splits",
        val: "teamperf",
        url: "teamPerformanceSplits"
    }, {
        name: "Year over Year",
        val: "yoy",
        url: "teamYearOverYearSplits"
    }];
    if ($location.search().Split) {
        var split = $filter("filter")($scope.feeds, {
            val: $location.search().Split
        })
    }
    $scope.feed = split ? split[0] : $scope.feeds[0];

    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get($scope.feed.url, "", $scope.params).then(function() {
            $scope.datasets = StatsRequest.getResults();
            $scope.noData = $scope.datasets[0].rowSet.length === 0 ? true : false;
            $scope.isLoading = false
        })
    }
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("runit", function(event) {
        // deep link split feed
        if ($scope.feed == $scope.feeds[0]) {
            $location.search("Split", null)
        } else {
            $location.search("Split", $scope.feed.val)
        }
        setStatsParams(_teamInfo);
        getStats()
    });
    $scope.$watch("teamInfo", function(teamInfo) {
        /**
         * @var {Object} _teamInfo - Private variable. Declared earlier in this script.
         */
        _teamInfo = teamInfo;
        if (!_teamInfo) {
            return
        }
        setStatsParams(_teamInfo);
        getStats()
    });

    function setStatsParams(teamInfo) {
        $scope.splits = Splits.get([{
            name: "Season",
            initial: _isAllstar ? SEASONS.allstar.Season : SEASONS.teamStats.Season,
            seasonRange: _isAllstar ? [SEASONS.allstar.SeasonYearFrom, SEASONS.allstar.SeasonYear] : [SEASONS.teamStats.SeasonYearFrom, teamInfo.MAX_YEAR]
        }, {
            name: "SeasonType",
            initial: _isAllstar ? "All Star" : SEASONS.teamStats.SeasonType,
            without: ["All Star"]
        }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "PORound", "ShotClockRange", "DateFrom", "DateTo"]);
        if (_isAllstar) {
            $scope.splits.Season.options.forEach(function(value, idex, array) {
                value.text = $filter("seasonToSeasonYear")(value.text)
            })
        }
        $scope.params = {
            MeasureType: "Four Factors",
            LeagueID: "00",
            TeamID: teamInfo.TEAM_ID,
            Season: $scope.splits.Season.selected.val,
            SeasonType: _isAllstar ? "All Star" : $scope.splits.SeasonType.selected.val,
            PerMode: "PerGame",
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            PORound: $scope.splits.PORound.selected.val,
            ShotClockRange: $scope.splits.ShotClockRange.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        }
    }
}]); /*global $, angular, console, stats */
stats.controller("TeamStatsMiscCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", "TeamFactory", function($scope, $location, $filter, Splits, SEASONS, StatsRequest, TeamFactory) {
    "use strict";
    /**
     * @var {Boolean} _isAllstar - Private variable. True if $scope.TeamID is an All Star team ID.
     * @var {Object} _teamInfo - Private variable. Defined later by $scope.$watch("teamInfo").
     */
    var _isAllstar = TeamFactory.isAllstar($scope.TeamID);
    var _teamInfo = {};
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;
    $scope.feeds = [{
        name: "General Splits",
        val: "general",
        url: "teamGeneralSplits"
    }, {
        name: "Opponent Splits",
        val: "opp",
        url: "teamOpponentSplits"
    }, {
        name: "LastNGames Splits",
        val: "lastn",
        url: "teamLastNGamesSplits"
    }, {
        name: "In Game Splits",
        val: "ingame",
        url: "teamInGameSplits"
    }, {
        name: "Clutch Splits",
        val: "clutch",
        url: "teamClutchSplits"
    }, {
        name: "Team Performance Splits",
        val: "teamperf",
        url: "teamPerformanceSplits"
    }, {
        name: "Year over Year",
        val: "yoy",
        url: "teamYearOverYearSplits"
    }];
    if ($location.search().Split) {
        var split = $filter("filter")($scope.feeds, {
            val: $location.search().Split
        })
    }
    $scope.feed = split ? split[0] : $scope.feeds[0];

    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get($scope.feed.url, "", $scope.params).then(function() {
            $scope.datasets = StatsRequest.getResults();
            $scope.noData = $scope.datasets[0].rowSet.length === 0 ? true : false;
            $scope.isLoading = false
        })
    }
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("runit", function(event) {
        // deep link split feed
        if ($scope.feed == $scope.feeds[0]) {
            $location.search("Split", null)
        } else {
            $location.search("Split", $scope.feed.val)
        }
        setStatsParams(_teamInfo);
        getStats()
    });
    $scope.$watch("teamInfo", function(teamInfo) {
        /**
         * @var {Object} _teamInfo - Private variable. Declared earlier in this script.
         */
        _teamInfo = teamInfo;
        if (!_teamInfo) {
            return
        }
        setStatsParams(_teamInfo);
        getStats()
    });

    function setStatsParams(teamInfo) {
        $scope.splits = Splits.get([{
            name: "Season",
            initial: _isAllstar ? SEASONS.allstar.Season : SEASONS.teamStats.Season,
            seasonRange: _isAllstar ? [SEASONS.allstar.SeasonYearFrom, SEASONS.allstar.SeasonYear] : [SEASONS.teamStats.SeasonYearFrom, teamInfo.MAX_YEAR]
        }, {
            name: "SeasonType",
            initial: _isAllstar ? "All Star" : SEASONS.teamStats.SeasonType,
            without: ["All Star"]
        }, {
            name: "PerMode",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "PORound", "ShotClockRange", "DateFrom", "DateTo"]);
        if (_isAllstar) {
            $scope.splits.Season.options.forEach(function(value, idex, array) {
                value.text = $filter("seasonToSeasonYear")(value.text)
            })
        }
        $scope.params = {
            MeasureType: "Misc",
            LeagueID: "00",
            TeamID: teamInfo.TEAM_ID,
            Season: $scope.splits.Season.selected.val,
            SeasonType: _isAllstar ? "All Star" : $scope.splits.SeasonType.selected.val,
            PerMode: $scope.splits.PerMode.selected.val,
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            PORound: $scope.splits.PORound.selected.val,
            ShotClockRange: $scope.splits.ShotClockRange.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        }
    }
}]); /*global $, angular, console, stats */
stats.controller("TeamStatsOpponentCtrl", ["$scope", "$location", "$filter", "Splits", "StatsRequest", "SEASONS", "TeamFactory", function($scope, $location, $filter, Splits, StatsRequest, SEASONS, TeamFactory) {
    "use strict";
    /**
     * @var {Boolean} _isAllstar - Private variable. True if $scope.TeamID is an All Star team ID.
     * @var {Object} _teamInfo - Private variable. Defined later by $scope.$watch("teamInfo").
     */
    var _isAllstar = TeamFactory.isAllstar($scope.TeamID);
    var _teamInfo = {};
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;
    $scope.feeds = [{
        name: "General Splits",
        val: "general",
        url: "teamGeneralSplits"
    }, {
        name: "Opponent Splits",
        val: "opp",
        url: "teamOpponentSplits"
    }, {
        name: "LastNGames Splits",
        val: "lastn",
        url: "teamLastNGamesSplits"
    }, {
        name: "In Game Splits",
        val: "ingame",
        url: "teamInGameSplits"
    }, {
        name: "Clutch Splits",
        val: "clutch",
        url: "teamClutchSplits"
    }, {
        name: "Team Performance Splits",
        val: "teamperf",
        url: "teamPerformanceSplits"
    }, {
        name: "Year over Year",
        val: "yoy",
        url: "teamYearOverYearSplits"
    }];
    if ($location.search().Split) {
        var split = $filter("filter")($scope.feeds, {
            val: $location.search().Split
        })
    }
    $scope.feed = split ? split[0] : $scope.feeds[0];

    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get($scope.feed.url, "", $scope.params).then(function() {
            $scope.datasets = StatsRequest.getResults();
            $scope.noData = $scope.datasets[0].rowSet.length === 0 ? true : false;
            $scope.isLoading = false
        })
    }
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("runit", function(event) {
        // deep link split feed
        if ($scope.feed == $scope.feeds[0]) {
            $location.search("Split", null)
        } else {
            $location.search("Split", $scope.feed.val)
        }
        setStatsParams(_teamInfo);
        getStats()
    });
    $scope.$watch("teamInfo", function(teamInfo) {
        /**
         * @var {Object} _teamInfo - Private variable. Declared earlier in this script.
         */
        _teamInfo = teamInfo;
        if (!_teamInfo) {
            return
        }
        setStatsParams(_teamInfo);
        getStats()
    });

    function setStatsParams(teamInfo) {
        $scope.splits = Splits.get([{
            name: "Season",
            initial: _isAllstar ? SEASONS.allstar.Season : SEASONS.teamStats.Season,
            seasonRange: _isAllstar ? [SEASONS.allstar.SeasonYearFrom, SEASONS.allstar.SeasonYear] : [SEASONS.teamStats.SeasonYearFrom, teamInfo.MAX_YEAR]
        }, {
            name: "SeasonType",
            initial: _isAllstar ? "All Star" : SEASONS.teamStats.SeasonType,
            without: ["All Star"]
        }, {
            name: "PerMode",
            include: [{
                val: "Per100Possessions",
                text: "Per 100 Poss"
            }, {
                val: "Per100Plays",
                text: "Per 100 Plays"
            }, {
                val: "Per48",
                text: "Per 48 Minutes"
            }, {
                val: "Per40",
                text: "Per 40 Minutes"
            }, {
                val: "Per36",
                text: "Per 36 Minutes"
            }, {
                val: "PerMinute",
                text: "Per 1 Minute"
            }, {
                val: "PerPossession",
                text: "Per 1 Poss"
            }, {
                val: "PerPlay",
                text: "Per 1 Play"
            }, {
                val: "MinutesPer",
                text: "Minutes Per"
            }]
        }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "PORound", "ShotClockRange", "DateFrom", "DateTo"]);
        if (_isAllstar) {
            $scope.splits.Season.options.forEach(function(value, idex, array) {
                value.text = $filter("seasonToSeasonYear")(value.text)
            })
        }
        $scope.params = {
            MeasureType: "Opponent",
            LeagueID: "00",
            TeamID: teamInfo.TEAM_ID,
            Season: $scope.splits.Season.selected.val,
            SeasonType: _isAllstar ? "All Star" : $scope.splits.SeasonType.selected.val,
            PerMode: $scope.splits.PerMode.selected.val,
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            PORound: $scope.splits.PORound.selected.val,
            ShotClockRange: $scope.splits.ShotClockRange.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        }
    }
}]); /*global $, angular, console, stats */
stats.controller("TeamStatsScoringCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", "TeamFactory", function($scope, $location, $filter, Splits, SEASONS, StatsRequest, TeamFactory) {
    "use strict";
    /**
     * @var {Boolean} _isAllstar - Private variable. True if $scope.TeamID is an All Star team ID.
     * @var {Object} _teamInfo - Private variable. Defined later by $scope.$watch("teamInfo").
     */
    var _isAllstar = TeamFactory.isAllstar($scope.TeamID);
    var _teamInfo = {};
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;
    $scope.feeds = [{
        name: "General Splits",
        val: "general",
        url: "teamGeneralSplits"
    }, {
        name: "Opponent Splits",
        val: "opp",
        url: "teamOpponentSplits"
    }, {
        name: "LastNGames Splits",
        val: "lastn",
        url: "teamLastNGamesSplits"
    }, {
        name: "In Game Splits",
        val: "ingame",
        url: "teamInGameSplits"
    }, {
        name: "Clutch Splits",
        val: "clutch",
        url: "teamClutchSplits"
    }, {
        name: "Team Performance Splits",
        val: "teamperf",
        url: "teamPerformanceSplits"
    }, {
        name: "Year over Year",
        val: "yoy",
        url: "teamYearOverYearSplits"
    }];
    if ($location.search().Split) {
        var split = $filter("filter")($scope.feeds, {
            val: $location.search().Split
        })
    }
    $scope.feed = split ? split[0] : $scope.feeds[0];

    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get($scope.feed.url, "", $scope.params).then(function() {
            $scope.datasets = StatsRequest.getResults();
            $scope.noData = $scope.datasets[0].rowSet.length === 0 ? true : false;
            $scope.isLoading = false
        })
    }
    $scope.$on("customFields", function(event, cf) {
        $scope.customFields = cf
    });
    $scope.$on("runit", function(event) {
        // deep link split feed
        if ($scope.feed == $scope.feeds[0]) {
            $location.search("Split", null)
        } else {
            $location.search("Split", $scope.feed.val)
        }
        setStatsParams(_teamInfo);
        getStats()
    });
    $scope.$watch("teamInfo", function(teamInfo) {
        /**
         * @var {Object} _teamInfo - Private variable. Declared earlier in this script.
         */
        _teamInfo = teamInfo;
        if (!_teamInfo) {
            return
        }
        setStatsParams(_teamInfo);
        getStats()
    });

    function setStatsParams(teamInfo) {
        $scope.splits = Splits.get([{
            name: "Season",
            initial: _isAllstar ? SEASONS.allstar.Season : SEASONS.teamStats.Season,
            seasonRange: _isAllstar ? [SEASONS.allstar.SeasonYearFrom, SEASONS.allstar.SeasonYear] : [SEASONS.teamStats.SeasonYearFrom, teamInfo.MAX_YEAR]
        }, {
            name: "SeasonType",
            initial: _isAllstar ? "All Star" : SEASONS.teamStats.SeasonType,
            without: ["All Star"]
        }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "PORound", "ShotClockRange", "DateFrom", "DateTo"]);
        if (_isAllstar) {
            $scope.splits.Season.options.forEach(function(value, idex, array) {
                value.text = $filter("seasonToSeasonYear")(value.text)
            })
        }
        $scope.params = {
            MeasureType: "Scoring",
            LeagueID: "00",
            TeamID: teamInfo.TEAM_ID,
            Season: $scope.splits.Season.selected.val,
            SeasonType: _isAllstar ? "All Star" : $scope.splits.SeasonType.selected.val,
            PerMode: "PerGame",
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            PORound: $scope.splits.PORound.selected.val,
            ShotClockRange: $scope.splits.ShotClockRange.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        }
    }
}]); /*global $, angular, console, stats */
stats.controller("TeamStatsShootingCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", "TeamFactory", function($scope, $location, $filter, Splits, SEASONS, StatsRequest, TeamFactory) {
    "use strict";
    /**
     * @var {Boolean} _isAllstar - Private variable. True if $scope.TeamID is an All Star team ID.
     * @var {Object} _teamInfo - Private variable. Defined later by $scope.$watch("teamInfo").
     */
    var _isAllstar = TeamFactory.isAllstar($scope.TeamID);
    var _teamInfo = {};
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;
    $scope.feeds = [{
        name: "General Splits",
        val: "general",
        url: "teamGeneralSplits"
    }, {
        name: "Opponent Splits",
        val: "opp",
        url: "teamOpponentSplits"
    }, {
        name: "LastNGames Splits",
        val: "lastn",
        url: "teamLastNGamesSplits"
    }, {
        name: "In Game Splits",
        val: "ingame",
        url: "teamInGameSplits"
    }, {
        name: "Clutch Splits",
        val: "clutch",
        url: "teamClutchSplits"
    }, {
        name: "Team Performance Splits",
        val: "teamperf",
        url: "teamPerformanceSplits"
    }, {
        name: "Year over Year",
        val: "yoy",
        url: "teamYearOverYearSplits"
    }];
    if ($location.search().Split) {
        var split = $filter("filter")($scope.feeds, {
            val: $location.search().Split
        })
    }
    $scope.feed = split ? split[0] : $scope.feeds[0];
    /*
     *
     *
     *
     *
     */
    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get("teamShootingSplits", "", $scope.params).then(function() {
            var ds = StatsRequest.getResults();
            $scope.datasets = ds.slice(0, ds.length - 1);
            $scope.noData = $scope.datasets[0].rowSet.length === 0 ? true : false;
            $scope.assists = ds.slice(-1);
            $scope.isLoading = false
        })
    }
    $scope.$on("runit", function(event) {
        // deep link split feed
        if ($scope.feed == $scope.feeds[0]) {
            $location.search("Split", null)
        } else {
            $location.search("Split", $scope.feed.val)
        }
        setStatsParams(_teamInfo);
        getStats()
    });
    $scope.$watch("teamInfo", function(teamInfo) {
        /**
         * @var {Object} _teamInfo - Private variable. Declared earlier in this script.
         */
        _teamInfo = teamInfo;
        if (!_teamInfo) {
            return
        }
        setStatsParams(_teamInfo);
        getStats()
    });

    function setStatsParams(teamInfo) {
        $scope.splits = Splits.get([{
            name: "Season",
            initial: _isAllstar ? SEASONS.allstar.Season : SEASONS.teamStats.Season,
            seasonRange: _isAllstar ? [SEASONS.allstar.SeasonYearFrom, SEASONS.allstar.SeasonYear] : [1997, teamInfo.MAX_YEAR]
        }, {
            name: "SeasonType",
            initial: _isAllstar ? "All Star" : SEASONS.teamStats.SeasonType,
            without: ["All Star"]
        }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "PORound", "ShotClockRange", "DateFrom", "DateTo"]);
        if (_isAllstar) {
            $scope.splits.Season.options.forEach(function(value, idex, array) {
                value.text = $filter("seasonToSeasonYear")(value.text)
            })
        }
        $scope.params = {
            MeasureType: "Base",
            LeagueID: "00",
            TeamID: teamInfo.TEAM_ID,
            Season: $scope.splits.Season.selected.val,
            SeasonType: _isAllstar ? "All Star" : $scope.splits.SeasonType.selected.val,
            PerMode: "Totals",
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            PORound: $scope.splits.PORound.selected.val,
            ShotClockRange: $scope.splits.ShotClockRange.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        }
    }
}]); /*global $, angular, console, stats */
stats.controller("TeamSummaryCtrl", ["$scope", "$location", "$routeParams", "SEASONS", "StatsRequest", "TeamFactory", function($scope, $location, $routeParams, SEASONS, StatsRequest, TeamFactory) {
    "use strict";
    $scope.isLoading = true;

    function getStats() {
        $scope.isLoading = true;
        StatsRequest.get("teamSummary", "", $scope.params).then(function() {
            var datasets = StatsRequest.getData();
            $scope.teamInfo = datasets.TeamInfoCommon.datatable[0];
            $scope.teamRanks = datasets.TeamSeasonRanks.datatable[0];
            $scope.ai = $scope.teamInfo;
            $scope.isLoading = false
        })
    }
    $scope.$on("$routeChangeSuccess", function(event, routeData) {
        if (!$routeParams.TeamID || $routeParams.TeamID == $scope.TeamID) {
            return
        }
        $scope.TeamID = $routeParams.TeamID;
        var _isAllstarTeam = TeamFactory.isAllstar($scope.TeamID);
        if ($scope.TeamID.toString().length != 10) {
            document.location = "/teams/"
        }
        $scope.params = {
            season: _isAllstarTeam ? SEASONS.allstar.Season : SEASONS.teamProfile.Season,
            SeasonType: _isAllstarTeam ? SEASONS.allstar.SeasonType : SEASONS.teamProfile.SeasonType,
            LeagueID: "00",
            TeamID: $scope.TeamID
        };
        getStats()
    })
}]); /*global $, angular, console, stats */
stats.controller("TeamTrackingDashPassesCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", "TeamFactory", "SEOFactory", function($scope, $location, $filter, Splits, SEASONS, StatsRequest, TeamFactory, SEOFactory) {
    "use strict";
    /**
     * @var {Boolean} _isAllstar - Private variable. True if $scope.TeamID is an All Star team ID.
     * @var {Object} _teamInfo - Private variable. Defined later by $scope.$watch("teamInfo").
     */
    var _isAllstar = TeamFactory.isAllstar($scope.TeamID);
    var _teamInfo = {};
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;

    function getStats() {
        $scope.isLoading = true;
        $scope.noData = false;
        StatsRequest.get("teamTrackingDashPasses", "", $scope.params).then(function() {
            var data = StatsRequest.getData();
            if (data.PassesMade.datatable.length === 0 && data.PassesReceived.datatable.length === 0) {
                $scope.noData = true;
                $scope.datasets = []
            } else {
                $scope.datasets = [{
                    name: "Passes Made",
                    datatable: data.PassesMade.datatable
                }, {
                    name: "Passes Received",
                    datatable: data.PassesReceived.datatable
                }]
            }
            $scope.isLoading = false
        })
    }
    $scope.$on("runit", function(event) {
        setStatsParams(_teamInfo);
        getStats()
    });
    $scope.$watch("teamInfo", function(teamInfo) {
        /**
         * @var {Object} _teamInfo - Private variable. Declared earlier in this script.
         */
        _teamInfo = teamInfo;
        if (!_teamInfo) {
            return
        }
        setStatsParams(_teamInfo);
        /**
         * Append team name to page title.
         *
         * @var {string} _teamName - Private variable. The current teams's city and name.
         * @var {string} _secton - Private variable. The current tracking section.
         * @var {string} _newPageTitle - Private variable. The new page title.
         *
         */
        var _teamName = [_teamInfo.TEAM_CITY, _teamInfo.TEAM_NAME].join(" ");
        var _section = "(Passes)";
        var _newPageTitle = ["Team Tracking for", _teamName, _section].join(" ");
        SEOFactory.appendTitle(_newPageTitle);
        getStats()
    });

    function setStatsParams(teamInfo) {
        $scope.splits = Splits.get([{
            name: "Season",
            initial: _isAllstar ? SEASONS.allstar.Season : SEASONS.teamTracking.Season,
            seasonRange: _isAllstar ? [SEASONS.allstar.SeasonYearFrom, SEASONS.allstar.SeasonYear] : [SEASONS.teamTracking.SeasonYearFrom, teamInfo.MAX_YEAR]
        }, {
            name: "SeasonType",
            initial: _isAllstar ? "All Star" : SEASONS.teamTracking.SeasonType,
            without: ["Pre Season", "All Star"]
        }, "PerMode", "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo"]);
        if (_isAllstar) {
            $scope.splits.Season.options.forEach(function(value, idex, array) {
                value.text = $filter("seasonToSeasonYear")(value.text)
            })
        }
        $scope.params = {
            MeasureType: "Base",
            LeagueID: "00",
            TeamID: teamInfo.TEAM_ID,
            Season: $scope.splits.Season.selected.val,
            SeasonType: _isAllstar ? "All Star" : $scope.splits.SeasonType.selected.val,
            PerMode: $scope.splits.PerMode.selected.val,
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        }
    }
}]); /*global $, angular, console, stats */
stats.controller("TeamTrackingDashReboundsCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", "TeamFactory", "SEOFactory", function($scope, $location, $filter, Splits, SEASONS, StatsRequest, TeamFactory, SEOFactory) {
    "use strict";
    /**
     * @var {Boolean} _isAllstar - Private variable. True if $scope.TeamID is an All Star team ID.
     * @var {Object} _teamInfo - Private variable. Defined later by $scope.$watch("teamInfo").
     */
    var _isAllstar = TeamFactory.isAllstar($scope.TeamID);
    var _teamInfo = {};
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;

    function getStats() {
        $scope.isLoading = true;
        $scope.noData = false;
        StatsRequest.get("teamTrackingDashRebounds", "", $scope.params).then(function() {
            var data = StatsRequest.getData();
            if (data.OverallRebounding.datatable.length === 0) {
                $scope.noData = true;
                $scope.datasets = []
            } else {
                $scope.datasets = [{
                    name: "OverallRebounding",
                    datatable: data.OverallRebounding.datatable
                }, {
                    name: "NumContestedRebounding",
                    datatable: data.NumContestedRebounding.datatable
                }, {
                    name: "RebDistanceRebounding",
                    datatable: data.RebDistanceRebounding.datatable
                }, {
                    name: "ShotDistanceRebounding",
                    datatable: data.ShotDistanceRebounding.datatable
                }, {
                    name: "ShotTypeRebounding",
                    datatable: data.ShotTypeRebounding.datatable
                }]
            }
            $scope.isLoading = false
        })
    }
    $scope.$on("runit", function(event) {
        setStatsParams(_teamInfo);
        getStats()
    });
    $scope.$watch("teamInfo", function(teamInfo) {
        /**
         * @var {Object} _teamInfo - Private variable. Declared earlier in this script.
         */
        _teamInfo = teamInfo;
        if (!_teamInfo) {
            return
        }
        setStatsParams(_teamInfo);
        /**
         * Append team name to page title.
         *
         * @var {string} _teamName - Private variable. The current teams's city and name.
         * @var {string} _secton - Private variable. The current tracking section.
         * @var {string} _newPageTitle - Private variable. The new page title.
         *
         */
        var _teamName = [_teamInfo.TEAM_CITY, _teamInfo.TEAM_NAME].join(" ");
        var _section = "(Rebounds)";
        var _newPageTitle = ["Team Tracking for", _teamName, _section].join(" ");
        SEOFactory.appendTitle(_newPageTitle);
        getStats()
    });

    function setStatsParams(teamInfo) {
        $scope.splits = Splits.get([{
            name: "Season",
            initial: _isAllstar ? SEASONS.allstar.Season : SEASONS.teamTracking.Season,
            seasonRange: _isAllstar ? [SEASONS.allstar.SeasonYearFrom, SEASONS.allstar.SeasonYear] : [SEASONS.teamTracking.SeasonYearFrom, teamInfo.MAX_YEAR]
        }, {
            name: "SeasonType",
            initial: _isAllstar ? "All Star" : SEASONS.teamTracking.SeasonType,
            without: ["Pre Season", "All Star"]
        }, "PerMode", "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo"]);
        if (_isAllstar) {
            $scope.splits.Season.options.forEach(function(value, idex, array) {
                value.text = $filter("seasonToSeasonYear")(value.text)
            })
        }
        $scope.params = {
            MeasureType: "Base",
            LeagueID: "00",
            TeamID: teamInfo.TEAM_ID,
            Season: $scope.splits.Season.selected.val,
            SeasonType: _isAllstar ? "All Star" : $scope.splits.SeasonType.selected.val,
            PerMode: $scope.splits.PerMode.selected.val,
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        }
    }
}]); /*global $, angular, console, stats */
stats.controller("TeamTrackingDashShotsCtrl", ["$scope", "$location", "$filter", "Splits", "SEASONS", "StatsRequest", "TeamFactory", "SEOFactory", function($scope, $location, $filter, Splits, SEASONS, StatsRequest, TeamFactory, SEOFactory) {
    "use strict";
    /**
     * @var {Boolean} _isAllstar - Private variable. True if $scope.TeamID is an All Star team ID.
     * @var {Object} _teamInfo - Private variable. Defined later by $scope.$watch("teamInfo").
     */
    var _isAllstar = TeamFactory.isAllstar($scope.TeamID);
    var _teamInfo = {};
    $scope.isLoading = true;
    $scope.showSplits = false;
    $scope.noData = false;

    function getStats() {
        $scope.isLoading = true;
        $scope.noData = false;
        StatsRequest.get("teamTrackingDashShots", "", $scope.params).then(function() {
            var data = StatsRequest.getData();
            if (data.GeneralShooting.datatable.length === 0) {
                $scope.noData = true;
                $scope.datasets = []
            } else {
                $scope.datasets = [{
                    name: "GeneralShooting",
                    datatable: data.GeneralShooting.datatable
                }, {
                    name: "ShotClockShooting",
                    datatable: data.ShotClockShooting.datatable
                }, {
                    name: "DribbleShooting",
                    datatable: data.DribbleShooting.datatable
                }, {
                    name: "ClosestDefenderShooting",
                    datatable: data.ClosestDefenderShooting.datatable
                }, {
                    name: "ClosestDefender10ftPlusShooting",
                    datatable: data.ClosestDefender10ftPlusShooting.datatable
                }, {
                    name: "TouchTimeShooting",
                    datatable: data.TouchTimeShooting.datatable
                }]
            }
            $scope.isLoading = false
        })
    }
    $scope.$on("runit", function(event) {
        setStatsParams(_teamInfo);
        getStats()
    });
    $scope.$watch("teamInfo", function(teamInfo) {
        /**
         * @var {Object} _teamInfo - Private variable. Declared earlier in this script.
         */
        _teamInfo = teamInfo;
        if (!_teamInfo) {
            return
        }
        setStatsParams(_teamInfo);
        /**
         * Append team name to page title.
         *
         * @var {string} _teamName - Private variable. The current teams's city and name.
         * @var {string} _secton - Private variable. The current tracking section.
         * @var {string} _newPageTitle - Private variable. The new page title.
         *
         */
        var _teamName = [_teamInfo.TEAM_CITY, _teamInfo.TEAM_NAME].join(" ");
        var _section = "(Shots)";
        var _newPageTitle = ["Team Tracking for", _teamName, _section].join(" ");
        SEOFactory.appendTitle(_newPageTitle);
        getStats()
    });

    function setStatsParams(teamInfo) {
        $scope.splits = Splits.get([{
            name: "Season",
            initial: _isAllstar ? SEASONS.allstar.Season : SEASONS.teamTracking.Season,
            seasonRange: _isAllstar ? [SEASONS.allstar.SeasonYearFrom, SEASONS.allstar.SeasonYear] : [SEASONS.teamTracking.SeasonYearFrom, teamInfo.MAX_YEAR]
        }, {
            name: "SeasonType",
            initial: _isAllstar ? "All Star" : SEASONS.teamTracking.SeasonType,
            without: ["Pre Season", "All Star"]
        }, "PerMode", "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "DateFrom", "DateTo"]);
        if (_isAllstar) {
            $scope.splits.Season.options.forEach(function(value, idex, array) {
                value.text = $filter("seasonToSeasonYear")(value.text)
            })
        }
        $scope.params = {
            MeasureType: "Base",
            LeagueID: "00",
            TeamID: teamInfo.TEAM_ID,
            Season: $scope.splits.Season.selected.val,
            SeasonType: _isAllstar ? "All Star" : $scope.splits.SeasonType.selected.val,
            PerMode: $scope.splits.PerMode.selected.val,
            PlusMinus: $scope.splits.PlusMinus.selected.val,
            PaceAdjust: $scope.splits.PaceAdjust.selected.val,
            Rank: $scope.splits.Rank.selected.val,
            Outcome: $scope.splits.Outcome.selected.val,
            Location: $scope.splits.Location.selected.val,
            Month: $scope.splits.Month.selected.val,
            SeasonSegment: $scope.splits.SeasonSegment.selected.val,
            OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
            VsConference: $scope.splits.VsConference.selected.val,
            VsDivision: $scope.splits.VsDivision.selected.val,
            GameSegment: $scope.splits.GameSegment.selected.val,
            Period: $scope.splits.Period.selected.val,
            LastNGames: $scope.splits.LastNGames.selected.val,
            DateFrom: $scope.splits.DateFrom.selected.val,
            DateTo: $scope.splits.DateTo.selected.val
        }
    }
}]);
(function() {
    stats.controller("TeamListCtrl", TeamListCtrl);
    TeamListCtrl.$inject = ["$scope", "$filter", "TEAMS"];

    function TeamListCtrl($scope, $filter, TEAMS) {
        $scope.divisionTemplate = "/divisionTemplate.html";
        $scope.teams = $filter("filter")(TEAMS.slice(0), {
            special: false
        });
        console.log(TEAMS)
    }
})();
(function() {
    stats.controller("NaturalLanguageCtrl", NaturalLanguageCtrl);
    NaturalLanguageCtrl.$inject = ["$scope", "$cookies", "$filter", "$location", "$anchorScroll", "PlayerListService", "PlayerSummaryService", "TextAnalysisService", "TextAnalysisFQService", "TEAMS"];

    function NaturalLanguageCtrl($scope, $cookies, $filter, $location, $anchorScroll, PlayerListService, PlayerSummaryService, TextAnalysisService, TextAnalysisFQService, TEAMS) {
        $scope.isLoading = false;
        $scope.isError = false;
        $scope.ask = ask;
        $scope.featuredQuestions;
        $scope.viewFeatured = viewFeatured;
        $scope.params = {
            LeagueID: "00",
            Question: $location.search().question
        };
        // change to true for testing
        $scope.isTutorial = false;
        var nlCookie = $cookies.tutorial;
        if (!nlCookie) {
            $scope.isTutorial = true;
            $cookies.tutorial = true
        }
        TextAnalysisFQService.get().then(function(info) {
            $scope.featuredQuestions = info.data.categories
        }, function() {
            $scope.featuredQ_error = true
        });
        $scope.templates = {
            "No Template": "/templates/nl/default-question-template.html",
            PlayerStat: "/templates/nl/player-stat-question-template.html",
            PlayerStatRank: "/templates/nl/player-stat-rank-question-template.html",
            PlayerAward: "/templates/nl/player-award-question-template.html",
            "Player Stat Question League Leaders": "/PlayerStatQuestionLeagueLeadersTmpl.html",
            TeamAward: "/templates/nl/team-award-template.html",
            TeamBio: "/templates/nl/team-bio-template.html",
            TeamStat: "/templates/nl/team-stat-question-template.html",
            PlayerStatGame: "/templates/nl/player-stat-game-template.html",
            Game: "/templates/nl/game-question-template.html",
            PlayerBio: "/templates/nl/player-stat-weight-template.html",
            PlayerTeam: "/templates/nl/player-team-template.html",
            CoachAward: "/templates/nl/coach-award-template.html",
            CoachAwardCount: "/templates/nl/coach-award-count-template.html",
            CoachStat: "/templates/nl/coach-stat-template.html",
            CoachTeam: "/templates/nl/coach-team-template.html",
            PlayerAwardCount: "/templates/nl/player-award-count-template.html",
            PlayerStatCareerHigh: "/templates/nl/player-stat-career-high.html",
            PlayerFrag: "/templates/nl/player-frag-template.html",
            TeamFrag: "/templates/nl/team-frag-template.html",
            TeamStatGame: "/templates/nl/team-stat-game-question-template.html"
        };
        $scope.selectedTemplate = $scope.templates["No Template"];
        $scope.isLongDisclaimer = false;
        $scope.longDisclaimerText = {
            col1: {
                Rebounds: "1950-1951",
                Minutes: "1951-1952",
                "Games Started": "1970-1971"
            },
            col2: {
                Steals: "1973-1974",
                Blocks: "1973-1974",
                "Off Rebounds": "1973-1974"
            },
            col3: {
                "Def Rebounds": "1973-1974",
                Turnovers: "1977-1978",
                "3 Point Field Goals": "1979-1980"
            }
        };
        $scope.disclaimerText = ["", "has full Play-by-Play based statistics back to the 1996-97 season.", "has complete game-level stats back to the 1985-86 season. Box Scores before this year could be incomplete.", "has complete season-level stats back to the 1946-47 season. Not all stats were recorded from the beginning of the NBA. Here is a list when certain stats started to be tracked:", "has complete season-level stats back to the 1946-47 season.", "began keeping Player Tracking stats in the 2013-14 season."];
        var parsers = {
            "No Template": function(answer) {
                $scope.isLoading = false;
                return answer
            },
            PlayerStat: function(answer) {
                var row = answer.rowSet[0];
                if (!row) {
                    $scope.isLoading = false;
                    $scope.isError = true;
                    $scope.reason = "We could not answer your question";
                    return answer
                }
                var player = {
                    name: row[1],
                    id: row[0],
                    stats: answer,
                    primary: {
                        key: answer.headers[2],
                        val: row[2]
                    }
                };
                var params = {
                    SeasonType: "Regular Season",
                    LeagueID: "00",
                    PlayerID: player.id
                };
                PlayerSummaryService.get(params).then(function(info) {
                    player.info = info;
                    $scope.isLoading = false
                });
                return player
            },
            PlayerStatCareerHigh: function(answer) {
                var row = answer.rowSet[0];
                if (!row) {
                    $scope.isLoading = false;
                    $scope.isError = true;
                    $scope.reason = "We could not answer your question";
                    return answer
                }
                var player = {
                    name: row[1],
                    id: row[0],
                    stats: answer,
                    primary: {
                        key: answer.headers[3],
                        val: row[3]
                    }
                };
                var params = {
                    SeasonType: "Regular Season",
                    LeagueID: "00",
                    PlayerID: player.id
                };
                PlayerSummaryService.get(params).then(function(info) {
                    player.info = info;
                    $scope.isLoading = false
                });
                return player
            },
            PlayerStatRank: function(answer) {
                var row = answer.rowSet[0];
                if (!row[1]) {
                    $scope.isLoading = false;
                    $scope.isError = true;
                    $scope.reason = "We could not answer your question";
                    return answer
                }
                var player = {
                    name: row[2],
                    id: row[1],
                    stats: answer,
                    primary: {
                        key: answer.headers[3],
                        val: row[3]
                    }
                };
                var params = {
                    SeasonType: "Regular Season",
                    LeagueID: "00",
                    PlayerID: player.id
                };
                PlayerSummaryService.get(params).then(function(info) {
                    player.info = info;
                    $scope.isLoading = false
                });
                return player
            },
            PlayerAward: function(answer) {
                var row = answer.rowSet[0];
                if (!row) {
                    $scope.isLoading = false;
                    $scope.isError = true;
                    $scope.reason = "We could not answer your question";
                    return answer
                }
                answer.player = {
                    name: row[2],
                    id: row[0]
                };
                var params = {
                    SeasonType: "Regular Season",
                    LeagueID: "00",
                    PlayerID: answer.player.id
                };
                PlayerSummaryService.get(params).then(function(info) {
                    answer.player.info = info;
                    $scope.isLoading = false
                });
                return answer
            },
            PlayerAwardCount: function(answer) {
                var row = answer.rowSet[0];
                if (!row) {
                    $scope.isLoading = false;
                    $scope.isError = true;
                    $scope.reason = "We could not answer your question";
                    return answer
                }
                answer.player = {
                    name: row[1],
                    id: row[0]
                };
                var params = {
                    SeasonType: "Regular Season",
                    LeagueID: "00",
                    PlayerID: answer.player.id
                };
                PlayerSummaryService.get(params).then(function(info) {
                    answer.player.info = info;
                    $scope.isLoading = false
                });
                return answer
            },
            Game: function(answer) {
                var headers = answer.headers;
                var data = answer.rowSet[0];
                var gameInfo = {};
                // move to bottom
                $scope.isLoading = false;
                if (!data) {
                    $scope.isLoading = false;
                    $scope.isError = true;
                    $scope.reason = "We could not answer your question";
                    return answer
                }
                var row = answer.rowSet[0];
                for (var i = 0; i < headers.length; i++) {
                    gameInfo[headers[i]] = data[i]
                }
                var next_year = (Number(gameInfo["SEASON"]) + 1).toString();
                // change formatting for certain data
                gameInfo["GAME_DATE"] = $filter("date")(Date.parse(data[0]), "MMMM d, y");
                gameInfo["SEASON_STRING"] = $filter("seasonyear")(gameInfo["SEASON"]);
                gameInfo["VISITOR_TEAM_LEAD"] = false;
                gameInfo["HOME_TEAM_LEAD"] = false;
                // TEST: live game
                // gameInfo['GAME_STATUS_ID'] = 2;
                // gameInfo['LIVE_PERIOD'] = 4;
                // gameInfo['HOME_TEAM_PTS'] = 74;
                // gameInfo['VISITOR_TEAM_PTS'] = 72;
                // TEST: post game
                // gameInfo['GAME_STATUS_ID'] = 3;
                // gameInfo['LIVE_PERIOD'] = 0;
                // gameInfo['HOME_TEAM_PTS'] = 121;
                // gameInfo['VISITOR_TEAM_PTS'] = 125;
                // if game is live or final, compare scores, add new bool to show leader
                if (Number(gameInfo["GAME_STATUS_ID"]) > 1) {
                    if (Number(gameInfo["VISITOR_TEAM_PTS"]) > Number(gameInfo["HOME_TEAM_PTS"])) {
                        gameInfo["VISITOR_TEAM_LEAD"] = true
                    } else {
                        gameInfo["HOME_TEAM_LEAD"] = true
                    }
                }
                return gameInfo
            },
            PlayerBio: function(answer) {
                var row = answer.rowSet[0];
                if (!row) {
                    $scope.isLoading = false;
                    $scope.isError = true;
                    $scope.reason = "We could not answer your question";
                    return answer
                }
                var player = {
                    name: row[1],
                    id: row[0],
                    stats: answer,
                    primary: {
                        key: answer.headers[2],
                        val: row[2]
                    }
                };
                var params = {
                    SeasonType: "Regular Season",
                    LeagueID: "00",
                    PlayerID: player.id
                };
                PlayerSummaryService.get(params).then(function(info) {
                    player.info = info;
                    $scope.isLoading = false
                });
                return player
            },
            PlayerFrag: function(answer) {
                var row = answer.rowSet[0];
                if (!row) {
                    $scope.isLoading = false;
                    $scope.isError = true;
                    $scope.reason = "We could not answer your question";
                    return answer
                }
                var player = {
                    id: row[0],
                    stats: answer
                };
                var params = {
                    SeasonType: "Regular Season",
                    LeagueID: "00",
                    PlayerID: player.id
                };
                PlayerSummaryService.get(params).then(function(info) {
                    player.info = info;
                    $scope.isLoading = false
                });
                return player
            },
            PlayerTeam: function(answer) {
                var row = answer.rowSet[0];
                if (!row) {
                    $scope.isLoading = false;
                    $scope.isError = true;
                    $scope.reason = "We could not answer your question";
                    return answer
                }
                var player = {
                    name: row[2],
                    id: row[0],
                    stats: answer,
                    primary: {
                        key: answer.headers[3],
                        val: row[3],
                        isLongName: false
                    }
                };
                if (player.primary.val.length > 5) {
                    player.primary.isLongName = true
                }
                var params = {
                    SeasonType: "Regular Season",
                    LeagueID: "00",
                    PlayerID: player.id
                };
                PlayerSummaryService.get(params).then(function(info) {
                    player.info = info;
                    $scope.isLoading = false
                });
                return player
            },
            PlayerStatGame: function(answer) {
                var row = answer.rowSet[0];
                if (!row) {
                    $scope.isLoading = false;
                    $scope.isError = true;
                    $scope.reason = "We could not answer your question";
                    return answer
                }
                var player = {
                    name: row[1],
                    id: row[0],
                    stats: answer,
                    primary: {
                        key: answer.headers[4],
                        val: row[4]
                    }
                };
                var params = {
                    SeasonType: "Regular Season",
                    LeagueID: "00",
                    PlayerID: player.id
                };
                PlayerSummaryService.get(params).then(function(info) {
                    player.info = info;
                    $scope.isLoading = false
                });
                return player
            },
            TeamAward: function(answer) {
                var row = answer.rowSet[0];
                if (!row) {
                    $scope.isLoading = false;
                    $scope.isError = true;
                    $scope.reason = "We could not answer your question";
                    return answer
                }
                var team = {
                    name: row[1],
                    id: row[0],
                    stats: answer,
                    primary: {
                        key: answer.headers[2],
                        val: row[2],
                        award: row[3]
                    }
                };
                team.info = $filter("filter")(TEAMS, {
                    id: team.id
                })[0];
                $scope.isLoading = false;
                return team
            },
            TeamBio: function(answer) {
                var row = answer.rowSet[0];
                if (!row) {
                    $scope.isLoading = false;
                    $scope.isError = true;
                    $scope.reason = "We could not answer your question";
                    return answer
                }
                var team = {
                    name: row[1],
                    id: row[0],
                    stats: answer,
                    primary: {
                        key: answer.headers[5],
                        val: row[5]
                    }
                };
                team.info = $filter("filter")(TEAMS, {
                    id: team.id
                })[0];
                $scope.isLoading = false;
                return team
            },
            TeamFrag: function(answer) {
                var row = answer.rowSet[0];
                if (!row) {
                    $scope.isLoading = false;
                    $scope.isError = true;
                    $scope.reason = "We could not answer your question";
                    return answer
                }
                var team = {
                    id: row[0],
                    stats: answer
                };
                team.info = $filter("filter")(TEAMS, {
                    id: team.id
                })[0];
                $scope.isLoading = false;
                return team
            },
            TeamStat: function(answer) {
                var row = answer.rowSet[0];
                if (!row) {
                    $scope.isLoading = false;
                    $scope.isError = true;
                    $scope.reason = "We could not answer your question";
                    return answer
                }
                var team = {
                    name: row[1],
                    id: row[0],
                    stats: answer,
                    primary: {
                        key: answer.headers[2],
                        val: row[2]
                    }
                };
                team.info = $filter("filter")(TEAMS, {
                    id: team.id
                })[0];
                $scope.isLoading = false;
                return team
            },
            TeamStatGame: function(answer) {
                var row = answer.rowSet[0];
                if (!row) {
                    $scope.isLoading = false;
                    $scope.isError = true;
                    $scope.reason = "We could not answer your question";
                    return answer
                }
                var team = {
                    name: row[1],
                    id: row[0],
                    stats: answer,
                    primary: {
                        key: answer.headers[4],
                        val: row[4]
                    }
                };
                team.info = $filter("filter")(TEAMS, {
                    id: team.id
                })[0];
                $scope.isLoading = false;
                return team
            },
            CoachAward: function(answer) {
                var headers = answer.headers;
                var data = answer.rowSet[0];
                var coach = {};
                if (!data) {
                    $scope.isLoading = false;
                    $scope.isError = true;
                    $scope.reason = "We could not answer your question";
                    return coach
                }
                for (var i = 0; i < headers.length; i++) {
                    coach[headers[i]] = data[i]
                }
                coach["headers"] = headers;
                coach["data"] = answer.rowSet;
                $scope.isLoading = false;
                return coach
            },
            CoachAwardCount: function(answer) {
                var headers = answer.headers;
                var data = answer.rowSet[0];
                var coach = {};
                if (!data) {
                    return coach
                }
                for (var i = 0; i < headers.length; i++) {
                    coach[headers[i]] = data[i]
                }
                coach["headers"] = headers;
                coach["data"] = answer.rowSet;
                $scope.isLoading = false;
                return coach
            },
            CoachStat: function(answer) {
                var headers = answer.headers;
                var data = answer.rowSet[0];
                var coach = {};
                if (!data) {
                    $scope.isLoading = false;
                    $scope.isError = true;
                    $scope.reason = "We could not answer your question";
                    return coach
                }
                for (var i = 0; i < headers.length; i++) {
                    coach[headers[i]] = data[i]
                }
                coach["headers"] = headers;
                coach["data"] = answer.rowSet;
                coach["teaminfo"] = $filter("filter")(TEAMS, {
                    id: coach.TEAM_ID
                })[0];
                $scope.isLoading = false;
                return coach
            },
            CoachTeam: function(answer) {
                var headers = answer.headers;
                var data = answer.rowSet[0];
                var coach = {};
                if (!data) {
                    $scope.isLoading = false;
                    $scope.isError = true;
                    $scope.reason = "We could not answer your question";
                    return coach
                }
                for (var i = 0; i < headers.length; i++) {
                    coach[headers[i]] = data[i]
                }
                coach["headers"] = headers;
                coach["data"] = answer.rowSet;
                $scope.isLoading = false;
                return coach
            }
        };

        function ask(qsource) {
            if ($scope.isLoading) {
                return
            }
            // scroll to question area
            $location.hash("stats-nl_section-question");
            $anchorScroll();
            $location.search("question", $scope.params.Question);
            $scope.question = $scope.params.Question;
            $scope.isLoading = true;
            $scope.isError = false;
            $scope.sets = [];
            TextAnalysisService.get($scope.params).then(function(response) {
                $scope.sets = response.results;
                $scope.info = $scope.sets[3];
                $scope.question = response.data.parameters.Question;
                $scope.similarQuestions = $scope.sets[5].rowSet.slice(0, 4);
                //Omniture Calls
                var omData = {
                    focus: qsource,
                    content: [$scope.question]
                };
                _nba.analytics.click(omData);
                callOmniture($scope.question);
                var bucket = $scope.info.rowSet[0][0];
                $scope.qSeason = $scope.info.rowSet[0][1];
                $scope.qSeasonType = $scope.info.rowSet[0][2];
                if ($scope.info.rowSet[0][3] == "") {
                    $scope.disclaimer = $scope.disclaimerText[1]
                } else {
                    if ($scope.info.rowSet[0][3] == 3) {
                        $scope.isLongDisclaimer = true
                    }
                    $scope.disclaimer = $scope.disclaimerText[$scope.info.rowSet[0][3]]
                }
                if (bucket == "") {
                    $scope.isError = true;
                    $scope.isLoading = false;
                    return
                }
                $scope.selectedTemplate = $scope.templates[bucket] || $scope.templates["No Template"];
                $scope.answer = parsers[bucket] ? parsers[bucket]($scope.sets[0]) : parsers["No Template"]($scope.sets[0])
            }, function(response) {
                $scope.isError = true;
                $scope.isLoading = false;
                $scope.reason = response.message
            })
        }

        function getTemplateForBucket(info) {
            var template = $scope.templates.filter(function(n) {
                return n.type === info.rowSet[0][0]
            });
            return template[0] || $scope.templates[0]
        }

        function viewFeatured() {
            //Omniture click
            var omData = {
                focus: "featured-module"
            };
            _nba.analytics.click(omData);
            $location.hash("featured-questions");
            $anchorScroll()
        }
        // init if page is loaded with question param in search
        if ($location.search().question) {
            ask("qstring")
        }
    }
})();
(function() {
    stats.controller("TextAnalysisCtrl", TextAnalysisCtrl);
    TextAnalysisCtrl.$inject = ["$scope", "$location", "TextAnalysisService"];

    function TextAnalysisCtrl($scope, $location, TextAnalysisService) {
        $scope.isLoading = false;
        $scope.isError = false;
        $scope.ask = ask;
        $scope.params = {
            LeagueID: "00",
            Question: $location.search().Question || "How many points does lebron have?"
        };

        function ask() {
            if ($scope.isLoading) {
                return
            }
            $location.search("Question", $scope.params.Question);
            $scope.isLoading = true;
            $scope.isError = false;
            $scope.sets = [];
            TextAnalysisService.get($scope.params).then(function(response) {
                $scope.sets = response.results;
                $scope.question = response.data.parameters.Question;
                $scope.isLoading = false
            }, function(response) {
                $scope.sets = response.results;
                $scope.question = response.data.parameters.Question;
                $scope.isError = false;
                $scope.isLoading = false;
                $scope.reason = response.reason || response
            })
        }
    }
})();
(function() {
    stats.controller("TrackingCatchShootCtrl", TrackingCatchShootCtrl);
    TrackingCatchShootCtrl.$inject = ["$scope", "$filter", "$location", "SEASONS", "SplitsService", "TrackingDataService"];

    function TrackingCatchShootCtrl($scope, $filter, $location, SEASONS, SplitsService, TrackingDataService) {
        $scope.showSplits = false;
        $scope.setSection = setSectionFn;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.trackingStats.Season,
            seasonRange: [SEASONS.trackingStats.SeasonFrom, SEASONS.trackingStats.Season]
        }, {
            name: "SeasonType",
            initial: SEASONS.trackingStats.SeasonType,
            without: ["Preseason"]
        }, "College", "Conference", "Country", "DateFrom", "DateTo", "Division", "DraftPick", "DraftYear", "GameScope", "Height", "LastNGames", "Location", "Month", "OpponentTeamID", "Outcome", "PerMode", "PlayerExperience", "PlayerPosition", "PORound", "SeasonSegment", "StarterBench", "VsConference", "VsDivision", "Weight", "TeamID"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.PlayerOrTeam = $filter("toTitleCase")($scope.Section) || "Player";
        $scope.params.PtMeasureType = "CatchShoot";
        getStats();

        function getStats() {
            $scope.isLoading = true;
            TrackingDataService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.noData = $scope.datasets[0].datatable.length === 0 ? true : false;
                $scope.isLoading = false
            })
        }
        /**
         * setSectionFn()
         * Toggle player and team sections
         *
         * @param {string} section - 'player' | 'team'
         */
        function setSectionFn(section) {
            var path = $location.path().split("/");
            path[1] = section;
            $location.path(path.join("/"))
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        })
    }
})();
(function() {
    stats.controller("TrackingDefenseCtrl", TrackingDefenseCtrl);
    TrackingDefenseCtrl.$inject = ["$scope", "$filter", "$location", "SEASONS", "SplitsService", "TrackingDataService"];

    function TrackingDefenseCtrl($scope, $filter, $location, SEASONS, SplitsService, TrackingDataService) {
        $scope.showSplits = false;
        $scope.setSection = setSectionFn;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.trackingStats.Season,
            seasonRange: [SEASONS.trackingStats.SeasonFrom, SEASONS.trackingStats.Season]
        }, {
            name: "SeasonType",
            initial: SEASONS.trackingStats.SeasonType,
            without: ["Preseason"]
        }, "College", "Conference", "Country", "DateFrom", "DateTo", "Division", "DraftPick", "DraftYear", "GameScope", "Height", "LastNGames", "Location", "Month", "OpponentTeamID", "Outcome", "PerMode", "PlayerExperience", "PlayerPosition", "PORound", "SeasonSegment", "StarterBench", "VsConference", "VsDivision", "Weight", "TeamID"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.PlayerOrTeam = $filter("toTitleCase")($scope.Section);
        $scope.params.PtMeasureType = "Defense";
        getStats();

        function getStats() {
            $scope.isLoading = true;
            TrackingDataService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.noData = $scope.datasets[0].datatable.length === 0 ? true : false;
                $scope.isLoading = false
            })
        }
        /**
         * setSectionFn()
         * Toggle player and team sections
         *
         * @param {string} section - 'player' | 'team'
         */
        function setSectionFn(section) {
            var path = $location.path().split("/");
            path[1] = section;
            $location.path(path.join("/"))
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        })
    }
})();
(function() {
    stats.controller("TrackingDrivesCtrl", TrackingDrivesCtrl);
    TrackingDrivesCtrl.$inject = ["$scope", "$filter", "$location", "SEASONS", "SplitsService", "TrackingDataService"];

    function TrackingDrivesCtrl($scope, $filter, $location, SEASONS, SplitsService, TrackingDataService) {
        $scope.showSplits = false;
        $scope.setSection = setSectionFn;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.trackingStats.Season,
            seasonRange: [SEASONS.trackingStats.SeasonFrom, SEASONS.trackingStats.Season]
        }, {
            name: "SeasonType",
            initial: SEASONS.trackingStats.SeasonType,
            without: ["Preseason"]
        }, "College", "Conference", "Country", "DateFrom", "DateTo", "Division", "DraftPick", "DraftYear", "GameScope", "Height", "LastNGames", "Location", "Month", "OpponentTeamID", "Outcome", "PerMode", "PlayerExperience", "PlayerPosition", "PORound", "SeasonSegment", "StarterBench", "VsConference", "VsDivision", "Weight", "TeamID"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.PlayerOrTeam = $filter("toTitleCase")($scope.Section);
        $scope.params.PtMeasureType = "Drives";
        getStats();

        function getStats() {
            $scope.isLoading = true;
            TrackingDataService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.noData = $scope.datasets[0].datatable.length === 0 ? true : false;
                $scope.isLoading = false
            })
        }
        /**
         * setSectionFn()
         * Toggle player and team sections
         *
         * @param {string} section - 'player' | 'team'
         */
        function setSectionFn(section) {
            var path = $location.path().split("/");
            path[1] = section;
            $location.path(path.join("/"))
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        })
    }
})();
(function() {
    stats.controller("TrackingElbowTouchCtrl", TrackingElbowTouchCtrl);
    TrackingElbowTouchCtrl.$inject = ["$scope", "$filter", "$location", "SEASONS", "SplitsService", "TrackingDataService"];

    function TrackingElbowTouchCtrl($scope, $filter, $location, SEASONS, SplitsService, TrackingDataService) {
        $scope.showSplits = false;
        $scope.setSection = setSectionFn;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.trackingStats.Season,
            seasonRange: [SEASONS.trackingStats.SeasonFrom, SEASONS.trackingStats.Season]
        }, {
            name: "SeasonType",
            initial: SEASONS.trackingStats.SeasonType,
            without: ["Preseason"]
        }, "College", "Conference", "Country", "DateFrom", "DateTo", "Division", "DraftPick", "DraftYear", "GameScope", "Height", "LastNGames", "Location", "Month", "OpponentTeamID", "Outcome", "PerMode", "PlayerExperience", "PlayerPosition", "PORound", "SeasonSegment", "StarterBench", "VsConference", "VsDivision", "Weight", "TeamID"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.PlayerOrTeam = $filter("toTitleCase")($scope.Section);
        $scope.params.PtMeasureType = "ElbowTouch";
        getStats();

        function getStats() {
            $scope.isLoading = true;
            TrackingDataService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.noData = $scope.datasets[0].datatable.length === 0 ? true : false;
                $scope.isLoading = false
            })
        }
        /**
         * setSectionFn()
         * Toggle player and team sections
         *
         * @param {string} section - 'player' | 'team'
         */
        function setSectionFn(section) {
            var path = $location.path().split("/");
            path[1] = section;
            $location.path(path.join("/"))
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        })
    }
})();
(function() {
    stats.controller("TrackingNavCtrl", TrackingNavCtrl);
    TrackingNavCtrl.$inject = ["$scope", "$location", "$route"];

    function TrackingNavCtrl($scope, $location, $route) {
        $scope.$on("$routeChangeSuccess", function(event, routeData) {
            if (!$scope.Section) {
                $scope.Section = "player";
                var path = $location.path().split("/");
                path[1] = $scope.Section;
                $location.path(path.join("/"))
            }
            $scope.page = $route.current.page;
            $scope.selected = $scope.pages.filter(function(n) {
                return n.page == $scope.page
            })[0]
        });
        $scope.pages = [{
            page: "summary",
            path: "",
            text: "Summary"
        }, {
            page: "catchshoot",
            path: "catchshoot",
            text: "Catch & Shoot"
        }, {
            page: "defense",
            path: "defense",
            text: "Defense"
        }, {
            page: "drives",
            path: "drives",
            text: "Drives"
        }, {
            page: "passing",
            path: "passing",
            text: "Passing"
        }, {
            page: "possessions",
            path: "possessions",
            text: "Touches & Possessions"
        }, {
            page: "pullup",
            path: "pullup",
            text: "Pull Up Shooting"
        }, {
            page: "offensive-rebounding",
            path: "offensive-rebounding",
            text: "Offensive Rebounding"
        }, {
            page: "defensive-rebounding",
            path: "defensive-rebounding",
            text: "Defensive Rebounding"
        }, {
            page: "rebounding",
            path: "rebounding",
            text: "Rebounding"
        }, {
            page: "shooting",
            path: "shooting",
            text: "Shooting Efficiency"
        }, {
            page: "speed",
            path: "speed",
            text: "Speed & Distance"
        }, {
            page: "elbow",
            path: "elbow",
            text: "Elbow Touch"
        }, {
            page: "post",
            path: "post",
            text: "Post Touch"
        }, {
            page: "paint",
            path: "paint",
            text: "Paint Touch"
        }];
        $scope.onNavChange = function() {
            $location.path($scope.Section + "/" + $scope.selected.path)
        }
    }
})();
(function() {
    stats.controller("TrackingPaintTouchCtrl", TrackingPaintTouchCtrl);
    TrackingPaintTouchCtrl.$inject = ["$scope", "$filter", "$location", "SEASONS", "SplitsService", "TrackingDataService"];

    function TrackingPaintTouchCtrl($scope, $filter, $location, SEASONS, SplitsService, TrackingDataService) {
        $scope.showSplits = false;
        $scope.setSection = setSectionFn;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.trackingStats.Season,
            seasonRange: [SEASONS.trackingStats.SeasonFrom, SEASONS.trackingStats.Season]
        }, {
            name: "SeasonType",
            initial: SEASONS.trackingStats.SeasonType,
            without: ["Preseason"]
        }, "College", "Conference", "Country", "DateFrom", "DateTo", "Division", "DraftPick", "DraftYear", "GameScope", "Height", "LastNGames", "Location", "Month", "OpponentTeamID", "Outcome", "PerMode", "PlayerExperience", "PlayerPosition", "PORound", "SeasonSegment", "StarterBench", "VsConference", "VsDivision", "Weight", "TeamID"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.PlayerOrTeam = $filter("toTitleCase")($scope.Section);
        $scope.params.PtMeasureType = "PaintTouch";
        getStats();

        function getStats() {
            $scope.isLoading = true;
            TrackingDataService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.noData = $scope.datasets[0].datatable.length === 0 ? true : false;
                $scope.isLoading = false
            })
        }
        /**
         * setSectionFn()
         * Toggle player and team sections
         *
         * @param {string} section - 'player' | 'team'
         */
        function setSectionFn(section) {
            var path = $location.path().split("/");
            path[1] = section;
            $location.path(path.join("/"))
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        })
    }
})();
(function() {
    stats.controller("TrackingPassingCtrl", TrackingPassingCtrl);
    TrackingPassingCtrl.$inject = ["$scope", "$filter", "$location", "SEASONS", "SplitsService", "TrackingDataService"];

    function TrackingPassingCtrl($scope, $filter, $location, SEASONS, SplitsService, TrackingDataService) {
        $scope.showSplits = false;
        $scope.setSection = setSectionFn;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.trackingStats.Season,
            seasonRange: [SEASONS.trackingStats.SeasonFrom, SEASONS.trackingStats.Season]
        }, {
            name: "SeasonType",
            initial: SEASONS.trackingStats.SeasonType,
            without: ["Preseason"]
        }, "College", "Conference", "Country", "DateFrom", "DateTo", "Division", "DraftPick", "DraftYear", "GameScope", "Height", "LastNGames", "Location", "Month", "OpponentTeamID", "Outcome", "PerMode", "PlayerExperience", "PlayerPosition", "PORound", "SeasonSegment", "StarterBench", "VsConference", "VsDivision", "Weight", "TeamID"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.PlayerOrTeam = $filter("toTitleCase")($scope.Section);
        $scope.params.PtMeasureType = "Passing";
        getStats();

        function getStats() {
            $scope.isLoading = true;
            TrackingDataService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.noData = $scope.datasets[0].datatable.length === 0 ? true : false;
                $scope.isLoading = false
            })
        }
        /**
         * setSectionFn()
         * Toggle player and team sections
         *
         * @param {string} section - 'player' | 'team'
         */
        function setSectionFn(section) {
            var path = $location.path().split("/");
            path[1] = section;
            $location.path(path.join("/"))
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        })
    }
})();
(function() {
    stats.controller("TrackingPossessionsCtrl", TrackingPossessionsCtrl);
    TrackingPossessionsCtrl.$inject = ["$scope", "$filter", "$location", "SEASONS", "SplitsService", "TrackingDataService"];

    function TrackingPossessionsCtrl($scope, $filter, $location, SEASONS, SplitsService, TrackingDataService) {
        $scope.showSplits = false;
        $scope.setSection = setSectionFn;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.trackingStats.Season,
            seasonRange: [SEASONS.trackingStats.SeasonFrom, SEASONS.trackingStats.Season]
        }, {
            name: "SeasonType",
            initial: SEASONS.trackingStats.SeasonType,
            without: ["Preseason"]
        }, "College", "Conference", "Country", "DateFrom", "DateTo", "Division", "DraftPick", "DraftYear", "GameScope", "Height", "LastNGames", "Location", "Month", "OpponentTeamID", "Outcome", "PerMode", "PlayerExperience", "PlayerPosition", "PORound", "SeasonSegment", "StarterBench", "VsConference", "VsDivision", "Weight", "TeamID"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.PlayerOrTeam = $filter("toTitleCase")($scope.Section);
        $scope.params.PtMeasureType = "Possessions";
        getStats();

        function getStats() {
            $scope.isLoading = true;
            TrackingDataService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.noData = $scope.datasets[0].datatable.length === 0 ? true : false;
                $scope.isLoading = false
            })
        }
        /**
         * setSectionFn()
         * Toggle player and team sections
         *
         * @param {string} section - 'player' | 'team'
         */
        function setSectionFn(section) {
            var path = $location.path().split("/");
            path[1] = section;
            $location.path(path.join("/"))
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        })
    }
})();
(function() {
    stats.controller("TrackingPostTouchCtrl", TrackingPostTouchCtrl);
    TrackingPostTouchCtrl.$inject = ["$scope", "$filter", "$location", "SEASONS", "SplitsService", "TrackingDataService"];

    function TrackingPostTouchCtrl($scope, $filter, $location, SEASONS, SplitsService, TrackingDataService) {
        $scope.showSplits = false;
        $scope.setSection = setSectionFn;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.trackingStats.Season,
            seasonRange: [SEASONS.trackingStats.SeasonFrom, SEASONS.trackingStats.Season]
        }, {
            name: "SeasonType",
            initial: SEASONS.trackingStats.SeasonType,
            without: ["Preseason"]
        }, "College", "Conference", "Country", "DateFrom", "DateTo", "Division", "DraftPick", "DraftYear", "GameScope", "Height", "LastNGames", "Location", "Month", "OpponentTeamID", "Outcome", "PerMode", "PlayerExperience", "PlayerPosition", "PORound", "SeasonSegment", "StarterBench", "VsConference", "VsDivision", "Weight", "TeamID"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.PlayerOrTeam = $filter("toTitleCase")($scope.Section);
        $scope.params.PtMeasureType = "PostTouch";
        getStats();

        function getStats() {
            $scope.isLoading = true;
            TrackingDataService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.noData = $scope.datasets[0].datatable.length === 0 ? true : false;
                $scope.isLoading = false
            })
        }
        /**
         * setSectionFn()
         * Toggle player and team sections
         *
         * @param {string} section - 'player' | 'team'
         */
        function setSectionFn(section) {
            var path = $location.path().split("/");
            path[1] = section;
            $location.path(path.join("/"))
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        })
    }
})();
(function() {
    stats.controller("TrackingPullupCtrl", TrackingPullupCtrl);
    TrackingPullupCtrl.$inject = ["$scope", "$filter", "$location", "SEASONS", "SplitsService", "TrackingDataService"];

    function TrackingPullupCtrl($scope, $filter, $location, SEASONS, SplitsService, TrackingDataService) {
        $scope.showSplits = false;
        $scope.setSection = setSectionFn;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.trackingStats.Season,
            seasonRange: [SEASONS.trackingStats.SeasonFrom, SEASONS.trackingStats.Season]
        }, {
            name: "SeasonType",
            initial: SEASONS.trackingStats.SeasonType,
            without: ["Preseason"]
        }, "College", "Conference", "Country", "DateFrom", "DateTo", "Division", "DraftPick", "DraftYear", "GameScope", "Height", "LastNGames", "Location", "Month", "OpponentTeamID", "Outcome", "PerMode", "PlayerExperience", "PlayerPosition", "PORound", "SeasonSegment", "StarterBench", "VsConference", "VsDivision", "Weight", "TeamID"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.PlayerOrTeam = $filter("toTitleCase")($scope.Section);
        $scope.params.PtMeasureType = "PullUpShot";
        getStats();

        function getStats() {
            $scope.isLoading = true;
            TrackingDataService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.noData = $scope.datasets[0].datatable.length === 0 ? true : false;
                $scope.isLoading = false
            })
        }
        /**
         * setSectionFn()
         * Toggle player and team sections
         *
         * @param {string} section - 'player' | 'team'
         */
        function setSectionFn(section) {
            var path = $location.path().split("/");
            path[1] = section;
            $location.path(path.join("/"))
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        })
    }
})();
(function() {
    stats.controller("TrackingReboundingCtrl", TrackingReboundingCtrl);
    TrackingReboundingCtrl.$inject = ["$scope", "$filter", "$location", "SEASONS", "SplitsService", "TrackingDataService"];

    function TrackingReboundingCtrl($scope, $filter, $location, SEASONS, SplitsService, TrackingDataService) {
        $scope.showSplits = false;
        $scope.setSection = setSectionFn;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.trackingStats.Season,
            seasonRange: [SEASONS.trackingStats.SeasonFrom, SEASONS.trackingStats.Season]
        }, {
            name: "SeasonType",
            initial: SEASONS.trackingStats.SeasonType,
            without: ["Preseason"]
        }, "College", "Conference", "Country", "DateFrom", "DateTo", "Division", "DraftPick", "DraftYear", "GameScope", "Height", "LastNGames", "Location", "Month", "OpponentTeamID", "Outcome", "PerMode", "PlayerExperience", "PlayerPosition", "PORound", "SeasonSegment", "StarterBench", "VsConference", "VsDivision", "Weight", "TeamID"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.PlayerOrTeam = $filter("toTitleCase")($scope.Section);
        $scope.params.PtMeasureType = "Rebounding";
        getStats();

        function getStats() {
            $scope.isLoading = true;
            TrackingDataService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.noData = $scope.datasets[0].datatable.length === 0 ? true : false;
                $scope.isLoading = false
            })
        }
        /**
         * setSectionFn()
         * Toggle player and team sections
         *
         * @param {string} section - 'player' | 'team'
         */
        function setSectionFn(section) {
            var path = $location.path().split("/");
            path[1] = section;
            $location.path(path.join("/"))
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        })
    }
})();
(function() {
    stats.controller("TrackingShootingCtrl", TrackingShootingCtrl);
    TrackingShootingCtrl.$inject = ["$scope", "$filter", "$location", "SEASONS", "SplitsService", "TrackingDataService"];

    function TrackingShootingCtrl($scope, $filter, $location, SEASONS, SplitsService, TrackingDataService) {
        $scope.showSplits = false;
        $scope.setSection = setSectionFn;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.trackingStats.Season,
            seasonRange: [SEASONS.trackingStats.SeasonFrom, SEASONS.trackingStats.Season]
        }, {
            name: "SeasonType",
            initial: SEASONS.trackingStats.SeasonType,
            without: ["Preseason"]
        }, "College", "Conference", "Country", "DateFrom", "DateTo", "Division", "DraftPick", "DraftYear", "GameScope", "Height", "LastNGames", "Location", "Month", "OpponentTeamID", "Outcome", "PerMode", "PlayerExperience", "PlayerPosition", "PORound", "SeasonSegment", "StarterBench", "VsConference", "VsDivision", "Weight", "TeamID"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.PlayerOrTeam = $filter("toTitleCase")($scope.Section);
        $scope.params.PtMeasureType = "Efficiency";
        getStats();

        function getStats() {
            $scope.isLoading = true;
            TrackingDataService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.noData = $scope.datasets[0].datatable.length === 0 ? true : false;
                $scope.isLoading = false
            })
        }
        /**
         * setSectionFn()
         * Toggle player and team sections
         *
         * @param {string} section - 'player' | 'team'
         */
        function setSectionFn(section) {
            var path = $location.path().split("/");
            path[1] = section;
            $location.path(path.join("/"))
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        })
    }
})();
(function() {
    stats.controller("TrackingSpeedCtrl", TrackingSpeedCtrl);
    TrackingSpeedCtrl.$inject = ["$scope", "$filter", "$location", "SEASONS", "SplitsService", "TrackingDataService"];

    function TrackingSpeedCtrl($scope, $filter, $location, SEASONS, SplitsService, TrackingDataService) {
        $scope.showSplits = false;
        $scope.setSection = setSectionFn;
        var config = SplitsService.get(["LeagueID", {
            name: "Season",
            initial: SEASONS.trackingStats.Season,
            seasonRange: [SEASONS.trackingStats.SeasonFrom, SEASONS.trackingStats.Season]
        }, {
            name: "SeasonType",
            initial: SEASONS.trackingStats.SeasonType,
            without: ["Preseason"]
        }, "College", "Conference", "Country", "DateFrom", "DateTo", "Division", "DraftPick", "DraftYear", "GameScope", "Height", "LastNGames", "Location", "Month", "OpponentTeamID", "Outcome", "PerMode", "PlayerExperience", "PlayerPosition", "PORound", "SeasonSegment", "StarterBench", "VsConference", "VsDivision", "Weight", "TeamID"]);
        $scope.splits = config.splits;
        $scope.params = config.params;
        $scope.params.PlayerOrTeam = $filter("toTitleCase")($scope.Section);
        $scope.params.PtMeasureType = "SpeedDistance";
        getStats();

        function getStats() {
            $scope.isLoading = true;
            TrackingDataService.get($scope.params).then(function(datasets) {
                $scope.datasets = datasets;
                $scope.noData = $scope.datasets[0].datatable.length === 0 ? true : false;
                $scope.isLoading = false
            })
        }
        /**
         * setSectionFn()
         * Toggle player and team sections
         *
         * @param {string} section - 'player' | 'team'
         */
        function setSectionFn(section) {
            var path = $location.path().split("/");
            path[1] = section;
            $location.path(path.join("/"))
        }
        $scope.$on("customFields", function(event, cf) {
            $scope.customFields = cf
        });
        $scope.$on("runit", function(event) {
            getStats()
        })
    }
})();
(function() {
    stats.controller("TrackingSectionCtrl", TrackingSectionCtrl);
    TrackingSectionCtrl.$inject = ["$scope", "$routeParams"];

    function TrackingSectionCtrl($scope, $routeParams) {
        /*
         * Append gametime lite whatever to page
         */
        var gametimeliteNode = document.createElement("link");
        gametimeliteNode.setAttribute("rel", "alternate");
        gametimeliteNode.setAttribute("href", "android-app://com.nbadigital.gametimelite/gametime/com.nbadigital.gametime/navigation/stats/player_tracking");
        document.head.appendChild(gametimeliteNode);
        $scope.$on("$routeChangeSuccess", function(event, routeData) {
            if (!$routeParams.Section) {
                return
            }
            $scope.Section = $routeParams.Section
        })
    }
})();
/*
 * NO 11/7 - derek worked on ths.... probably complete garbage
 */
stats.controller("TransactionsCtrl", function($scope, $location, $http, SEASONS, TEAMS, Splits, $timeout, $filter) {
    "use strict";
    $scope.showSplits = false;
    $scope.isLoading = true;
    $scope.noData = false;
    var seasonType = SEASONS.transactions;
    $scope.Teams = Splits.get(["OpponentTeamID"]).OpponentTeamID;
    $scope.Teams.options[0].text = "All Teams";
    $scope.Seasons = Splits.get([{
        name: "Season",
        initial: seasonType.Season,
        seasonRange: [seasonType.SeasonYearFrom, seasonType.SeasonYear]
    }]).Season;
    var data = [];
    $scope.onrunit = function() {
        $scope.isLoading = true;
        var dateGroupsArray = [];
        var dateGroupsObj = {};
        var filterByTeam = [];
        var filterBySeason = [];
        var startYear = $scope.Seasons.selected.val.slice(2, 4);
        var endYear = $scope.Seasons.selected.val.slice(-2);
        var selectedTeamID = $scope.Teams.selected.val;
        // filter by team
        data.forEach(function(row, index, array) {
            var teamID = parseInt(row.TEAM_ID, 10);
            var additionalID = parseInt(row.Additional_Sort, 10);
            var selectedID = parseInt(selectedTeamID, 10);
            if (teamID === selectedID) {
                filterByTeam.push(row)
            }
            if (additionalID === selectedID && additionalID > 0) {
                filterByTeam.push(row)
            }
        });
        // if filterByTeam length is 0, assume we need data for all teams
        var teamFilter = filterByTeam.length === 0 ? data : filterByTeam;
        // filter by season
        teamFilter.forEach(function(row, index, array) {
            var rowYear = row.TRANSACTION_DATE.slice(2, 4);
            if (rowYear >= startYear && rowYear <= endYear) {
                filterBySeason.push(row)
            }
        });
        // if filterBySeason length is 0, assume there is no data for the selected filters
        var seasonFilter = filterBySeason.length === 0 ? [] : filterBySeason;
        $scope.noData = filterBySeason.length === 0 ? true : false;
        if (filterBySeason.length > 0) {
            // sort data by date
            seasonFilter.forEach(function(row, index, array) {
                dateGroupsObj[row.TRANSACTION_DATE] = {};
                dateGroupsObj[row.TRANSACTION_DATE].label = $filter("date")(row.TRANSACTION_DATE, "M/dd/yyyy");
                dateGroupsObj[row.TRANSACTION_DATE].groups = {}
            });
            // create arrays for later use
            seasonFilter.forEach(function(row, index, array) {
                dateGroupsObj[row.TRANSACTION_DATE].groups[row.GroupSort] = []
            });
            // populate arrays
            seasonFilter.forEach(function(row, index, array) {
                dateGroupsObj[row.TRANSACTION_DATE].groups[row.GroupSort].push(row)
            });
            // add team data for each entry
            seasonFilter.forEach(function(row, index, array) {
                dateGroupsObj[row.TRANSACTION_DATE].groups[row.GroupSort].forEach(function(entry, index, array) {
                    var teamInfo = $filter("filter")(TEAMS, {
                        id: entry.TEAM_ID
                    });
                    entry.Team = {};
                    entry.Team = teamInfo[0]
                })
            });
            for (var date in dateGroupsObj) {
                dateGroupsArray.push(dateGroupsObj[date])
            }
            $scope.dateGroups = dateGroupsArray
        }
        $scope.isLoading = false
    };
    var stopped;
    var addToDom = function() {
        $scope.isLoading = true;
        stopped = $timeout(function() {
            $scope.isLoading = false;
            $scope.wait += 5;
            addToDom()
        }, 1e3)
    };
    var getRows = function(array, columns) {
        var rows = [];
        //http://stackoverflow.com/questions/8495687/split-array-into-chunks
        var i, j, temparray, chunk = columns;
        for (i = 0, j = array.length; i < j; i += chunk) {
            temparray = array.slice(i, i + chunk);
            rows.push(temparray)
        }
        return rows
    };
    var groupDates = function(array) {
        var tempArray = [];
        for (var i = 0, len = array.length; i < len; i++) {
            var oneUnder = array[i - 1];
            var thisDate = array[i];
            if (oneUnder && thisDate.TransactionDate == oneUnder.TransactionDate) {
                tempObject.transactions.push(array[i]);
                tempObject.transactions = $.unique(tempObject.transactions)
            } else {
                var tempObject = {
                    date: "",
                    transactions: []
                };
                tempObject.date = thisDate.TransactionDate;
                tempObject.transactions.push(thisDate);
                tempArray.push(tempObject)
            }
        }
        // for (var j in tempArray) {
        //     tempArray[j].transactions = $.unique(tempArray[j].transactions);
        // }
        return tempArray
    };
    $http.get("/js/data/playermovement/NBA_Player_Movement.json").then(function(resp) {
        data = resp.data.NBA_Player_Movement.rows;
        $scope.onrunit()
    });
    $scope.togglePlayer = function(player, array) {
        for (var i = 0, len = array.length; i < len; i++) {
            array[i].isShown = false
        }
        player.isShown = true
    }
}); /* global $, stats */
stats.controller("VsSummaryCtrl", ["$scope", "$location", "$routeParams", "StatsRequest", "$filter", "TEAMS", "SEASONS", "Splits", "$q", "DeepLinksFactory", function($scope, $location, $routeParams, StatsRequest, $filter, TEAMS, SEASONS, Splits, $q, DeepLinksFactory) {
    "use strict";
    var _locationSearchObj = DeepLinksFactory.getSearchURL();
    $scope.isLoading = true;
    $scope.limit = 5;
    $scope.params = {
        IsOnlyCurrentSeason: "0",
        LeagueID: "00",
        PlayerID1: 0,
        PlayerID2: 0,
        PlayerID3: 0,
        PlayerID4: 0,
        PlayerID5: 0,
        PlayerTeamID: _locationSearchObj.PlayerTeamID || 1,
        Season: SEASONS.playerVsPlayerStats.Season,
        SeasonType: "Regular Season",
        VsPlayerID1: 0,
        VsPlayerID2: 0,
        VsPlayerID3: 0,
        VsPlayerID4: 0,
        VsPlayerID5: 0,
        VsTeamID: _locationSearchObj.VsTeamID || 1
    };
    $scope.compare = {
        isReady: false,
        left: {
            type: "",
            hasPlayer: false,
            hasTeam: false,
            hasLineup: false,
            isLoading: true,
            lineup: [],
            lineupChosen: [],
            lineupIDs: [],
            lineupShow: false,
            info: {},
            checked: 0
        },
        right: {
            type: "",
            hasPlayer: false,
            hasTeam: false,
            hasLineup: false,
            isLoading: true,
            lineup: [],
            lineupShow: false,
            lineupChosen: [],
            lineupIDs: [],
            info: {},
            checked: 0
        }
    };
    var teams = TEAMS.slice(0);

    function filterByTeamId(n) {
        for (var i = 0, len = teams.length; i < len; i++) {
            if (n == teams[i].id) {
                return teams[i]
            }
        }
    }

    function getTeams() {
        var filterTeamForConference = function(n) {
            return n.conference == this
        };
        $scope.conferences = [{
            name: "Eastern",
            teams: teams.filter(filterTeamForConference.bind("Eastern"))
        }, {
            name: "Western",
            teams: teams.filter(filterTeamForConference.bind("Western"))
        }]
    }
    $scope.columns = [];
    for (var i in $scope.showCol) {
        $scope.showCol[i].name = i;
        $scope.columns.push($scope.showCol[i])
    }

    function getAllPlayers() {
        StatsRequest.get("playerList", "", $scope.params).then(function() {
            var playersAll = StatsRequest.getData().CommonAllPlayers.datatable;
            var playersActive = $filter("filter")(playersAll, {
                ROSTERSTATUS: 1
            });
            $scope.players = playersActive;
            $scope.isLoading = false
        })
    }

    function getLineupInfo(team, side) {
        var defer = $q.defer();
        $scope.params.TeamID = team;
        side.hasPlayer = false;
        side.hasTeam = false;
        StatsRequest.get("teamCommonRoster", "", $scope.params).then(function() {
            var dataset = StatsRequest.getData();
            side.lineup = dataset.CommonTeamRoster.datatable;
            // side.hasPlayer = false;
            // side.hasTeam = false;
            side.lineupShow = true;
            side.lineupTeam = team;
            defer.resolve(side.lineup)
        });
        return defer.promise
    }

    function getPlayerInfo(side) {
        var defer = $q.defer();
        StatsRequest.get("playerSummary", "", $scope.params).then(function() {
            $scope.params.PerMode = "Totals";
            var datasets = StatsRequest.getData();
            side.info = datasets.CommonPlayerInfo.datatable[0];
            $scope.isLoading = false;
            side.hasPlayer = true;
            // side.hasTeam = false;
            // side.hasLineup = false;
            side.team = filterByTeamId(side.info.TEAM_ID);
            side.type = "player";
            $scope.params.PlayerID = side.info.PERSON_ID;
            defer.resolve()
        });
        return defer.promise
    }
    $scope.switchSides = function() {
        var tempObj = $scope.compare.left;
        $scope.compare.left = $scope.compare.right;
        $scope.compare.right = tempObj
    };
    $scope.setStatType = function(stat, side, tag) {
        side.type = stat;
        side.lineup = [];
        side.lineupChosen = [];
        side.lineupIDs = [];
        side.checked = 0;
        side.hasTeam = false;
        side.hasLineup = false;
        side.hasPlayer = false;
        if (tag === "left") {
            $scope.compare.right.type = "";
            if (stat === "player" || stat === "team") {
                side.lineupShow = false
            }
        }
        $scope.compare.isReady = false
    };
    $scope.setTeam = function(team, side) {
        var defer = $q.defer();
        side.info = team;
        side.type = "team";
        side.hasTeam = true;
        // side.hasLineup = false;
        // side.hasPlayer = false;
        side.isReady = true;
        defer.resolve();
        return defer.promise
    };
    $scope.setLineup = function(side) {
        side.lineupShow = false;
        side.hasLineup = true;
        side.isReady = true;
        side.type = "lineup"
    };
    $scope.chooseLineup = function(team, side) { // Choose the team for lineup
        side.lineup = [];
        getLineupInfo(team, side);
        side.lineupShow = true;
        side.team = team
    };
    $scope.checkChange = function(item, side) {
        if (item.selected) {
            side.checked++;
            side.lineupChosen.push(item);
            side.lineupIDs.push(item.PLAYER_ID)
        } else {
            var _playerIndex = side.lineupIDs.indexOf(item.PLAYER_ID);
            side.lineupIDs.splice(_playerIndex, 1);
            side.lineupChosen.splice(_playerIndex, 1);
            side.checked--
        }
    };
    $scope.onSelect = function($item, $model, $label, side) {
        $scope.$item = $item;
        $scope.$model = $model;
        $scope.$label = $label;
        $scope.params.PlayerID = $scope.$model.PERSON_ID;
        getPlayerInfo(side);
        side.lineupRoutes = [];
        side.info = $scope.$model;
        side.info.paramID = $scope.params.PlayerID;
        side.isReady = true
    };
    $scope.$watch("compare", function(newVal, oldVal) {
        // if (newVal.left.type !== oldVal.left.type) {
        //   $scope.compare.right.type = '';
        // }
        // Private booleans for this $watch function.
        var _hasLineupLeft = $scope.compare.left.hasLineup;
        var _hasLineupRight = $scope.compare.right.hasLineup;
        var _hasPlayerLeft = $scope.compare.left.hasPlayer;
        var _hasPlayerRight = $scope.compare.right.hasPlayer;
        var _hasTeamLeft = $scope.compare.left.hasTeam;
        // More private booleans for this $watch function.
        var _isTeamVsPlayer = _hasTeamLeft && _hasPlayerRight;
        var _isPlayerVsPlayer = _hasPlayerLeft && _hasPlayerRight;
        var _isLineupVsLineup = _hasLineupLeft && _hasLineupRight;
        // Object literal populated later in this $watch function.
        var search = {};
        // Set isRead to true.
        if (_isTeamVsPlayer || _isPlayerVsPlayer || _isLineupVsLineup) {
            $scope.compare.isReady = true
        }
        // If 'Team Vs Player' or 'Player Vs Player'
        if (_isTeamVsPlayer || _isPlayerVsPlayer) {
            // Reset query string
            DeepLinksFactory.resetSearchURL();
            if (_hasTeamLeft) {
                search.TeamID = $scope.compare.left.info.id
            } else {
                search.PlayerID = $scope.compare.left.info.PERSON_ID
            }
            search.VsPlayerID = $scope.compare.right.info.PERSON_ID
        }
        // If 'Lineup Vs Lineup'
        if (_isLineupVsLineup) {
            // Reset query string
            DeepLinksFactory.resetSearchURL();
            // Join lineup IDs into a single string pair
            search.LineupIDs = $scope.compare.left.lineupIDs.join("~");
            search.VsLineupIDs = $scope.compare.right.lineupIDs.join("~");
            search.PlayerTeamID = search.TeamID = $scope.compare.left.team;
            search.VsTeamID = $scope.compare.right.team;
            var _PlayerNamesArray = [];
            var _VsPlayerNamesArray = [];
            $scope.compare.left.lineupChosen.forEach(function(value) {
                _PlayerNamesArray.push(value.PLAYER)
            });
            $scope.compare.right.lineupChosen.forEach(function(value) {
                _VsPlayerNamesArray.push(value.PLAYER)
            });
            search.PlayerNames = _PlayerNamesArray.join("~");
            search.VsPlayerNames = _VsPlayerNamesArray.join("~")
        }
        // Add the new query string to the URL
        DeepLinksFactory.setSearchURL(search);
        // Attach the new query string to the scope for use in tab links
        $scope.search = "?" + $location.url().split("?")[1]
    }, true);
    $scope.$on("$locationChangeStart", function() {
        var TeamID = $location.search().TeamID;
        var PlayerID = $location.search().PlayerID;
        var VsPlayerID = $location.search().VsPlayerID;
        if (!$scope.compare.isReady) {
            if (PlayerID && VsPlayerID) {
                $scope.params.PlayerID = PlayerID;
                getPlayerInfo($scope.compare.left).then(function() {
                    $scope.params.PlayerID = VsPlayerID;
                    getPlayerInfo($scope.compare.right).then(function() {
                        $scope.compare.isReady = true
                    })
                });
                return
            }
            if (TeamID && VsPlayerID) {
                var sideTeam = filterByTeamId(TeamID);
                $scope.setTeam(sideTeam, $scope.compare.left).then(function() {
                    $scope.params.PlayerID = VsPlayerID;
                    getPlayerInfo($scope.compare.right).then(function() {
                        $scope.compare.isReady = true
                    })
                });
                return
            }
            if (PlayerID) {
                $scope.params.PlayerID = PlayerID;
                getPlayerInfo($scope.compare.left)
            }
            if (TeamID) {
                var sideTeam = filterByTeamId(TeamID);
                $scope.setTeam(sideTeam, $scope.compare.left)
            }
        }
    });
    //mobile nav
    $scope.pages = [{
        value: "/advanced/",
        text: "Advanced"
    }, {
        value: "/misc/",
        text: "Misc"
    }, {
        value: "/scoring/",
        text: "Scoring"
    }, {
        value: "/fourfactors/",
        text: "Four Factors"
    }, {
        value: "/opponent/",
        text: "Opponent"
    }];
    $scope.onNavChange = function() {
        $location.path($scope.pages.page)
    };
    getAllPlayers();
    getTeams()
}]); /* global stats */
stats.controller("PlayerVsPlayerAdvancedCtrl", ["$scope", "$location", "Splits", "PlayerVersusService", "SEASONS", "DeepLinksFactory", function($scope, $location, Splits, PlayerVersusService, SEASONS, DeepLinksFactory) {
    "use strict";
    var _locationSearchObj = DeepLinksFactory.getSearchURL();
    var _isLineup = !!_locationSearchObj.LineupIDs;
    var FiltersArray = [];
    var LineupIDArray = [];
    var PlayerNameArray = [];
    var VsLineupIDArray = [];
    var VsPlayerNameArray = [];
    if (_isLineup) {
        LineupIDArray = _locationSearchObj.LineupIDs.split("~");
        PlayerNameArray = _locationSearchObj.PlayerNames.split("~");
        VsLineupIDArray = _locationSearchObj.VsLineupIDs.split("~");
        VsPlayerNameArray = _locationSearchObj.VsPlayerNames.split("~")
    }
    var splits = [{
        name: "Season",
        initial: _locationSearchObj.Season || SEASONS.playerVsPlayerStats.Season,
        seasonRange: $location.search().range
    }, {
        name: "SeasonType",
        initial: _locationSearchObj.SeasonType || SEASONS.playerVsPlayerStats.SeasonType,
        without: ["Pre Season"]
    }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames"];
    $scope.splits = Splits.get(splits);
    $scope.params = {
        Conference: "",
        DateFrom: "",
        DateTo: "",
        Division: "",
        GameSegment: "",
        LastNGames: 0,
        LeagueID: "00",
        Location: "",
        MeasureType: "Advanced",
        Month: 0,
        OpponentTeamID: 0,
        Outcome: "",
        PaceAdjust: "N",
        Period: 0,
        PerMode: _locationSearchObj.PerMode || "PerGame",
        PlayerID1: LineupIDArray[0] || 0,
        PlayerID2: LineupIDArray[1] || 0,
        PlayerID3: LineupIDArray[2] || 0,
        PlayerID4: LineupIDArray[3] || 0,
        PlayerID5: LineupIDArray[4] || 0,
        PlayerTeamID: _locationSearchObj.PlayerTeamID || 1,
        PlusMinus: "N",
        Rank: "N",
        Season: _locationSearchObj.Season || $scope.splits.Season.selected.val,
        SeasonSegment: "",
        SeasonType: _locationSearchObj.SeasonType || $scope.splits.SeasonType.selected.val,
        ShotClockRange: "",
        TeamID: $location.search().VsTeamID,
        VsConference: "",
        VsDivision: "",
        VsPlayerID1: VsLineupIDArray[0] || 0,
        VsPlayerID2: VsLineupIDArray[1] || 0,
        VsPlayerID3: VsLineupIDArray[2] || 0,
        VsPlayerID4: VsLineupIDArray[3] || 0,
        VsPlayerID5: VsLineupIDArray[4] || 0,
        VsTeamID: _locationSearchObj.VsTeamID || 1
    };
    if (_isLineup) {
        $scope.compare.left.lineupIDs = LineupIDArray.map(function(value) {
            return value
        });
        $scope.compare.right.lineupIDs = VsLineupIDArray.map(function(value) {
            return value
        });
        $scope.compare.left.lineupIDs.forEach(function(value, index) {
            $scope.compare.left.lineupChosen[index] = {
                PLAYER_ID: value,
                PLAYER: PlayerNameArray[index]
            }
        });
        $scope.compare.right.lineupIDs.forEach(function(value, index) {
            $scope.compare.right.lineupChosen[index] = {
                PLAYER_ID: value,
                PLAYER: VsPlayerNameArray[index]
            }
        });
        $scope.compare.left.lineup = $scope.compare.left.lineupIDs;
        $scope.compare.right.lineup = $scope.compare.right.lineupIDs;
        $scope.compare.left.type = $scope.compare.right.type = "lineup";
        PlayerVersusService.getStats($scope)
    }
    $scope.showCol = {
        MIN: {
            visible: false,
            index: 0,
            label: "MIN",
            format: "number",
            invert: false
        },
        OFF_RATING: {
            visible: false,
            index: 1,
            label: "OFF RATING",
            format: "number",
            invert: false
        },
        DEF_RATING: {
            visible: false,
            index: 2,
            label: "DEF RATING",
            format: "number",
            invert: true
        },
        NET_RATING: {
            visible: true,
            index: 3,
            label: "NET RATING",
            format: "number",
            invert: false
        },
        AST_PCT: {
            visible: false,
            index: 4,
            label: "AST %",
            format: "percent",
            invert: false
        },
        AST_TO: {
            visible: false,
            index: 5,
            label: "AST TO",
            format: "number",
            invert: false
        },
        AST_RATIO: {
            visible: true,
            index: 6,
            label: "AST RATIO",
            format: "number",
            invert: false
        },
        OREB_PCT: {
            visible: false,
            index: 7,
            label: "OREB %",
            format: "percent",
            invert: false
        },
        DREB_PCT: {
            visible: false,
            index: 8,
            label: "DREB %",
            format: "percent",
            invert: false
        },
        REB_PCT: {
            visible: true,
            index: 9,
            label: "REB %",
            format: "percent",
            invert: false
        },
        TM_TOV_PCT: {
            visible: false,
            index: 10,
            label: "TO RATIO",
            format: "percent",
            invert: true
        },
        EFG_PCT: {
            visible: true,
            index: 11,
            label: "EFG %",
            format: "percent",
            invert: false
        },
        TS_PCT: {
            visible: false,
            index: 12,
            label: "TS %",
            format: "percent",
            invert: false
        },
        USG_PCT: {
            visible: false,
            index: 13,
            label: "USG %",
            format: "percent",
            invert: false
        },
        PACE: {
            visible: false,
            index: 14,
            label: "PACE",
            format: "number",
            invert: false
        },
        PIE: {
            visible: true,
            index: 15,
            label: "PIE",
            format: "percent",
            invert: false
        }
    };
    $scope.columns = [];
    for (var i in $scope.showCol) {
        $scope.showCol[i].name = i;
        $scope.columns.push($scope.showCol[i])
    }
    $scope.onrunit = function() {
        // set isReady to true for $watch('compare') function
        $scope.compare.isReady = true;
        // create empty search object
        var _searchObj = {};
        // popupate objects
        for (var param in $scope.splits) {
            $scope.params[param] = _searchObj[param] = $scope.splits[param].selected.val
        }
        // get stats
        PlayerVersusService.getStats($scope);
        // attach the search object to the url
        DeepLinksFactory.setSearchURL(_searchObj)
    };
    $scope.$watch("compare", function() {
        if ($scope.compare.isReady) {
            $scope.params.PlayerID1 = $scope.compare.left.lineupIDs[0] || $scope.params.PlayerID1;
            $scope.params.PlayerID2 = $scope.compare.left.lineupIDs[1] || $scope.params.PlayerID2;
            $scope.params.PlayerID3 = $scope.compare.left.lineupIDs[2] || $scope.params.PlayerID3;
            $scope.params.PlayerID4 = $scope.compare.left.lineupIDs[3] || $scope.params.PlayerID4;
            $scope.params.PlayerID5 = $scope.compare.left.lineupIDs[4] || $scope.params.PlayerID5;
            $scope.params.VsPlayerID1 = $scope.compare.right.lineupIDs[0] || $scope.params.VsPlayerID1;
            $scope.params.VsPlayerID2 = $scope.compare.right.lineupIDs[1] || $scope.params.VsPlayerID2;
            $scope.params.VsPlayerID3 = $scope.compare.right.lineupIDs[2] || $scope.params.VsPlayerID3;
            $scope.params.VsPlayerID4 = $scope.compare.right.lineupIDs[3] || $scope.params.VsPlayerID4;
            $scope.params.VsPlayerID5 = $scope.compare.right.lineupIDs[4] || $scope.params.VsPlayerID5;
            $scope.params.TeamID = $scope.compare.left.team || $scope.params.PlayerTeamID;
            $scope.params.PlayerTeamID = $scope.compare.left.team || $scope.params.PlayerTeamID;
            $scope.params.VsTeamID = $scope.compare.right.team || $scope.params.VsTeamID;
            PlayerVersusService.getStats($scope);
            // splits[0].seasonRange = $location.search().range;
            $scope.splits = Splits.get(splits)
        }
    }, true)
}]); /*global $, angular, console, stats */
stats.controller("PlayerVsPlayerFourFactorsCtrl", ["$scope", "$location", "Splits", "PlayerVersusService", "SEASONS", function($scope, $location, Splits, PlayerVersusService, SEASONS) {
    "use strict";
    var splits = [{
        name: "Season",
        initial: SEASONS.playerVsPlayerStats.Season
    }, {
        name: "SeasonType",
        initial: SEASONS.playerVsPlayerStats.SeasonType,
        without: ["Pre Season"]
    }, "PerMode", "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames"];
    $scope.splits = Splits.get(splits);
    $scope.params = {
        Conference: "",
        DateFrom: "",
        DateTo: "",
        Division: "",
        GameSegment: $scope.splits.GameSegment.selected.val,
        LastNGames: $scope.splits.LastNGames.selected.val,
        LeagueID: "00",
        Location: $scope.splits.Location.selected.val,
        MeasureType: "Four Factors",
        Month: $scope.splits.Month.selected.val,
        OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
        Outcome: $scope.splits.Outcome.selected.val,
        PaceAdjust: $scope.splits.PaceAdjust.selected.val,
        Period: $scope.splits.Period.selected.val,
        PerMode: $scope.splits.PerMode.selected.val,
        PlayerID1: 0,
        PlayerID2: 0,
        PlayerID3: 0,
        PlayerID4: 0,
        PlayerID5: 0,
        PlayerTeamID: 0,
        PlusMinus: $scope.splits.PlusMinus.selected.val,
        Rank: $scope.splits.Rank.selected.val,
        Season: $scope.splits.Season.selected.val,
        SeasonSegment: $scope.splits.SeasonSegment.selected.val,
        SeasonType: $scope.splits.SeasonType.selected.val,
        ShotClockRange: "",
        TeamID: $location.search().VsTeamID,
        VsConference: $scope.splits.VsConference.selected.val,
        VsDivision: $scope.splits.VsDivision.selected.val,
        VsPlayerID1: 0,
        VsPlayerID2: 0,
        VsPlayerID3: 0,
        VsPlayerID4: 0,
        VsPlayerID5: 0,
        VsTeamID: 0
    };
    $scope.showCol = {
        MIN: {
            visible: false,
            index: 0,
            label: "MIN",
            format: "number",
            invert: false
        },
        EFG_PCT: {
            visible: true,
            index: 1,
            label: "EFG %",
            format: "percent",
            invert: false
        },
        FTA_RATE: {
            visible: true,
            index: 2,
            label: "FTA RT",
            format: "number",
            invert: false
        },
        TM_TOV_PCT: {
            visible: true,
            index: 3,
            label: "TM TV %",
            format: "percent",
            invert: false
        },
        OREB_PCT: {
            visible: true,
            index: 4,
            label: "OREB %",
            format: "percent",
            invert: false
        },
        OPP_EFG_PCT: {
            visible: true,
            index: 5,
            label: "OPP EFG %",
            format: "percent",
            invert: true
        },
        OPP_FTA_RATE: {
            visible: true,
            index: 6,
            label: "OPP FTA RT",
            format: "number",
            invert: true
        },
        OPP_TOV_PCT: {
            visible: true,
            index: 7,
            label: "OPP FTM",
            format: "percent",
            invert: true
        },
        OPP_OREB_PCT: {
            visible: false,
            index: 8,
            label: "OPP FTA",
            format: "percent",
            invert: true
        }
    };
    $scope.columns = [];
    for (var i in $scope.showCol) {
        $scope.showCol[i].name = i;
        $scope.columns.push($scope.showCol[i])
    }
    $scope.onrunit = function() {
        $location.search().Split = [];
        for (var i in $scope.splits) {
            var val = $scope.splits[i].selected.val;
            if (val != $scope.splits[i].default) {
                $location.search().Split.push(val)
            }
            $scope.params[i] = $scope.splits[i].selected.val
        }
        PlayerVersusService.getStats($scope);
        $location.search()
    };
    $scope.$watch("compare", function() {
        if ($scope.compare.isReady) {
            if ($scope.compare.left.type == "player") {
                $location.path("/");
                return
            }
            PlayerVersusService.getStats($scope);
            splits[0].seasonRange = $location.search().range;
            $scope.splits = Splits.get(splits)
        }
    }, true)
}]); /*global $, angular, console, stats */
stats.controller("PlayerVsPlayerOpponentCtrl", ["$scope", "$location", "Splits", "PlayerVersusService", "SEASONS", function($scope, $location, Splits, PlayerVersusService, SEASONS) {
    "use strict";
    var splits = [{
        name: "Season",
        initial: SEASONS.playerVsPlayerStats.Season
    }, {
        name: "SeasonType",
        initial: SEASONS.playerVsPlayerStats.SeasonType,
        without: ["Pre Season"]
    }, {
        name: "PerMode",
        include: [{
            val: "Per100Possessions",
            text: "Per 100 Poss"
        }, {
            val: "Per100Plays",
            text: "Per 100 Plays"
        }, {
            val: "Per48",
            text: "Per 48 Minutes"
        }, {
            val: "Per40",
            text: "Per 40 Minutes"
        }, {
            val: "Per36",
            text: "Per 36 Minutes"
        }, {
            val: "PerMinute",
            text: "Per 1 Minute"
        }, {
            val: "PerPossession",
            text: "Per 1 Poss"
        }, {
            val: "PerPlay",
            text: "Per 1 Play"
        }, {
            val: "MinutesPer",
            text: "Minutes Per"
        }]
    }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames"];
    $scope.splits = Splits.get(splits);
    $scope.params = {
        Conference: "",
        DateFrom: "",
        DateTo: "",
        Division: "",
        GameSegment: $scope.splits.GameSegment.selected.val,
        LastNGames: $scope.splits.LastNGames.selected.val,
        LeagueID: "00",
        Location: $scope.splits.Location.selected.val,
        MeasureType: "Opponent",
        Month: $scope.splits.Month.selected.val,
        OpponentTeamID: $scope.splits.OpponentTeamID.selected.val,
        Outcome: $scope.splits.Outcome.selected.val,
        PaceAdjust: $scope.splits.PaceAdjust.selected.val,
        Period: $scope.splits.Period.selected.val,
        PerMode: $scope.splits.PerMode.selected.val,
        PlayerID1: 0,
        PlayerID2: 0,
        PlayerID3: 0,
        PlayerID4: 0,
        PlayerID5: 0,
        PlayerTeamID: 0,
        PlusMinus: $scope.splits.PlusMinus.selected.val,
        Rank: $scope.splits.Rank.selected.val,
        Season: $scope.splits.Season.selected.val,
        SeasonSegment: $scope.splits.SeasonSegment.selected.val,
        SeasonType: $scope.splits.SeasonType.selected.val,
        ShotClockRange: "",
        TeamID: $location.search().VsTeamID,
        VsConference: $scope.splits.VsConference.selected.val,
        VsDivision: $scope.splits.VsDivision.selected.val,
        VsPlayerID1: 0,
        VsPlayerID2: 0,
        VsPlayerID3: 0,
        VsPlayerID4: 0,
        VsPlayerID5: 0,
        VsTeamID: 0
    };
    $scope.showCol = {
        MIN: {
            visible: false,
            index: 0,
            label: "MIN",
            format: "number",
            invert: false
        },
        OPP_FGM: {
            visible: false,
            index: 1,
            label: "OPP FGM",
            format: "number",
            invert: true
        },
        OPP_FGA: {
            visible: false,
            index: 2,
            label: "OPP FGA",
            format: "number",
            invert: true
        },
        OPP_FG_PCT: {
            visible: true,
            index: 3,
            label: "OPP FG%",
            format: "percent",
            invert: true
        },
        OPP_FG3M: {
            visible: false,
            index: 4,
            label: "OPP 3PM",
            format: "number",
            invert: true
        },
        OPP_FG3A: {
            visible: false,
            index: 5,
            label: "OPP 3PA",
            format: "number",
            invert: true
        },
        OPP_FG3_PCT: {
            visible: true,
            index: 6,
            label: "OPP 3P%",
            format: "percent",
            invert: true
        },
        OPP_FTM: {
            visible: false,
            index: 7,
            label: "OPP FTM",
            format: "number",
            invert: true
        },
        OPP_FTA: {
            visible: false,
            index: 8,
            label: "OPP FTA",
            format: "number",
            invert: true
        },
        OPP_FT_PCT: {
            visible: true,
            index: 9,
            label: "OPP FT%",
            format: "percent",
            invert: true
        },
        OPP_OREB: {
            visible: false,
            index: 10,
            label: "OPP OREB",
            format: "number",
            invert: true
        },
        OPP_DREB: {
            visible: false,
            index: 11,
            label: "OPP DREB",
            format: "number",
            invert: true
        },
        OPP_REB: {
            visible: true,
            index: 12,
            label: "OPP REB",
            format: "number",
            invert: true
        },
        OPP_AST: {
            visible: true,
            index: 13,
            label: "OPP AST",
            format: "number",
            invert: true
        },
        OPP_TOV: {
            visible: false,
            index: 14,
            label: "OPP TOV",
            format: "number",
            invert: false
        },
        OPP_STL: {
            visible: true,
            index: 15,
            label: "OPP STL",
            format: "number",
            invert: true
        },
        OPP_BLK: {
            visible: true,
            index: 16,
            label: "OPP BLK",
            format: "number",
            invert: true
        },
        OPP_PF: {
            visible: false,
            index: 17,
            label: "OPP PF",
            format: "number",
            invert: true
        },
        OPP_PTS: {
            visible: false,
            index: 18,
            label: "OPP PTS",
            format: "number",
            invert: true
        }
    };
    $scope.columns = [];
    for (var i in $scope.showCol) {
        $scope.showCol[i].name = i;
        $scope.columns.push($scope.showCol[i])
    }
    $scope.onrunit = function() {
        $location.search().Split = [];
        for (var i in $scope.splits) {
            var val = $scope.splits[i].selected.val;
            if (val != $scope.splits[i].default) {
                $location.search().Split.push(val)
            }
            $scope.params[i] = $scope.splits[i].selected.val
        }
        PlayerVersusService.getStats($scope);
        $location.search()
    };
    $scope.$watch("compare", function() {
        if ($scope.compare.isReady) {
            if ($scope.compare.left.type == "player") {
                $location.path("/");
                return
            }
            PlayerVersusService.getStats($scope);
            splits[0].seasonRange = $location.search().range;
            $scope.splits = Splits.get(splits)
        }
    }, true)
}]); /* global stats */
stats.controller("PlayerVsPlayerBaseCtrl", ["$scope", "$location", "Splits", "PlayerVersusService", "SEASONS", "DeepLinksFactory", function($scope, $location, Splits, PlayerVersusService, SEASONS, DeepLinksFactory) {
    "use strict";
    var _locationSearchObj = DeepLinksFactory.getSearchURL();
    var _isLineup = !!_locationSearchObj.LineupIDs;
    var FiltersArray = [];
    var LineupIDArray = [];
    var PlayerNameArray = [];
    var VsLineupIDArray = [];
    var VsPlayerNameArray = [];
    if (_isLineup) {
        LineupIDArray = _locationSearchObj.LineupIDs.split("~");
        PlayerNameArray = _locationSearchObj.PlayerNames.split("~");
        VsLineupIDArray = _locationSearchObj.VsLineupIDs.split("~");
        VsPlayerNameArray = _locationSearchObj.VsPlayerNames.split("~")
    }
    var splits = [{
        name: "Season",
        initial: _locationSearchObj.Season || SEASONS.playerVsPlayerStats.Season,
        seasonRange: $location.search().seasonRange
    }, {
        name: "SeasonType",
        initial: _locationSearchObj.SeasonType || "Regular Season",
        without: ["Pre Season"]
    }, {
        name: "PerMode",
        initial: _locationSearchObj.PerMode || "PerGame",
        include: [{
            val: "Per100Possessions",
            text: "Per 100 Poss"
        }, {
            val: "Per100Plays",
            text: "Per 100 Plays"
        }, {
            val: "Per48",
            text: "Per 48 Minutes"
        }, {
            val: "Per40",
            text: "Per 40 Minutes"
        }, {
            val: "Per36",
            text: "Per 36 Minutes"
        }, {
            val: "PerMinute",
            text: "Per 1 Minute"
        }, {
            val: "PerPossession",
            text: "Per 1 Poss"
        }, {
            val: "PerPlay",
            text: "Per 1 Play"
        }, {
            val: "MinutesPer",
            text: "Minutes Per"
        }]
    }];
    $scope.splits = Splits.get(splits);
    $scope.params = {
        Conference: "",
        DateFrom: "",
        DateTo: "",
        Division: "",
        GameSegment: "",
        LastNGames: 0,
        LeagueID: "00",
        Location: "",
        MeasureType: "Base",
        Month: 0,
        OpponentTeamID: 0,
        Outcome: "",
        PaceAdjust: "N",
        Period: 0,
        PerMode: _locationSearchObj.PerMode || "PerGame",
        PlayerID1: LineupIDArray[0] || 0,
        PlayerID2: LineupIDArray[1] || 0,
        PlayerID3: LineupIDArray[2] || 0,
        PlayerID4: LineupIDArray[3] || 0,
        PlayerID5: LineupIDArray[4] || 0,
        PlayerTeamID: _locationSearchObj.PlayerTeamID || 1,
        PlusMinus: "N",
        Rank: "N",
        Season: _locationSearchObj.Season || $scope.splits.Season.selected.val,
        SeasonSegment: "",
        SeasonType: _locationSearchObj.SeasonType || $scope.splits.SeasonType.selected.val,
        ShotClockRange: "",
        TeamID: $location.search().VsTeamID,
        VsConference: "",
        VsDivision: "",
        VsPlayerID1: VsLineupIDArray[0] || 0,
        VsPlayerID2: VsLineupIDArray[1] || 0,
        VsPlayerID3: VsLineupIDArray[2] || 0,
        VsPlayerID4: VsLineupIDArray[3] || 0,
        VsPlayerID5: VsLineupIDArray[4] || 0,
        VsTeamID: _locationSearchObj.VsTeamID || 1
    };
    if (_isLineup) {
        $scope.compare.left.lineupIDs = LineupIDArray.map(function(value) {
            return value
        });
        $scope.compare.right.lineupIDs = VsLineupIDArray.map(function(value) {
            return value
        });
        $scope.compare.left.lineupIDs.forEach(function(value, index) {
            $scope.compare.left.lineupChosen[index] = {
                PLAYER_ID: value,
                PLAYER: PlayerNameArray[index]
            }
        });
        $scope.compare.right.lineupIDs.forEach(function(value, index) {
            $scope.compare.right.lineupChosen[index] = {
                PLAYER_ID: value,
                PLAYER: VsPlayerNameArray[index]
            }
        });
        $scope.compare.left.lineup = $scope.compare.left.lineupIDs;
        $scope.compare.right.lineup = $scope.compare.right.lineupIDs;
        $scope.compare.left.type = $scope.compare.right.type = "lineup";
        PlayerVersusService.getStats($scope)
    }
    $scope.showCol = {
        MIN: {
            visible: false,
            index: 0,
            label: "MIN",
            format: "number",
            invert: false
        },
        FGM: {
            visible: false,
            index: 1,
            label: "FGM",
            format: "number",
            invert: false
        },
        FGA: {
            visible: false,
            index: 2,
            label: "FGA",
            format: "number",
            invert: false
        },
        FG_PCT: {
            visible: false,
            index: 3,
            label: "FG%",
            format: "percent",
            invert: false
        },
        FG3M: {
            visible: false,
            index: 4,
            label: "3PM",
            format: "number",
            invert: false
        },
        FG3A: {
            visible: false,
            index: 5,
            label: "3PA",
            format: "number",
            invert: false
        },
        FG3_PCT: {
            visible: false,
            index: 6,
            label: "3P%",
            format: "percent",
            invert: false
        },
        FTM: {
            visible: false,
            index: 7,
            label: "FTM",
            format: "number",
            invert: false
        },
        FTA: {
            visible: false,
            index: 8,
            label: "FTA",
            format: "number",
            invert: false
        },
        FT_PCT: {
            visible: false,
            index: 9,
            label: "FT%",
            format: "percent",
            invert: false
        },
        OREB: {
            visible: false,
            index: 10,
            label: "OREB",
            format: "number",
            invert: false
        },
        DREB: {
            visible: false,
            index: 11,
            label: "DREB",
            format: "number",
            invert: false
        },
        REB: {
            visible: true,
            index: 12,
            label: "REB",
            format: "number",
            invert: false
        },
        AST: {
            visible: true,
            index: 13,
            label: "AST",
            format: "number",
            invert: false
        },
        TOV: {
            visible: false,
            index: 14,
            label: "TOV",
            format: "number",
            invert: true
        },
        STL: {
            visible: true,
            index: 15,
            label: "STL",
            format: "number",
            invert: false
        },
        BLK: {
            visible: true,
            index: 16,
            label: "BLK",
            format: "number",
            invert: false
        },
        PF: {
            visible: false,
            index: 17,
            label: "PF",
            format: "number",
            invert: false
        },
        PTS: {
            visible: true,
            index: 18,
            label: "PTS",
            format: "number",
            invert: false
        }
    };
    $scope.columns = [];
    for (var i in $scope.showCol) {
        $scope.showCol[i].name = i;
        $scope.columns.push($scope.showCol[i])
    }
    $scope.onrunit = function() {
        // set isReady to true for $watch('compare') function
        $scope.compare.isReady = true;
        // create empty search object
        var _searchObj = {};
        // popupate objects
        for (var param in $scope.splits) {
            $scope.params[param] = _searchObj[param] = $scope.splits[param].selected.val
        }
        // get stats
        PlayerVersusService.getStats($scope);
        // attach the search object to the url
        DeepLinksFactory.setSearchURL(_searchObj)
    };
    $scope.$watch("compare", function() {
        if ($scope.compare.isReady) {
            $scope.params.PlayerID1 = $scope.compare.left.lineupIDs[0] || $scope.params.PlayerID1;
            $scope.params.PlayerID2 = $scope.compare.left.lineupIDs[1] || $scope.params.PlayerID2;
            $scope.params.PlayerID3 = $scope.compare.left.lineupIDs[2] || $scope.params.PlayerID3;
            $scope.params.PlayerID4 = $scope.compare.left.lineupIDs[3] || $scope.params.PlayerID4;
            $scope.params.PlayerID5 = $scope.compare.left.lineupIDs[4] || $scope.params.PlayerID5;
            $scope.params.VsPlayerID1 = $scope.compare.right.lineupIDs[0] || $scope.params.VsPlayerID1;
            $scope.params.VsPlayerID2 = $scope.compare.right.lineupIDs[1] || $scope.params.VsPlayerID2;
            $scope.params.VsPlayerID3 = $scope.compare.right.lineupIDs[2] || $scope.params.VsPlayerID3;
            $scope.params.VsPlayerID4 = $scope.compare.right.lineupIDs[3] || $scope.params.VsPlayerID4;
            $scope.params.VsPlayerID5 = $scope.compare.right.lineupIDs[4] || $scope.params.VsPlayerID5;
            $scope.params.TeamID = $scope.compare.left.team || $scope.params.PlayerTeamID;
            $scope.params.PlayerTeamID = $scope.compare.left.team || $scope.params.PlayerTeamID;
            $scope.params.VsTeamID = $scope.compare.right.team || $scope.params.VsTeamID;
            PlayerVersusService.getStats($scope);
            // splits[0].seasonRange = $location.search().range;
            $scope.splits = Splits.get(splits)
        }
    }, true)
}]); /* global stats */
stats.controller("PlayerVsPlayerMiscCtrl", ["$scope", "$location", "Splits", "PlayerVersusService", "SEASONS", "DeepLinksFactory", function($scope, $location, Splits, PlayerVersusService, SEASONS, DeepLinksFactory) {
    "use strict";
    var _locationSearchObj = DeepLinksFactory.getSearchURL();
    var _isLineup = !!_locationSearchObj.LineupIDs;
    var FiltersArray = [];
    var LineupIDArray = [];
    var PlayerNameArray = [];
    var VsLineupIDArray = [];
    var VsPlayerNameArray = [];
    if (_isLineup) {
        LineupIDArray = _locationSearchObj.LineupIDs.split("~");
        PlayerNameArray = _locationSearchObj.PlayerNames.split("~");
        VsLineupIDArray = _locationSearchObj.VsLineupIDs.split("~");
        VsPlayerNameArray = _locationSearchObj.VsPlayerNames.split("~")
    }
    var splits = [{
        name: "Season",
        initial: _locationSearchObj.Season || SEASONS.playerVsPlayerStats.Season,
        seasonRange: $location.search().SeasonRange
    }, {
        name: "PerMode",
        include: [{
            val: "Per100Possessions",
            text: "Per 100 Poss"
        }, {
            val: "Per100Plays",
            text: "Per 100 Plays"
        }, {
            val: "Per48",
            text: "Per 48 Minutes"
        }, {
            val: "Per40",
            text: "Per 40 Minutes"
        }, {
            val: "Per36",
            text: "Per 36 Minutes"
        }, {
            val: "PerMinute",
            text: "Per 1 Minute"
        }, {
            val: "PerPossession",
            text: "Per 1 Poss"
        }, {
            val: "PerPlay",
            text: "Per 1 Play"
        }, {
            val: "MinutesPer",
            text: "Minutes Per"
        }]
    }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames", "SeasonType"];
    $scope.splits = Splits.get(splits);
    $scope.params = {
        Conference: "",
        DateFrom: "",
        DateTo: "",
        Division: "",
        GameSegment: "",
        LastNGames: 0,
        LeagueID: "00",
        Location: "",
        MeasureType: "Misc",
        Month: 0,
        OpponentTeamID: 0,
        Outcome: "",
        PaceAdjust: "N",
        Period: 0,
        PerMode: _locationSearchObj.PerMode || "PerGame",
        PlayerID1: LineupIDArray[0] || 0,
        PlayerID2: LineupIDArray[1] || 0,
        PlayerID3: LineupIDArray[2] || 0,
        PlayerID4: LineupIDArray[3] || 0,
        PlayerID5: LineupIDArray[4] || 0,
        PlayerTeamID: _locationSearchObj.PlayerTeamID || 1,
        PlusMinus: "N",
        Rank: "N",
        Season: _locationSearchObj.Season || $scope.splits.Season.selected.val,
        SeasonSegment: "",
        SeasonType: _locationSearchObj.SeasonType || $scope.splits.SeasonType.selected.val,
        ShotClockRange: "",
        TeamID: $location.search().VsTeamID,
        VsConference: "",
        VsDivision: "",
        VsPlayerID1: VsLineupIDArray[0] || 0,
        VsPlayerID2: VsLineupIDArray[1] || 0,
        VsPlayerID3: VsLineupIDArray[2] || 0,
        VsPlayerID4: VsLineupIDArray[3] || 0,
        VsPlayerID5: VsLineupIDArray[4] || 0,
        VsTeamID: _locationSearchObj.VsTeamID || 1
    };
    if (_isLineup) {
        $scope.compare.left.lineupIDs = LineupIDArray.map(function(value) {
            return value
        });
        $scope.compare.right.lineupIDs = VsLineupIDArray.map(function(value) {
            return value
        });
        $scope.compare.left.lineupIDs.forEach(function(value, index) {
            $scope.compare.left.lineupChosen[index] = {
                PLAYER_ID: value,
                PLAYER: PlayerNameArray[index]
            }
        });
        $scope.compare.right.lineupIDs.forEach(function(value, index) {
            $scope.compare.right.lineupChosen[index] = {
                PLAYER_ID: value,
                PLAYER: VsPlayerNameArray[index]
            }
        });
        $scope.compare.left.lineup = $scope.compare.left.lineupIDs;
        $scope.compare.right.lineup = $scope.compare.right.lineupIDs;
        $scope.compare.left.type = $scope.compare.right.type = "lineup";
        PlayerVersusService.getStats($scope)
    }
    $scope.showCol = {
        MIN: {
            visible: false,
            index: 0,
            label: "MIN",
            format: "number",
            invert: false
        },
        PTS_OFF_TOV: {
            visible: true,
            index: 1,
            label: "PTS OFF TOV",
            format: "number",
            invert: false
        },
        PTS_2ND_CHANCE: {
            visible: true,
            index: 2,
            label: "PTS 2ND CHANCE",
            format: "number",
            invert: false
        },
        PTS_FB: {
            visible: true,
            index: 3,
            label: "PTS FB",
            format: "number",
            invert: false
        },
        PTS_PAINT: {
            visible: false,
            index: 4,
            label: "PTS PAINT",
            format: "number",
            invert: false
        },
        OPP_PTS_OFF_TOV: {
            visible: false,
            index: 5,
            label: "OPP PTS OFF TOV",
            format: "number",
            invert: true
        },
        OPP_PTS_2ND_CHANCE: {
            visible: false,
            index: 6,
            label: "OPP PTS 2ND CHANCE",
            format: "number",
            invert: true
        },
        OPP_PTS_FB: {
            visible: false,
            index: 7,
            label: "OPP PTS FB",
            format: "number",
            invert: true
        },
        OPP_PTS_PAINT: {
            visible: true,
            index: 8,
            label: "OPP PTS PAINT",
            format: "number",
            invert: true
        },
        BLK: {
            visible: false,
            index: 9,
            label: "BLK",
            format: "number",
            invert: false
        },
        BLKA: {
            visible: false,
            index: 10,
            label: "BLKA",
            format: "number",
            invert: true
        },
        PF: {
            visible: false,
            index: 11,
            label: "PF",
            format: "number",
            invert: true
        },
        PFD: {
            visible: false,
            index: 12,
            label: "PFD",
            format: "number",
            invert: true
        }
    };
    $scope.columns = [];
    for (var i in $scope.showCol) {
        $scope.showCol[i].name = i;
        $scope.columns.push($scope.showCol[i])
    }
    $scope.onrunit = function() {
        // set isReady to true for $watch('compare') function
        $scope.compare.isReady = true;
        // create empty search object
        var _searchObj = {};
        // popupate objects
        for (var param in $scope.splits) {
            $scope.params[param] = _searchObj[param] = $scope.splits[param].selected.val
        }
        // get stats
        PlayerVersusService.getStats($scope);
        // attach the search object to the url
        DeepLinksFactory.setSearchURL(_searchObj)
    };
    $scope.$watch("compare", function() {
        if ($scope.compare.isReady) {
            $scope.params.PlayerID1 = $scope.compare.left.lineupIDs[0] || $scope.params.PlayerID1;
            $scope.params.PlayerID2 = $scope.compare.left.lineupIDs[1] || $scope.params.PlayerID2;
            $scope.params.PlayerID3 = $scope.compare.left.lineupIDs[2] || $scope.params.PlayerID3;
            $scope.params.PlayerID4 = $scope.compare.left.lineupIDs[3] || $scope.params.PlayerID4;
            $scope.params.PlayerID5 = $scope.compare.left.lineupIDs[4] || $scope.params.PlayerID5;
            $scope.params.VsPlayerID1 = $scope.compare.right.lineupIDs[0] || $scope.params.VsPlayerID1;
            $scope.params.VsPlayerID2 = $scope.compare.right.lineupIDs[1] || $scope.params.VsPlayerID2;
            $scope.params.VsPlayerID3 = $scope.compare.right.lineupIDs[2] || $scope.params.VsPlayerID3;
            $scope.params.VsPlayerID4 = $scope.compare.right.lineupIDs[3] || $scope.params.VsPlayerID4;
            $scope.params.VsPlayerID5 = $scope.compare.right.lineupIDs[4] || $scope.params.VsPlayerID5;
            $scope.params.TeamID = $scope.compare.left.team || $scope.params.PlayerTeamID;
            $scope.params.PlayerTeamID = $scope.compare.left.team || $scope.params.PlayerTeamID;
            $scope.params.VsTeamID = $scope.compare.right.team || $scope.params.VsTeamID;
            PlayerVersusService.getStats($scope);
            // splits[0].seasonRange = $location.search().range;
            $scope.splits = Splits.get(splits)
        }
    }, true)
}]); /* global stats */
stats.controller("PlayerVsPlayerScoringCtrl", ["$scope", "$location", "Splits", "PlayerVersusService", "SEASONS", "DeepLinksFactory", function($scope, $location, Splits, PlayerVersusService, SEASONS, DeepLinksFactory) {
    "use strict";
    var _locationSearchObj = DeepLinksFactory.getSearchURL();
    var _isLineup = !!_locationSearchObj.LineupIDs;
    var FiltersArray = [];
    var LineupIDArray = [];
    var PlayerNameArray = [];
    var VsLineupIDArray = [];
    var VsPlayerNameArray = [];
    if (_isLineup) {
        LineupIDArray = _locationSearchObj.LineupIDs.split("~");
        PlayerNameArray = _locationSearchObj.PlayerNames.split("~");
        VsLineupIDArray = _locationSearchObj.VsLineupIDs.split("~");
        VsPlayerNameArray = _locationSearchObj.VsPlayerNames.split("~")
    }
    var splits = [{
        name: "Season",
        initial: _locationSearchObj.Season || SEASONS.playerVsPlayerStats.Season,
        seasonRange: $location.search().range
    }, {
        name: "SeasonType",
        initial: _locationSearchObj.SeasonType || SEASONS.playerVsPlayerStats.SeasonType,
        without: ["Pre Season"]
    }, {
        name: "PerMode",
        include: []
    }, "PlusMinus", "PaceAdjust", "Rank", "Outcome", "Location", "Month", "SeasonSegment", "OpponentTeamID", "VsConference", "VsDivision", "GameSegment", "Period", "LastNGames"];
    $scope.splits = Splits.get(splits);
    $scope.params = {
        Conference: "",
        DateFrom: "",
        DateTo: "",
        Division: "",
        GameSegment: "",
        LastNGames: 0,
        LeagueID: "00",
        Location: "",
        MeasureType: "Scoring",
        Month: 0,
        OpponentTeamID: 0,
        Outcome: "",
        PaceAdjust: "N",
        Period: 0,
        PerMode: _locationSearchObj.PerMode || "PerGame",
        PlayerID1: LineupIDArray[0] || 0,
        PlayerID2: LineupIDArray[1] || 0,
        PlayerID3: LineupIDArray[2] || 0,
        PlayerID4: LineupIDArray[3] || 0,
        PlayerID5: LineupIDArray[4] || 0,
        PlayerTeamID: _locationSearchObj.PlayerTeamID || 1,
        PlusMinus: "N",
        Rank: "N",
        Season: _locationSearchObj.Season || $scope.splits.Season.selected.val,
        SeasonSegment: "",
        SeasonType: _locationSearchObj.SeasonType || $scope.splits.SeasonType.selected.val,
        ShotClockRange: "",
        TeamID: $location.search().VsTeamID,
        VsConference: "",
        VsDivision: "",
        VsPlayerID1: VsLineupIDArray[0] || 0,
        VsPlayerID2: VsLineupIDArray[1] || 0,
        VsPlayerID3: VsLineupIDArray[2] || 0,
        VsPlayerID4: VsLineupIDArray[3] || 0,
        VsPlayerID5: VsLineupIDArray[4] || 0,
        VsTeamID: _locationSearchObj.VsTeamID || 1
    };
    if (_isLineup) {
        $scope.compare.left.lineupIDs = LineupIDArray.map(function(value) {
            return value
        });
        $scope.compare.right.lineupIDs = VsLineupIDArray.map(function(value) {
            return value
        });
        $scope.compare.left.lineupIDs.forEach(function(value, index) {
            $scope.compare.left.lineupChosen[index] = {
                PLAYER_ID: value,
                PLAYER: PlayerNameArray[index]
            }
        });
        $scope.compare.right.lineupIDs.forEach(function(value, index) {
            $scope.compare.right.lineupChosen[index] = {
                PLAYER_ID: value,
                PLAYER: VsPlayerNameArray[index]
            }
        });
        $scope.compare.left.lineup = $scope.compare.left.lineupIDs;
        $scope.compare.right.lineup = $scope.compare.right.lineupIDs;
        $scope.compare.left.type = $scope.compare.right.type = "lineup";
        PlayerVersusService.getStats($scope)
    }
    $scope.showCol = {
        MIN: {
            visible: false,
            index: 0,
            label: "MIN",
            format: "number",
            invert: false
        },
        PCT_FGA_2PT: {
            visible: false,
            index: 1,
            label: "% FGA 2PT",
            format: "percent",
            invert: false
        },
        PCT_FGA_3PT: {
            visible: false,
            index: 2,
            label: "% FGA 3PT",
            format: "percent",
            invert: false
        },
        PCT_PTS_2PT: {
            visible: false,
            index: 3,
            label: "% PTS 2PT",
            format: "percent",
            invert: false
        },
        PCT_PTS_2PT_MR: {
            visible: true,
            index: 4,
            label: "% PTS 2PT MR",
            format: "percent",
            invert: false
        },
        PCT_PTS_3PT: {
            visible: true,
            index: 5,
            label: "% PTS 3PT",
            format: "percent",
            invert: false
        },
        PCT_PTS_FB: {
            visible: true,
            index: 6,
            label: "% PTS FB",
            format: "percent",
            invert: false
        },
        PCT_PTS_FT: {
            visible: true,
            index: 7,
            label: "% PTS FT",
            format: "percent",
            invert: false
        },
        PCT_PTS_OFF_TOV: {
            visible: false,
            index: 8,
            label: "% PTS OFF TOV",
            format: "percent",
            invert: false
        },
        PCT_PTS_PAINT: {
            visible: true,
            index: 9,
            label: "% PTS PAINT",
            format: "percent",
            invert: false
        },
        PCT_AST_2PM: {
            visible: false,
            index: 10,
            label: "% AST 2PM",
            format: "percent",
            invert: false
        },
        PCT_UAST_2PM: {
            visible: false,
            index: 11,
            label: "% UAST 2PM",
            format: "percent",
            invert: false
        },
        PCT_AST_3PM: {
            visible: false,
            index: 12,
            label: "% AST 3PM ",
            format: "percent",
            invert: false
        },
        PCT_UAST_3PM: {
            visible: false,
            index: 13,
            label: "% UAST 3PM",
            format: "percent",
            invert: false
        },
        PCT_AST_FGM: {
            visible: false,
            index: 14,
            label: "% AST FGM",
            format: "percent",
            invert: false
        },
        PCT_UAST_FGM: {
            visible: false,
            index: 15,
            label: "% UAST FGM",
            format: "percent",
            invert: false
        }
    };
    $scope.columns = [];
    for (var i in $scope.showCol) {
        $scope.showCol[i].name = i;
        $scope.columns.push($scope.showCol[i])
    }
    $scope.onrunit = function() {
        // set isReady to true for $watch('compare') function
        $scope.compare.isReady = true;
        // create empty search object
        var _searchObj = {};
        // popupate objects
        for (var param in $scope.splits) {
            $scope.params[param] = _searchObj[param] = $scope.splits[param].selected.val
        }
        // get stats
        PlayerVersusService.getStats($scope);
        // attach the search object to the url
        DeepLinksFactory.setSearchURL(_searchObj)
    };
    $scope.$watch("compare", function() {
        if ($scope.compare.isReady) {
            $scope.params.PlayerID1 = $scope.compare.left.lineupIDs[0] || $scope.params.PlayerID1;
            $scope.params.PlayerID2 = $scope.compare.left.lineupIDs[1] || $scope.params.PlayerID2;
            $scope.params.PlayerID3 = $scope.compare.left.lineupIDs[2] || $scope.params.PlayerID3;
            $scope.params.PlayerID4 = $scope.compare.left.lineupIDs[3] || $scope.params.PlayerID4;
            $scope.params.PlayerID5 = $scope.compare.left.lineupIDs[4] || $scope.params.PlayerID5;
            $scope.params.VsPlayerID1 = $scope.compare.right.lineupIDs[0] || $scope.params.VsPlayerID1;
            $scope.params.VsPlayerID2 = $scope.compare.right.lineupIDs[1] || $scope.params.VsPlayerID2;
            $scope.params.VsPlayerID3 = $scope.compare.right.lineupIDs[2] || $scope.params.VsPlayerID3;
            $scope.params.VsPlayerID4 = $scope.compare.right.lineupIDs[3] || $scope.params.VsPlayerID4;
            $scope.params.VsPlayerID5 = $scope.compare.right.lineupIDs[4] || $scope.params.VsPlayerID5;
            $scope.params.TeamID = $scope.compare.left.team || $scope.params.PlayerTeamID;
            $scope.params.PlayerTeamID = $scope.compare.left.team || $scope.params.PlayerTeamID;
            $scope.params.VsTeamID = $scope.compare.right.team || $scope.params.VsTeamID;
            PlayerVersusService.getStats($scope);
            // splits[0].seasonRange = $location.search().range;
            $scope.splits = Splits.get(splits)
        }
    }, true)
}]);
(function() {
    stats.directive("inViewport", InViewportDirective);
    InViewportController.$inject = ["$scope", "$element", "$timeout", "$window"];

    function InViewportDirective() {
        return {
            restrict: "A",
            scope: {
                inViewport: "="
            },
            controller: InViewportController
        }
    }

    function InViewportController($scope, $element, $timeout, $window) {
        var $elm = angular.element($element);
        var $win = angular.element($window);
        $scope.hasFired = false;
        $scope.defaults = {
            triggerOnce: true,
            delay: 500,
            callback: function() {}
        };
        $scope.$watch("inViewport", function(opt) {
            if (!opt) {
                return
            }
            $scope.defaults = angular.extend({}, $scope.defaults, opt);
            $scope.hasFired = false;
            checkInViewport()
        }, true);
        angular.element($window).bind("scroll", checkInViewport);
        angular.element($window).bind("resize", checkInViewport);

        function checkInViewport(event) {
            var docTop = $win.scrollTop();
            var docBot = docTop + $win.height();
            var elmTop = $elm.offset().top;
            var elmBot = elmTop + $elm.height();
            // var inView = ((elmBot <= docBot) || (elmTop >= docTop));
            var inView = elmBot <= docBot + $elm.height();
            if (inView) {
                $scope.hasFired = true;
                $timeout($scope.defaults.callback.bind(this, $elm), $scope.defaults.delay)
            }
            // stop listening to events
            if ($scope.hasFired && $scope.defaults.triggerOnce) {
                angular.element($window).unbind("scroll", checkInViewport);
                angular.element($window).unbind("resize", checkInViewport)
            }
        }
    }
})();
/**
 * Stats Fanduel Chart Directive
 */
(function() {
    stats.directive("statsFanduelChart", statsFanduelChartDirective);
    statsFanduelChartController.$inject = ["$scope", "$filter"];

    function statsFanduelChartDirective() {
        return {
            restrict: "AE",
            replace: false,
            scope: {
                stats: "="
            },
            templateUrl: "/templates/charts/stats-fanduel-chart.html",
            controller: statsFanduelChartController
        }
    }

    function statsFanduelChartController($scope, $filter) {
        $scope.chart = {
            width: 590,
            height: 730,
            barchartMaxHeight: 220,
            barchartWidth: 30
        };
        $scope.isLoading = true;
        $scope.getStatTotalHeight = getStatTotalHeight;
        $scope.responsiveOptions = {
            min: 300,
            max: 1140
        };
        $scope.categories = ["PTS", "REB", "AST", "BLK", "STL", "TOV"];
        $scope.$watch("stats", onGameData, true);

        function onGameData(stats) {
            if (!stats) {
                return
            }
            $scope.chart.maxValue = getMaxValue(stats);
            $scope.isLoading = false
        }

        function getMaxValue(stats) {
            var max = 0;
            for (var i in $scope.categories) {
                var s = $scope.categories[i];
                var l = Math.max(stats.vtm.player[s], stats.htm.player[s]);
                max = l > max ? l : max
            }
            return max
        }

        function getStatTotalHeight(value) {
            return value / $scope.chart.maxValue * $scope.chart.barchartMaxHeight
        }
    }
})();
(function() {
    stats.directive("statsGameFlow", statsGameFlowDirective);
    statsGameFlowController.$inject = ["$scope"];

    function statsGameFlowDirective() {
        return {
            restrict: "E",
            transclude: false,
            templateUrl: "/templates/charts/stats-game-flow.html",
            scope: {
                gameSummary: "="
            },
            controller: statsGameFlowController
        }
    }

    function statsGameFlowController($scope) {
        $scope.svg = {
            height: 550,
            width: 1140
        };
        $scope.chart = {
            padding: {
                bottom: 120,
                left: 60,
                right: 40,
                top: 20
            }
        };
        $scope.responsiveOptions = {
            min: 300,
            max: 1140
        };
        $scope.chart.height = $scope.svg.height - ($scope.chart.padding.bottom + $scope.chart.padding.top);
        $scope.chart.width = $scope.svg.width - ($scope.chart.padding.left + $scope.chart.padding.right);
        $scope.$watch("gameSummary", onSummaryUpdate, true);

        function onSummaryUpdate(summary) {
            if (!summary || !summary.events) {
                return
            }
            $scope.summary = summary;
            var maxMargin = getMaxMargin(summary.events);
            var periods = getTotalPeriods(summary.events);
            var seconds = getTotalSeconds(periods);
            $scope.xAxis = getPeriodAxisMarkers(periods, $scope.chart.width);
            $scope.yAxisMargin = getMarginAxisDivisions(maxMargin, $scope.chart.height);
            $scope.eventData = parseEventData(summary.events, $scope.chart.width, seconds, $scope.chart.height, maxMargin);
            $scope.htmPath = getPathForEventArray($scope.eventData.htm, $scope.chart.height, $scope.chart.width);
            $scope.vtmPath = getPathForEventArray($scope.eventData.vtm, $scope.chart.height, $scope.chart.width)
        }
    } /*** MATH SHIT ***/
    /*
     * For creating score margin axis
     * find the highest point margin
     * and round up to the nearest 10
     */
    function getMaxMargin(events) {
        var margin = 0;
        for (var i in events) {
            margin = Math.abs(events[i].HOME_SCORE_MARGIN) > margin ? Math.abs(events[i].HOME_SCORE_MARGIN) : margin
        }
        var rounded = margin + 10 - (margin + 10) % 10;
        return rounded
    }
    /*
     * for drawing margin axis
     *
     * @returns array
     */
    function getMarginAxisDivisions(maxMargin, height) {
        var array = [];
        var spread = 5;
        var divisions = maxMargin / spread;
        var pixelsPerDivision = height / (divisions * 2);
        for (var i = maxMargin; i >= -maxMargin; i = i - spread) {
            var obj = {
                text: Math.abs(i)
            };
            array.push(obj)
        }
        for (var j in array) {
            array[j].y = j * pixelsPerDivision
        }
        return array
    }
    /*
     * create x axis markers
     * based on period
     *
     *
     * @returns Array
     */
    function getPeriodAxisMarkers(periods, width) {
        var array = [];
        var numOT = periods - 4;
        var totalMinutes = 12 * 4 + 5 * numOT;
        var pixelsPerMinute = width / totalMinutes;
        for (var i = 0; i < periods; i += 1) {
            var obj = {
                period: i + 1
            };
            if (periods <= 4) {
                obj.x = i * pixelsPerMinute * 12;
                obj.text = "Q" + obj.period
            } else if (periods > 4 && i < 4) {
                obj.x = i * pixelsPerMinute * 12;
                obj.text = "Q" + obj.period
            } else if (periods > 4 && i >= 4) {
                var ot = obj.period - 4;
                obj.x = 4 * pixelsPerMinute * 12 + (ot - 1) * pixelsPerMinute * 5;
                obj.text = "OT" + ot
            }
            array.push(obj)
        }
        return array
    }
    /*
     * get number of periods in game
     *
     * @returns number
     */
    function getTotalPeriods(events) {
        return events.slice(-1)[0].PERIOD
    }
    /*
     * get number of seconds in game
     *
     * @params periods (number) total number of periods in game
     *
     * @returns number
     */
    function getTotalSeconds(periods) {
        if (periods <= 4) {
            return periods * 720
        } else {
            return 2880 + (periods - 4) * 300
        }
    }
    /*
     * Get the x coordinate for a given period / time remaining
     *
     * @returns number
     */
    function getPathXPosition(period, secondsRemaining, pixelsPerSecond) {
        var second = 0;
        if (period <= 4) {
            second = (period - 1) * 720 + (720 - secondsRemaining)
        } else {
            second = 2880 + (period - 5) * 300 + (300 - secondsRemaining)
        }
        return second * pixelsPerSecond
    }
    /*
     * parseEventData
     *
     * @params events (array) array of game events
     * @params width (number) width of SVG chart
     * @params seconds (number) total number of seconds in game
     *
     * @returns object
     */
    function parseEventData(events, width, seconds, height, margin) {
        var half = height / 2;
        var pixelsPerSecond = width / seconds;
        var pixelsPerPoint = half / margin;
        var htm = [{
            e: null,
            x: 0,
            y: half
        }];
        var vtm = [{
            e: null,
            x: 0,
            y: half
        }];
        var pct = [{
            e: null,
            x: 0,
            y: half
        }];
        var pts = {
            htm: 0,
            vtm: 0
        };
        for (var i in events) {
            var e = events[i];
            var x = getPathXPosition(e.PERIOD, e.SECONDS_REMAINING, pixelsPerSecond);
            var obj;
            pts.htm = e.HOME_PTS;
            pts.vtm = e.VISITOR_PTS;
            htm.push({
                e: e,
                f: e.LOCATION == "h",
                x: x,
                y: Math.max(e.HOME_SCORE_MARGIN * pixelsPerPoint, 0) + half,
                z: e.HOME_SCORE_MARGIN * pixelsPerPoint + half
            });
            vtm.push({
                e: e,
                f: e.LOCATION == "v",
                x: x,
                y: Math.max(e.HOME_SCORE_MARGIN * -1 * pixelsPerPoint, 0) * -1 + half,
                z: e.HOME_SCORE_MARGIN * pixelsPerPoint + half
            });
            pct.push({
                e: e,
                x: x,
                y: (e.HOME_PCT - .5) * height + half
            })
        }
        htm.push({
            e: null,
            x: width,
            y: half
        });
        vtm.push({
            e: null,
            x: width,
            y: half
        });
        pct.push({
            e: null,
            x: width,
            y: half
        });
        return {
            htm: htm,
            vtm: vtm,
            pct: pct
        }
    }
    /*
     * get path for event array
     *
     * @params events (array) array of game events
     *
     * @returns string path
     */
    function getPathForEventArray(points, height, width) {
        var d = "M0 " + height / 2;
        for (var i in points) {
            var p = points[i];
            d += " H" + p.x.toFixed(1) + " V" + p.y.toFixed(1)
        }
        d += " H" + width + " V" + height / 2 + " Z";
        return d
    }
})();
/**
 * Stats Head to Head Chart Directive
 */
(function() {
    stats.directive("statsHeadToHeadChart", statsHeadToHeadChartDirective);
    statsHeadToHeadChartController.$inject = ["$scope", "$filter"];

    function statsHeadToHeadChartDirective() {
        return {
            restrict: "AE",
            replace: false,
            scope: {
                stats: "=",
                vtm: "=",
                htm: "="
            },
            templateUrl: "/templates/charts/stats-head-to-head-chart.html",
            controller: statsHeadToHeadChartController
        }
    }

    function statsHeadToHeadChartController($scope, $filter) {
        $scope.chart = {
            width: 800,
            height: 670,
            padding: {
                left: 90,
                right: 90,
                top: 20,
                bottom: 20
            },
            group: {
                height: 50,
                labelWidth: 100,
                padding: {
                    top: 20
                }
            }
        };
        $scope.chart.maxRectWidth = 280;
        $scope.isLoading = true;
        $scope.getStatTotal = getStatTotal;
        $scope.getFormattedStat = getFormattedStat;
        $scope.responsiveOptions = {
            min: 300,
            max: 1140
        };
        $scope.$watch("stats", onGameData, true);

        function onGameData(stats) {
            if (!stats) {
                return
            }
            $scope.chart.maxValue = getMaxValue(stats);
            $scope.isLoading = false
        }

        function getMaxValue(stats) {
            var max = 0;
            for (var i in stats) {
                var s = stats[i];
                var l = Math.max(s.vtm || 0, s.htm || 0);
                max = l > max ? l : max
            }
            return max
        }

        function getStatTotal(value) {
            if (isNaN(value)) {
                return 0
            }
            return value / $scope.chart.maxValue * $scope.chart.maxRectWidth
        }

        function getFormattedStat(stat, label) {
            if (isNaN(stat)) {
                return "-"
            }
            if (label.indexOf("%") > -1) {
                return stat.toFixed(1)
            }
            return stat
        }
    }
})();
/**
 * Stats Rose Chart Directive
 */
(function() {
    stats.directive("statsRoseChart", statsRoseChartDirective);
    statsRoseChartController.$inject = ["$scope", "$filter"];

    function statsRoseChartDirective() {
        return {
            restrict: "AE",
            replace: false,
            scope: {
                linescores: "="
            },
            templateUrl: "/templates/charts/stats-rose-chart.html",
            controller: statsRoseChartController
        }
    }

    function statsRoseChartController($scope, $filter) {
        $scope.width = 1140;
        $scope.height = 920;
        $scope.paddingTop = 200;
        $scope.chartHeight = $scope.height - $scope.paddingTop;
        $scope.isLoading = true;
        $scope.stats = [];
        $scope.getArcPath = getArcPath;
        $scope.responsiveOptions = {
            min: 300,
            max: 1140
        };
        var cats = ["REB", "BLK", "AST", "PTS"];
        var types = ["vtm", "htm"];
        var delta = 360 / (cats.length * types.length);
        var minRadius = 90;
        var maxRadius = 300;
        for (var i = 0; i < cats.length; ++i) {
            for (var j = 0; j < types.length; ++j) {
                var index = i * types.length + j;
                var obj = {
                    cat: cats[i],
                    type: types[j],
                    index: index,
                    angle: index * delta,
                    rads: (index * delta - 90 + delta / 2) * Math.PI / 180,
                    line: {
                        len: 350
                    },
                    side: index * delta + delta / 2 > 180 ? "left" : "right"
                };
                $scope.stats.push(obj)
            }
        }
        $scope.$watch("linescores", onGameData, true);

        function onGameData(linescores) {
            if (!linescores) {
                return
            }
            // bind stat leader to each stat type
            $scope.stats.forEach(getLeader.bind(null, linescores));
            // get max stat
            var statValues = $scope.stats.map(getStatValue);
            var max = Math.max.apply(Math, statValues);
            var ppp = (maxRadius - minRadius) / max;
            // set radius
            $scope.stats.forEach(setRadius.bind(null, ppp, minRadius));
            $scope.isLoading = false
        }

        function setRadius(ppp, min, stat) {
            stat.radius = ppp * stat.value + min;
            stat.cx = stat.radius * Math.cos(stat.rads);
            stat.cy = stat.radius * Math.sin(stat.rads);
            stat.line.x = stat.line.len * Math.cos(stat.rads);
            stat.line.y = stat.line.len * Math.sin(stat.rads);
            stat.left = stat.side === "left" ? -140 : 0
        }

        function getStatValue(stat) {
            return stat.value
        }

        function getLeader(game, stat) {
            var s = stat.cat;
            var t = stat.type;
            var players = game[t].players;
            stat.team = game[t];
            var leader = players.reduce(function(a, b) {
                if (!a || !a[s]) {
                    return b
                }
                if (!b || !b[s]) {
                    return a
                }
                if (a[s] >= b[s]) {
                    return a
                } else {
                    return b
                }
            });
            stat.value = leader[s];
            stat.player = leader
        }

        function getArcPath(x, y, radius, startAngle, endAngle) {
            var start = polarToCartesian(x, y, radius, endAngle);
            var end = polarToCartesian(x, y, radius, startAngle);
            var arcSweep = endAngle - startAngle <= 180 ? "0" : "1";
            var d = ["M", x, y, "L", start.x, start.y, "A", radius, radius, 0, arcSweep, 0, end.x, end.y, "Z"].join(" ");
            return d
        }

        function polarToCartesian(centerX, centerY, radius, angleInDegrees) {
            var angleInRadians = (angleInDegrees - 90) * Math.PI / 180;
            return {
                x: centerX + radius * Math.cos(angleInRadians),
                y: centerY + radius * Math.sin(angleInRadians)
            }
        }
    }
})(); /*global $, angular, sib, console */
/*jshint unused:false, eqnull:true */
/**
 * Directive used to display a team logo, including fallback if no image is returned
 * and PNG fallback if SVG is not supported.
 *
 * @param string teamAbbr
 * @param string type (pill | !pill) Pill returns small PNG, anything else returns large image
 */
stats.directive("statsShotchartDetail", function() {
    "use strict";
    return {
        restrict: "A",
        scope: {
            zone: "="
        },
        link: function postLink(scope, element, attrs) {
            scope.$watch("zone", function(zone) {
                if (!zone) {
                    return
                }
                console.log(zone);
                var svgNS = "http://www.w3.org/2000/svg";
                var ratio = document.createElementNS(svgNS, "text");
                ratio.setAttributeNS("", "text-anchor", "middle");
                ratio.setAttributeNS("", "stroke", "none");
                ratio.setAttributeNS("", "fill", "#000000");
                ratio.setAttributeNS("", "font-family", "Arial");
                ratio.setAttributeNS("", "font-size", "12px");
                ratio.setAttributeNS("", "dy", "0");
                ratio.textContent = zone.FGM + " / " + zone.FGA;
                var pct = document.createElementNS(svgNS, "text");
                pct.setAttributeNS("", "text-anchor", "middle");
                pct.setAttributeNS("", "stroke", "none");
                pct.setAttributeNS("", "fill", "#000000");
                pct.setAttributeNS("", "font-family", "Arial");
                pct.setAttributeNS("", "font-size", "12px");
                pct.setAttributeNS("", "dy", "14");
                pct.textContent = (zone.FG_PCT * 100).toFixed(1) + "%";
                element.append(ratio).append(pct)
            })
        }
    }
}); /*global $, angular, sib, console */
/*jshint unused:false, eqnull:true */
/**
 * Directive used to display a team logo, including fallback if no image is returned
 * and PNG fallback if SVG is not supported.
 *
 * @param string teamAbbr
 * @param string type (pill | !pill) Pill returns small PNG, anything else returns large image
 */
stats.directive("statsShotchartMarker", function() {
    "use strict";
    return {
        restrict: "A",
        scope: {
            shot: "="
        },
        link: function postLink(scope, element, attrs) {
            scope.$watch("shot", function(shot) {
                var translate = "translate(" + (shot.LOC_X + 250) * 1.2 + "," + (shot.LOC_Y + 50) * 1.2 + ")";
                var madeflag = shot.SHOT_MADE_FLAG ? "made" : "missed";
                element.html('<circle cx="0" cy="0" r="5" class="' + madeflag + '" />');
                element.attr("transform", translate)
            })
        }
    }
});
/**
 *
 *
 *
 *
 * @param stats object
  {
    left: {
      value: number (stat value),
      color: string (color hex)
    },
    right: {
      value: number (stat value),
      color: string (color hex)
    },
    label: string (stat label)
  }
 */
(function() {
    stats.directive("statsSvgBarCompare", statsSvgBarCompareDirective);
    statsSvgBarCompareController.$inject = ["$scope"];

    function statsSvgBarCompareDirective() {
        return {
            restrict: "A",
            scope: {
                stats: "="
            },
            templateUrl: "/templates/charts/stats-svg-bar-compare.html",
            controller: statsSvgBarCompareController
        }
    }

    function statsSvgBarCompareController($scope) {
        $scope.chart = {
            height: 100,
            width: 800,
            padding: {
                left: 50,
                right: 50,
                top: 10,
                bottom: 10
            },
            label: {
                width: 100
            },
            rectHeight: 40
        };
        $scope.$watch("stats", function(stats) {
            if (!stats) {
                return
            }
            $scope.total = stats.left.value + stats.right.value;
            $scope.pct = {
                left: stats.left.value / total,
                right: stats.right.value / total
            }
        })
    }
})();
(function() {
    stats.directive("statsSvgDonutChart", statsSvgDonutChartDirective);
    statsSvgDonutChartController.$inject = ["$scope"];

    function statsSvgDonutChartDirective() {
        return {
            restrict: "E",
            templateUrl: "/templates/charts/stats-svg-donut-chart.html",
            scope: {
                stat: "="
            },
            controller: statsSvgDonutChartController
        }
    }

    function statsSvgDonutChartController($scope) {
        $scope.padding = {
            left: 50,
            right: 50,
            top: 50
        };
        $scope.size = 300;
        $scope.half = $scope.size / 2;
        $scope.innerRadius = 70;
        $scope.statRadius = 40;
        $scope.responsiveOptions = {
            min: 80,
            max: 400
        };
        $scope.$watch("stat", onStatDataUpdate, true);

        function onStatDataUpdate(stat) {
            if (!stat) {
                return
            }
            var total = stat.vtm.value + stat.htm.value;
            var pct = stat.htm.value / total * 100;
            var unit = Math.PI * 2 / 100;
            var startangle = 0;
            var endangle = pct * unit;
            var half = $scope.half;
            var x1 = half + Math.sin(startangle) * half;
            var y1 = half - Math.cos(startangle) * half;
            var x2 = half + Math.sin(endangle) * half;
            var y2 = half - Math.cos(endangle) * half;
            var big = endangle - startangle > Math.PI ? 1 : 0;
            var d = ["M ", half, ",", half, " L ", x1, ",", y1, " A ", half, ",", half, " 0 ", big, " 1 ", x2, ",", y2, " Z"].join("");
            $scope.path = d
        }
    }
})();
/**
 * SVG Headshot Directive Directive
 */
(function() {
    stats.directive("statsSvgHeadshot", statsSvgHeadshotDirective);
    statsSvgHeadshotController.$inject = ["$scope"];

    function statsSvgHeadshotDirective() {
        return {
            restrict: "AE",
            replace: false,
            scope: {
                playerId: "@",
                playerName: "@",
                teamAbbr: "@",
                color: "@",
                x: "@",
                y: "@",
                side: "@"
            },
            templateUrl: "/templates/charts/stats-svg-headshot.html",
            controller: statsSvgHeadshotController
        }
    }

    function statsSvgHeadshotController($scope) {
        $scope.width = 140;
        $scope.left = 0;
        $scope.headshotHeight = 113;
        $scope.rectHeight = 52;
        $scope.height = $scope.headshotHeight + $scope.rectHeight;
        $scope.$watch("playerName", function(name) {
            if (!name) {
                return
            }
            $scope.firstName = name.match(/([a-zA-Z\-\.]+)(.*)/)[1].toUpperCase();
            $scope.lastName = name.match(/([a-zA-Z\-\.]+)(.*)/)[2].toUpperCase()
        });
        $scope.$watch("side", onAttrChange);
        $scope.$watch("x", onAttrChange);
        $scope.$watch("y", onAttrChange);

        function onAttrChange() {
            $scope.x = +$scope.x;
            $scope.y = +$scope.y;
            $scope.left = $scope.side === "left" ? $scope.width * -1 : 0
        }
    }
})();
/**
 * SVG Arc Directive Directive
 */
(function() {
    stats.directive("svgArc", svgArcDirective);
    svgArcController.$inject = ["$scope", "$filter"];

    function svgArcDirective() {
        return {
            restrict: "AE",
            replace: false,
            scope: {
                x: "@",
                y: "@",
                r: "@",
                angle: "@",
                color: "@"
            },
            template: ['<path ng-attr-d="{{ path }}" fill="{{ color }}" />'].join(""),
            controller: svgArcController
        }
    }

    function svgArcController($scope, $filter) {
        $scope.$watch("x", onAttrChange);
        $scope.$watch("y", onAttrChange);
        $scope.$watch("r", onAttrChange);
        $scope.$watch("angle", onAttrChange);

        function onAttrChange(attr) {
            var x = +$scope.x;
            var y = +$scope.y;
            var r = +$scope.r;
            var a = +$scope.angle;
            $scope.path = $filter("arcPath")(x, y, r, a, a + 45)
        }
    }
})();
(function() {
    stats.directive("svgImageEmbed", svgImageEmbedDirective);
    svgImageEmbedController.$inject = ["$scope", "$element"];

    function svgImageEmbedDirective() {
        return {
            restrict: "A",
            replace: false,
            transclude: false,
            scope: {
                href: "@",
                height: "@",
                width: "@"
            },
            controller: svgImageEmbedController
        }
    }

    function svgImageEmbedController($scope, $element) {
        var elm = angular.element($element).get(0);
        var imgsvg = document.createElementNS("http://www.w3.org/2000/svg", "image");
        $scope.$watch("href", onAttrChange, true);
        $scope.$watch("height", onAttrChange, true);
        $scope.$watch("width", onAttrChange, true);

        function onAttrChange() {
            if (!$scope.href || !$scope.height || !$scope.width) {
                return
            }
            while (elm.hasChildNodes()) {
                elm.removeChild(elm.lastChild)
            }
            imgsvg.setAttributeNS("http://www.w3.org/1999/xlink", "href", $scope.href);
            imgsvg.setAttribute("height", $scope.height);
            imgsvg.setAttribute("width", $scope.width);
            imgsvg.setAttribute("x", 0);
            imgsvg.setAttribute("y", 0);
            elm.appendChild(imgsvg)
        }
    }
})();
(function() {
    stats.directive("svgResponsive", svgResponsiveDirective);
    svgResponsiveController.$inject = ["$scope", "$element", "$window"];

    function svgResponsiveDirective() {
        return {
            restrict: "A",
            replace: false,
            scope: {
                svgResponsive: "="
            },
            controller: svgResponsiveController
        }
    }

    function svgResponsiveController($scope, $element, $window) {
        var $w = angular.element($window);
        $scope.getWindowDimensions = function() {
            return {
                h: $w.height(),
                w: $w.width()
            }
        };
        $scope.$watch("svgResponsive", function(options) {
            if (!options) {
                return
            }
            $scope.options = options;
            $scope.ratio = $element.attr("height") / $element.attr("width");
            $scope.container = options.selector ? angular.element(options.selector) : $element.parent().parent();
            resizeChart()
        });
        $scope.$watch($scope.getWindowDimensions, function(n, o) {
            resizeChart()
        }, true);

        function resizeChart() {
            if (!$scope.options) {
                return
            }
            var width = Math.max(Math.min($scope.container.width(), $scope.options.max), $scope.options.min);
            $element.attr("width", width);
            $element.attr("height", width * $scope.ratio)
        }
        $w.bind("resize", function() {
            $scope.$apply()
        })
    }
})();
/**
 * statsHomepageTile
 * Display the leaderboard tile on the homepage page.
 */
(function() {
    stats.directive("statsHomepageTile", statsHomepageTileDirective);

    function statsHomepageTileDirective() {
        return {
            restrict: "E",
            replace: false,
            scope: {
                dataset: "=",
                template: "@",
                tileIndex: "=",
                currentIndex: "="
            },
            templateUrl: function(elem, attr) {
                return ["/templates/homepage/", attr.template, ".html"].join("")
            },
            link: statsHomepageTileLink
        }
    }

    function statsHomepageTileLink(scope, elem, attr, ctrl) {
        // scope properties
        scope.isPlayer = false;
        scope.isTeam = false;
        // scope methods
        scope.changePanel = changePanel;
        // scope watchers
        scope.$watch("dataset", setState);
        scope.$watch("currentIndex", setVisibility);
        /**
         * setState()
         * set page state based on $watch('dataset')
         */
        function setState() {
            if (!scope.dataset || !scope.dataset.length) {
                return
            }
            scope.isPlayer = !!scope.dataset[0].PLAYER_ID;
            scope.isTeam = !scope.isPlayer;
            scope.leader = scope.dataset[0];
            scope.runnerups = scope.dataset.slice(1)
        }
        /**
         * setVisibility()
         * set visibility of each tile
         *
         * @param {number} index - the $scope.currentIndex
         */
        function setVisibility(index) {
            scope.isVisible = scope.tileIndex === index
        }
        /**
         * changePanelFn()
         * emit statsSeasonTilePanelDidChange to update tile index.
         *
         * @param {number} num - '1' | '-1'
         */
        function changePanel(num) {
            scope.$emit("statsHomepagePanelDidChange", num)
        }
    }
})();
(function() {
    stats.directive("statsPlayerProfileBio", function() {
        return {
            restrict: "E",
            templateUrl: "/templates/player/playerProfileBio.html",
            scope: {
                playerInfo: "="
            },
            controller: StatsPlayerProfileBioController
        }
    });
    StatsPlayerProfileBioController.$inject = ["$scope", "$sce", "PlayerBioService"];

    function StatsPlayerProfileBioController($scope, $sce, PlayerBioService) {
        function onPlayerInfo(playerinfo) {
            if (!playerinfo || !playerinfo.PERSON_ID) {
                return
            }
            PlayerBioService.get(playerinfo.PERSON_ID).then(function(data) {
                $scope.bio = $sce.trustAsHtml(data.Bio.professional)
            })
        }
        $scope.$watch("playerInfo", onPlayerInfo, false)
    }
})(); /*global angular, console */
/*
 * NO 11/7 - only used in one spot... remove directive and
 * replace this with an inline template
 */
stats.directive("statsSeriesMatchup", [function() {
    "use strict";
    return {
        restrict: "A",
        templateUrl: "/templates/playoffpicture/matchup.html",
        scope: {
            matchupInfo: "="
        }
    }
}]);
/**
 * fuck you no 
 * Displays the tab navigation on Playtype pages.
 */
(function() {
    "use strict";
    stats.directive("statsPlaytypeTabNav", statsPlaytypeTabNav);
    statsPlaytypeTabNav.$inject = ["$filter", "TAB_DEFINITIONS", "DeepLinksFactory"];

    function statsPlaytypeTabNav($filter, TAB_DEFINITIONS, DeepLinksFactory) {
        return {
            restrict: "E",
            replace: false,
            controller: statsPlaytypeTabNavCtrl,
            link: statsPlaytypeTabNavLink,
            template: ['<div class="stats-page-tabs tc11" ng-cloak>', '<div class="hidden-sm hidden-xs tabs-wrap">', '<div ng-repeat="tab in props.tabListArray" class="tab">', '<a href="/playtype/#!/{{::tab.value.url}}/?dir=1&OD={{state.currentOD}}&PT={{state.currentPT}}">{{::tab.value.shortHeading}}</a>', "</div>", "</div>", '<div class="visible-sm visible-xs select-wrap">', '<select name="section-links" ng-model="selected" ng-change="onNavChange();" ng-options="value.heading for (key, value) in tabListObj">', '<option value="">Select a Play Type</option>', "</select>", "</div>", "</div>"].join("")
        };

        function statsPlaytypeTabNavLink(scope, elem, attr, ctrl) {
            var _locationSearchObj = DeepLinksFactory.getSearchURL();
            var _hasSearchURL = DeepLinksFactory.hasSearchURL();
            scope.props = scope.props || {};
            scope.state = scope.state || {};
            scope.state.currentOD = _locationSearchObj.OD ? _locationSearchObj.OD : "offensive";
            scope.state.currentPT = _locationSearchObj.PT ? _locationSearchObj.PT : "player";
            scope.props.tabListArray = $filter("toArray")(TAB_DEFINITIONS.playtype)
        }
    }

    function statsPlaytypeTabNavCtrl() {}
})(); /*global angular, console */
/**
 * Scroll Left Directive
 *
 * @param {string} scrollLeft
 */
(function() {
    "use strict";
    angular.module("stats").directive("scrollLeft", function() {
        return {
            restrict: "A",
            replace: false,
            scope: {
                scrollLeft: "="
            },
            link: function(scope, element, attr) {
                scope.$watch("scrollLeft", function(left) {
                    element.scrollLeft(left)
                })
            }
        }
    })
})(); /*global angular, parent */
(function() {
    stats.directive("statsIframeDirective", statsIframeDirective);
    statsIframeController.$inject = ["$scope", "$element", "$window"];

    function statsIframeDirective() {
        return {
            restrict: "A",
            scope: {},
            controller: statsIframeController
        }
    }

    function statsIframeController($scope, $element, $window) {
        function resizeMsg() {
            //only allowed to route to listeners from origin domain or embedding page domain (iframe)
            var url = $window.location != $window.parent.location ? document.referrer : document.location;
            var eventData = {
                command: "resize",
                path: $window.location.pathname,
                height: $element.outerHeight(),
                "width:": $element.outerWidth()
            };
            parent.postMessage(angular.toJson(eventData), url)
        } /*watch the height size change and notify outer window*/
        /*Notice: may get the wrong height if angular do not have digest*/
        $scope.$watch(function() {
            return $element.outerHeight()
        }, function(newValue, oldValue) {
            resizeMsg()
        });
        // when window resize
        $window.addEventListener("resize", function() {
            resizeMsg()
        })
    }
})();
(function() {
    stats.directive("statsLoader", statsLoaderDirective);

    function statsLoaderDirective() {
        return {
            restrict: "A",
            replace: false,
            template: ['<div ng-show="statsLoader" class="loader">', '<img src="/media/img/pacifier.svg" />', "</div>"].join(""),
            scope: {
                statsLoader: "="
            }
        }
    }
})();
(function() {
    stats.directive("statsNoDataMsg", statsNoDataMsgDirective);

    function statsNoDataMsgDirective() {
        return {
            restrict: "A",
            replace: false,
            template: ['<div ng-show="statsNoDataMsg" class="no-data">', "<h1>No statistics are currently available for the selected filters.</h1>", "</div>"].join(""),
            scope: {
                statsNoDataMsg: "="
            }
        }
    }
})();
(function() {
    stats.directive("statsRunIt", statsRunItDirective);
    statsRunItController.$inject = ["$scope", "$location"];

    function statsRunItDirective() {
        return {
            restrict: "E",
            replace: true,
            template: ['<div class="col-sm-6 col-sm-offset-6 col-md-3 col-md-offset-9">', '<a href="" class="run-it" ng-click="runit();">Run It</a>', "</div>"].join(""),
            controller: statsRunItController
        }
    }

    function statsRunItController($scope, $location) {
        $scope.runit = function() {
            var splits = $scope.splits;
            var params = $scope.params;
            for (var i in splits) {
                var val = splits[i].selected.val;
                if (val == splits[i].default && i != "SeasonType" && i != "Season") {
                    $location.search(i, null)
                } else {
                    $location.search(i, val)
                }
                params[i] = val
            }
            $scope.$emit("runit")
        }
    }
})();
(function() {
    stats.directive("statsSplitSelect", statsSplitSelectDirective);

    function statsSplitSelectDirective() {
        return {
            restrict: "EA",
            scope: {
                split: "=?"
            },
            template: ['<select name="{{split.name}}" ng-model="split.selected" ng-options="v.text for v in split.options"></select>'].join("")
        }
    }
})();
(function() {
    stats.directive("statsTablePagination", statsTablePaginationDirective);

    function statsTablePaginationDirective() {
        return {
            restrict: "A",
            replace: true,
            template: ['<div class="table-pagination" ng-if="totalPages > 1">', '<span class="ng-scope ng-binding">Page {{currentPage}} of {{totalPages}} | {{totalRows}} Rows</span>', '<div class="page-nav left disabled" ng-class="{disabled: currentPage == 1}" ng-click="playerPaginate(\'prev\')"><i class="fa fa-caret-left"></i></div>', '<div class="page-nav right" ng-class="{disabled: currentPage == totalPages}" ng-click="playerPaginate(\'next\')"><i class="fa fa-caret-right"></i></div>', "</div>"].join("")
        }
    }
})(); /*global $, angular, sib, console */
/*jshint unused:false, eqnull:true */
/**
 * Directive used to display a team logo, including fallback if no image is returned
 * and PNG fallback if SVG is not supported.
 *
 * @param string teamAbbr
 * @param string type (pill | !pill) Pill returns small PNG, anything else returns large image
 */
stats.directive("statsBroadcasterLogo", function() {
    "use strict";
    return {
        restrict: "E",
        scope: {
            broadcaster: "="
        },
        replace: true,
        template: ['<div broadcaster-logo class="broadcaster {{ broadcaster }}">', ' <img ng-if="hasLogo" class="broadcast-logo" ng-src="{{ src }}" />', ' <span ng-if="!hasLogo" class="broadcast-text">{{ broadcaster }}</span>', "</div>"].join(""),
        controller: ["$scope", function($scope) {
            $scope.hasLogo = false;
            $scope.src = "";
            var root = "/media/img/broadcast-logos/";
            var logos = {
                ABC: "abc.png",
                ESPN: "espn.png",
                "ESPN 2": "espn2.png",
                "NBA TV": "nbatv.png",
                TNT: "tnt.png"
            };
            $scope.$watch("broadcaster", function(broadcaster) {
                var logo = logos[broadcaster];
                if (logo) {
                    $scope.src = root + logo;
                    $scope.hasLogo = true
                } else {
                    $scope.hasLogo = false
                }
            })
        }]
    }
});
/**
 *
 *
 */
stats.directive("statsCompareBar", ["$timeout", function($timeout) {
    "use strict";
    return {
        restrict: "AE",
        scope: {
            player: "@",
            vs: "@",
            invert: "="
        },
        controller: ["$scope", "$element", function($scope, $element) {
            function setBar() {
                var player = parseFloat($scope.player, 10);
                var vs = parseFloat($scope.vs, 10);
                var total = player + vs;
                var pct = player / total * 80;
                if (pct > 80) {
                    pct = 80
                }
                $element.css({
                    width: "0%"
                });
                $timeout(function() {
                    $element.css({
                        width: pct + "%"
                    });
                    if (player >= vs && !$scope.invert) {
                        $element.addClass("leader")
                    } else if (player <= vs && $scope.invert) {
                        $element.addClass("leader")
                    } else {
                        $element.removeClass("leader")
                    }
                }, 100)
            }
            $scope.$watch("player", setBar);
            $scope.$watch("vs", setBar);
            $scope.$watch("invert", setBar)
        }]
    }
}]);
/*
 *
 */
stats.directive("statsCompareSelector", ["SEASONS", "TEAMS", "PlayerListService", "PlayerSummaryService", "TeamRosterService", function(SEASONS, TEAMS, PlayerListService, PlayerSummaryService, TeamRosterService) {
    "use strict";
    return {
        restrict: "E",
        replace: true,
        templateUrl: "/templates/vs/selector.html",
        scope: {
            side: "@",
            type: "=",
            id: "="
        },
        controller: ["$scope", "$element", function($scope, $element) {
            $scope.isLoading = false;
            var elm = $element.get(0);
            $scope.options = [{
                type: "Player",
                enabled: elm.hasAttribute("player")
            }, {
                type: "Team",
                enabled: elm.hasAttribute("team")
            }, {
                type: "Lineup",
                enabled: elm.hasAttribute("lineup")
            }];
            $scope.show = {
                teamPicker: false,
                playerPicker: false,
                lineupPicker: false
            };
            $scope.conferences = [{
                name: "Eastern",
                divisions: ["Atlantic", "Central", "Southeast"]
            }, {
                name: "Western",
                divisions: ["Northwest", "Pacific", "Southwest"]
            }];
            $scope.teams = TEAMS;
            var params = {
                Season: SEASONS.site.Season,
                LeagueID: SEASONS.site.LeagueID,
                IsOnlyCurrentSeason: "1"
            };
            PlayerListService.get(params).then(function(players) {
                $scope.players = players
            });
            $scope.changeSelection = function(type) {
                console.log(type, $scope.side);
                $scope.show.selector = false;
                $scope.show.playerPicker = false;
                $scope.show.teamPicker = false;
                $scope.show.lineupPicker = false;
                if (type == "Player") {
                    $scope.show.playerPicker = true
                }
                if (type == "Team" || type == "Lineup") {
                    $scope.show.teamPicker = true
                }
            };
            $scope.selectPlayer = function(player) {
                $scope.show.playerPicker = false;
                console.log(player)
            };
            $scope.selectTeam = function(team) {
                $scope.show.teamPicker = false;
                if ($scope.show.lineupPicker) {
                    // getTeamRoster(team.id);
                    $scope.show.lineupPicker = true
                } else {
                    console.log("team selected", team)
                }
            };
            $scope.selectLineup = function(lineup) {
                $scope.lineupPicker = false
            }
        }]
    }
}]);
stats.directive("statsCustomFilter", ["$filter", function($filter) {
    "use strict";
    return {
        restrict: "A",
        replace: true,
        scope: {
            filter: "=",
            fields: "="
        },
        template: ["<table>", " <tr>", '   <td class="close"><button ng-click="remove()"><i class="fa fa-times"></i></button></td>', '   <td class="field"><select ng-model="field" ng-options="v.text for v in fields"></select></td>', '   <td class="comparator"><select ng-model="comparator" ng-options="v.v for v in comparators"></select></td>', '   <td class="val"><input type="text" ng-model="value" ng-model-options="{debounce: {default:500, blur:0}  }"></td>', " </tr>", "</div>"].join(""),
        controller: ["$scope", "$element", function($scope, $element) {
            // $scope.comparators = [
            //   {k:'E', v:'='},
            //   {k:'NE', v:'!='},
            //   {k:'G', v:'>'},
            //   {k:'GE', v:'>='},
            //   {k:'L', v:'<'},
            //   {k:'LE', v:'<='}
            // ];
            $scope.comparators = [{
                k: "E",
                v: "="
            }, {
                k: "NE",
                v: "≠"
            }, {
                k: "G",
                v: ">"
            }, {
                k: "GE",
                v: "≥"
            }, {
                k: "L",
                v: "<"
            }, {
                k: "LE",
                v: "≤"
            }];
            $scope.toggled = false;
            $scope.remove = function() {
                $scope.$emit("removeFilter", $scope.filter)
            };

            function initFilter() {
                if (!$scope.fields || !$scope.filter) {
                    return
                }
                var s = $scope.filter.value.split("*");
                $scope.field = $filter("filter")($scope.fields, {
                    name: s[0]
                }, true)[0];
                if (!$scope.field) {
                    $scope.field = $scope.fields[0]
                }
                $scope.comparator = $filter("filter")($scope.comparators, {
                    k: s[1]
                })[0];
                $scope.value = s[2]
            }

            function setFilter() {
                if (!$scope.field || !$scope.comparator) {
                    return
                }
                $scope.filter.value = [$scope.field.name, $scope.comparator.k, getScopeValue()].join("*");
                $scope.$emit("filterUpdated", $scope.filter)
            }
            $scope.$watch("filter", initFilter);
            $scope.$watch("fields", initFilter);
            $scope.$watch("field", setFilter);
            $scope.$watch("comparator", setFilter);
            $scope.$watch("value", setFilter);
            /**
             * getScopeValue()
             *
             * @returns {string} - the $scope.value property as-is, or converted to inches.
             */
            function getScopeValue() {
                var _setPlayerHeight = $scope.field.name === "PLAYER_HEIGHT_INCHES";
                // if we're setting player height...
                if (_setPlayerHeight) {
                    // return $scope.value as-is if its already large (60 = 5 feet); otherwise convert it...
                    return $scope.value > 60 ? $scope.value : $filter("toInches")($scope.value)
                } else {
                    // or just return $scope.value if we're setting other filters
                    return $scope.value
                }
            }
        }]
    }
}]);
stats.directive("statsCustomFilters", ["$filter", "$timeout", "$location", function($filter, $timeout, $location) {
    "use strict";

    function serializeCustomFilter(filters) {
        var str = filters.map(function(n) {
            return n.value
        }).join("|");
        $location.search("CF", str || null)
    }

    function deserializeCustomFilter() {
        var qs = $location.search().CF;
        if (!qs) {
            return []
        }
        var filters = qs.split("|").map(function(n, i) {
            return {
                name: "CF" + i,
                value: n
            }
        });
        return filters
    }
    return {
        restrict: "A",
        replace: false,
        scope: {
            filters: "=",
            fields: "="
        },
        template: ['<div class="col-sm-6 col-md-3">', ' <button class="add-filter" ng-click="addFilter()"><i class="fa fa-filter"></i> Add A Custom Filter</button>', "</div>", '<div ng-repeat="filter in filters" class="col-sm-6 col-md-3">', '   <div stats-custom-filter fields="fields" filter="filter"></div>', "</div>"].join(""),
        controller: ["$scope", "$element", "$document", function($scope, $element, $document) {
            if (!$scope.filters) {
                $scope.filters = deserializeCustomFilter()
            }
            var maxFilters = 5;
            var current = $scope.filters.length;
            $scope.addFilter = function() {
                if ($scope.filters.length >= maxFilters) {
                    return
                }
                current += 1;
                $scope.filters.push({
                    name: "CF" + current,
                    value: "**"
                });
                $scope.filters = $scope.filters.slice(0)
            };
            $scope.$on("removeFilter", function(event, filter) {
                $scope.filters = $filter("filter")($scope.filters, {
                    name: "!" + filter.name
                });
                serializeCustomFilter($scope.filters)
            });
            $scope.$on("filterUpdated", function(event, filter) {
                $scope.filters = $scope.filters.slice(0);
                serializeCustomFilter($scope.filters)
            });
            $scope.$watch("fields", function(fields) {
                $scope.fields = fields
            })
        }]
    }
}]); /* global angular, console */
/**
 * statsDragParent.js
 *
 * Based on https://docs.angularjs.org/guide/compiler
 *
 * The original angularjs.org code attaches the drag handler to the
 * same element that has the drag attribute. This does not work for
 * the modal.html template.
 *
 * Instead, the stats-drag-parent directive attaches the drag handler
 * to the parent of the element that has the drag attribute. This
 * makes the stats-popup.html template draggable site-wide.
 *
 */
stats.directive("statsDragParent", function($document) {
    return {
        restrict: "A",
        link: function(scope, element, attr) {
            var startX = 0;
            var startY = 0;
            var x = 0;
            var y = 0;
            var parentElem = element.parent();
            parentElem.css({
                position: "relative",
                cursor: "move"
            });
            parentElem.on("mousedown", function(event) {
                // Check the current target for the `is-interactive` class
                var _isInteractive = event.target.classList.contains("is-interactive");
                if (_isInteractive) {
                    // Do nothing if the current target is interactive...
                    return
                } else {
                    // Otherwise, make the target draggable.
                    event.preventDefault();
                    startX = event.screenX - x;
                    startY = event.screenY - y;
                    $document.on("mousemove", mousemove);
                    $document.on("mouseup", mouseup)
                }
            });

            function mousemove(event) {
                y = event.screenY - startY;
                x = event.screenX - startX;
                parentElem.css({
                    top: y + "px",
                    left: x + "px"
                })
            }

            function mouseup() {
                $document.off("mousemove", mousemove);
                $document.off("mouseup", mouseup)
            }
        }
    }
}); /*global angular, console */
/*
 * NO 11/7 - rename this stats-filter-toggle
 */
stats.directive("statsFilterButton", [function() {
    "use strict";
    return {
        restrict: "E",
        replace: true,
        template: ['<div class="filter-button spin" data-ng-class="{toggled: showSplits==true}" data-ng-click="showSplits=!showSplits;">', '  <div tooltip="Tap on the gear icon to filter your stats." tooltip-placement="top">', '    <i class="fa fa-gear"></i>', "  </div>", "</div>"].join("")
    }
}]); /*global $, angular, sib, console, IS_MOBILE */
stats.directive("statsModalLink", ["$modal", function($modal) {
    "use strict";
    return {
        restrict: "A",
        transclude: true,
        template: ["<span ng-transclude></span>"],
        link: function(scope, element, attrs) {
            element.on("click", function(e) {
                e.stopPropagation();
                e.preventDefault();
                var modalInstance = $modal.open({
                    templateUrl: "/templates/overlay/modal.html",
                    controller: "ModalInstanceCtrl",
                    size: "lg",
                    windowClass: attrs.type,
                    resolve: {
                        url: function() {
                            return attrs.href
                        },
                        title: function() {
                            return attrs.title
                        },
                        type: function() {
                            return attrs.type
                        }
                    }
                })
            })
        }
    }
}]);
/**
 * Directive used to display a player image, including fallback if no image is returned.
 *
 * @param {integer} playerId
 * @param {string} size (small || large)
 * @param {string} type (action || head || avatar)
 */
stats.directive("statsImgPlayer", function() {
    "use strict";
    return {
        restrict: "E",
        scope: {
            // Read in the scope's date variable as an object from the date attribute
            playerId: "=",
            // small | large
            size: "@",
            // action | head
            type: "@"
        },
        link: function postLink(scope, iElement, iAttrs) {
            scope.$watch("playerId", function(playerId) {
                var playerActionImgFull = "http://stats.nba.com/media/players/700/" + playerId + ".png";
                var playerActionImg2x = playerActionImgFull + "?interpolation=lanczos-none&resize=*:500px";
                var playerActionImg1x = playerActionImgFull + "?interpolation=lanczos-none&resize=*:300px";
                var playerHeadshotFull = "http://stats.nba.com/media/players/230x185/" + playerId + ".png";
                var playerHeadshot2x = playerHeadshotFull + "?interpolation=lanczos-none&resize=*:340px";
                var playerHeadshot1x = playerHeadshotFull + "?interpolation=lanczos-none&resize=*:170px";
                var playerAvatarFull = "http://stats.nba.com/media/players/132x132/" + playerId + ".png";
                var playerAvatar2x = playerAvatarFull + "?interpolation=lanczos-none&resize=*:70px";
                var playerAvatar1x = playerAvatarFull + "?interpolation=lanczos-none&resize=*:35px";
                var fallbackActionImg = "http://stats.nba.com/media/img/no-player_large.png";
                var fallbackHeadshot = "http://stats.nba.com/media/img/no-headshot_small.png";
                var fallbackUrl = "";
                if (playerId || scope.type || scope.size === undefined) {
                    iElement.html('<img class="not-found ' + iAttrs.class + '" alt="' + iAttrs.alt + '" src="' + fallbackActionImg + '">')
                }
                if (scope.type === "action") {
                    fallbackUrl = fallbackActionImg;
                    if (scope.size === "large") {
                        iElement.html('<img class="' + iAttrs.class + '" alt="' + iAttrs.alt + '" src="' + playerActionImgFull + '">')
                    } else {
                        iElement.html('<img class="' + iAttrs.class + '" alt="' + iAttrs.alt + '" src="' + playerActionImg1x + '" srcset="' + playerActionImgFull + " 3x, " + playerActionImg2x + " 2x, " + playerActionImg1x + ' 1x">')
                    }
                }
                if (scope.type === "head") {
                    fallbackUrl = fallbackHeadshot;
                    if (scope.size === "large") {
                        iElement.html('<img class="' + iAttrs.class + '" alt="' + iAttrs.alt + '" src="' + playerHeadshotFull + '">')
                    } else {
                        iElement.html('<img class="' + iAttrs.class + '" alt="' + iAttrs.alt + '" src="' + playerHeadshot1x + '" srcset="' + playerHeadshotFull + " 3x, " + playerHeadshot2x + " 2x, " + playerHeadshot1x + ' 1x">')
                    }
                }
                if (scope.type === "avatar") {
                    fallbackUrl = fallbackHeadshot;
                    if (scope.size === "large") {
                        iElement.html('<img class="' + iAttrs.class + '" alt="' + iAttrs.alt + '" src="' + playerAvatarFull + '">')
                    } else {
                        iElement.html('<img class="' + iAttrs.class + '" alt="' + iAttrs.alt + '" src="' + playerAvatar1x + '" srcset="' + playerAvatarFull + " 3x, " + playerAvatar2x + " 2x, " + playerAvatar1x + ' 1x">')
                    }
                }
                // If the image fails to load, fall back to an empty team logo
                // TODO: Needs PNG
                iElement.find("img").on("error", function() {
                    var img = angular.element(this);
                    img.attr("src", fallbackUrl).attr("srcset", "").addClass("not-found")
                })
            })
        }
    }
});
/**
 * Directive used to display the player summary module.
 *
 */
stats.directive("statsPlayerSummary", function() {
    "use strict";
    return {
        restrict: "E",
        replace: true,
        templateUrl: "/templates/player/summary.html"
    }
});
(function() {
    stats.directive("statsPlayerListRow", statsPlayerListRowDirective);
    statsPlayerListRowDirective.$inject = ["$filter"];

    function statsPlayerListRowDirective($filter) {
        return {
            restrict: "EA",
            scope: {
                letter: "="
            },
            link: function postLink(scope, iElement, iAttrs) {
                scope.$watch("letter", function(letter) {
                    var html = "";
                    html += '<div class="col-sm-1 player-initial">' + letter.initial + "</div>";
                    html += '<div class="col-sm-11"><div class="row">';
                    for (var i = 1; i < 4; i += 1) {
                        html += '<div class="col-sm-4 player-list-column">';
                        var groups = $filter("listColumn")(letter.items, i, 3);
                        for (var j in groups) {
                            var player = groups[j];
                            var playerStatus = player.ROSTERSTATUS == 1 ? "active" : "historic";
                            html += "<div>";
                            if (playerStatus == "active") {
                                html += '<a class="' + playerStatus + '" href="http://www.nba.com/playerfile/' + player.PLAYERCODE + '/">' + player.DISPLAY_LAST_COMMA_FIRST + "</a> [" + player.TEAM_ABBREVIATION + "]"
                            } else {
                                html += '<a class="' + playerStatus + '" href="/player/#!/' + player.PERSON_ID + '/">' + player.DISPLAY_LAST_COMMA_FIRST + "</a>"
                            }
                            html += "</div>"
                        }
                        html += "</div>"
                    }
                    html += "</div></div>";
                    iElement.html(html)
                })
            }
        }
    }
})();
/**
 * Directive used to display a player image, including fallback if no image is returned.
 * @param integer playerId
 */
stats.directive("statsImgPlaylistThumbnail", function() {
    "use strict";
    return {
        restrict: "E",
        scope: {
            videodata: "="
        },
        link: function postLink(scope, iElement, iAttrs) {
            scope.$watch("videodata", function(item) {
                if (item === undefined) {
                    return
                }
                var fallbackUrl = "http://stats.nba.com/media/video/thumbs/nothumb.jpg";
                var thumbnailUrl = "http://stats.nba.com/media/video/thumbs/" + item.y + "" + item.m + "" + item.d + "/" + item.ri + "_" + item.ei + ".jpg";
                iElement.html('<img class="thumbnail ' + iAttrs["class"] + '" alt="' + iAttrs["alt"] + '" src="' + thumbnailUrl + '">');
                // If the image fails to load, fall back to an empty team logo
                iElement.find("img").bind("error", function() {
                    var $img = angular.element(this);
                    $img.attr("src", fallbackUrl);
                    iElement.addClass("not-found")
                })
            })
        }
    }
}); /*global $, angular, sib, console, IS_MOBILE */
stats.directive("statsPopup", ["$filter", "$modal", "$timeout", "$location", function($filter, $modal, $timeout, $location) {
    "use strict";
    return {
        restrict: "EA",
        scope: {
            title: "@",
            desc: "@",
            placement: "@",
            video: "@",
            shotchart: "@",
            tracking: "@",
            movement: "@",
            field: "@",
            eventid: "@",
            params: "=",
            row: "=",
            ai: "="
        },
        templateUrl: "/templates/lib/stats-popup.html",
        link: function postLink(scope, iElement, iAttrs) {
            var params = angular.extend({
                CFID: scope.row.CFID || "",
                CFPARAMS: scope.row.CFPARAMS || "",
                PlayerID: scope.row.PLAYER_ID || "0",
                TeamID: scope.row.TEAM_ID || "0",
                GameID: scope.row.GAME_ID || scope.row.Game_ID || "",
                ContextMeasure: scope.field,
                Season: "",
                SeasonType: ""
            }, scope.params);
            /*
             * fix for params teamid taking priority
             * over row teamid
             * 10/17 - no
             */
            if (scope.row.TEAM_ID) {
                params.TeamID = scope.row.TEAM_ID
            }
            /*
             *
             *
             *
             *
             *
             */
            var section = document.location.pathname.split("/")[1];
            var title = "";
            switch (section) {
                case "game":
                    if (scope.ai && scope.field) {
                        title += (scope.row.PLAYER_NAME || scope.row.TEAM_CITY + " " + scope.row.TEAM_NAME) + " " + scope.field + " during " + scope.ai.gamename + " - " + scope.ai.gamedate
                    } else {
                        // play by play
                        title += scope.desc + " during " + scope.ai.gamename + " - " + scope.ai.gamedate
                    }
                    break;
                case "leaders":
                    title += scope.row.PLAYER + " " + scope.field + " during " + params.Season + " " + params.SeasonType;
                    break;
                case "league":
                    params.CFID = "";
                    params.CFPARAMS = "";
                    title += (scope.row.PLAYER_NAME || scope.row.TEAM_NAME || scope.row.GROUP_NAME) + " " + scope.field + " during " + params.Season + " " + params.SeasonType;
                    if (scope.params.ClutchTime) {
                        title += " - " + scope.params.AheadBehind + " in the " + scope.params.ClutchTime + " by " + scope.params.PointDiff + " points or less"
                    }
                    if (scope.row.MATCHUP) {
                        title += " (" + scope.row.MATCHUP + ")"
                    }
                    if (document.location.pathname.indexOf("lineups") > -1) {
                        params.islineup = 1;
                        params.GroupID = params.GROUP_ID = scope.row.GROUP_ID
                    }
                    break;
                case "team":
                    if (scope.ai) {
                        if (scope.row.PLAYER_NAME) {
                            title += " (" + scope.row.PLAYER_NAME + ") "
                        }
                        title += scope.ai.TEAM_CITY + " " + scope.ai.TEAM_NAME + " " + scope.field + " during " + params.Season + " " + params.SeasonType;
                        if (scope.row.MATCHUP) {
                            title += " (" + scope.row.GAME_DATE + " " + scope.row.MATCHUP + ")"
                        }
                        if (scope.row.CFPARAMS) {
                            title += " (" + scope.row.CFPARAMS + ")"
                        }
                    }
                    break;
                case "player":
                    if (scope.ai) {
                        title += scope.ai.DISPLAY_FIRST_LAST + " " + scope.field + " during " + params.Season + " " + params.SeasonType;
                        if (scope.row.MATCHUP) {
                            title += " (" + scope.row.GAME_DATE + " " + scope.row.MATCHUP + ")"
                        }
                        if (scope.row.CFPARAMS) {
                            title += " (" + scope.row.CFPARAMS + ")"
                        }
                    }
                    break;
                case "vs":
                    title += scope.row.GROUP_VALUE + " " + scope.field + " during " + params.Season + " " + params.SeasonType;
                    if (params.PlayerID === "0") {
                        params.CFID = ""
                    } else {
                        params.CFID = "";
                        params.TeamID = "0"
                    }
                    break;
                case "default":
                    title += "";
                    break
            }
            scope.contextTitle = scope.title || title;
            /*
             *
             *
             *
             *
             */
            var seasonyear = parseInt(params.Season.substring(0, 4), 10);
            var querystring = $filter("param")(params);
            if ((scope.row.GAME_ID || scope.row.Game_ID) && scope.row.EVENTNUM) {
                querystring = "GameID=" + (scope.row.GAME_ID || scope.row.Game_ID) + "&GameEventID=" + scope.row.EVENTNUM
            }
            var placement = typeof iAttrs.placement != "undefined" ? iAttrs.placement : "left";
            scope.videoURL = "http://stats.nba.com/cvp.html?" + querystring;
            scope.shotchartURL = "/shotchart/#!/?" + querystring;
            //        scope.trackingURL = '/playlist/#!/movement?' + querystring;
            //        scope.movementURL = '/playlist/#!/movement?' + querystring;
            //        scope.pbpmovementURL = '/movement/#!/?' + querystring;
            scope.hasVideo = typeof iAttrs.video != "undefined" && iAttrs.video !== false && !IS_MOBILE && seasonyear > 2011 && params.SeasonType != "Preseason";
            scope.hasShotchart = typeof iAttrs.shotchart != "undefined" && iAttrs.shotchart !== false && seasonyear > 2e3 && params.SeasonType != "Preseason";
            //        scope.hasTracking = (typeof iAttrs.tracking != 'undefined' && iAttrs.tracking !== false && seasonyear > 2013 && params.SeasonType != 'Preseason');
            //        scope.hasMovement = (typeof iAttrs.movement != 'undefined' && iAttrs.movement !== false && seasonyear > 2013 && params.SeasonType != 'Preseason');
            //        scope.hasPBPMovement = (typeof iAttrs.pbpmovement != 'undefined' && iAttrs.movement !== false && seasonyear > 2013 && params.SeasonType != 'Preseason');
            scope.hasTracking = false;
            scope.hasMovement = false;
            scope.hasPBPMovement = false;
            if (scope.hasVideo || scope.hasShotchart || scope.hasTracking || scope.hasMovement) {
                iElement.parent().addClass("stats-popup-link").on("click", function() {
                    var parentTable = $(this).parents(".table-responsive");
                    var svtlink = iElement.find(".svtlink");
                    svtlink.show().addClass(placement);
                    if (IS_MOBILE) {
                        overrideStyle().addTo(parentTable)
                    }
                    $timeout(function() {
                        $("body").one("click", function() {
                            svtlink.hide();
                            if (IS_MOBILE) {
                                overrideStyle().removeFrom(parentTable)
                            }
                        })
                    }, 100)
                })
            }
            scope.openOverlay = function(url, type, title) {
                var modalInstance = $modal.open({
                    templateUrl: "/templates/overlay/modal.html",
                    controller: "ModalInstanceCtrl",
                    size: "lg",
                    windowClass: type,
                    resolve: {
                        url: function() {
                            return url
                        },
                        title: function() {
                            return title
                        },
                        type: function() {
                            return type
                        }
                    }
                })
            }
        }
    };

    function overrideStyle() {
        return {
            addTo: function add(elem) {
                elem.attr({
                    style: "-webkit-overflow-scrolling:auto;"
                })
            },
            removeFrom: function remove(elem) {
                elem.attr({
                    style: ""
                })
            }
        }
    }
}]); /*global $, angular, sib, console, IS_MOBILE */
stats.directive("statsSplitDate", ["$filter", function($filter) {
    "use strict";
    return {
        restrict: "EA",
        scope: {
            split: "=?"
        },
        template: ['<p class="input-group stats-date-split stats-calendar">', '  <input type="text" datepicker-options="dateOptions" placeholder="{{ split.label }}" name="{{ split.name }}" class="form-control" datepicker-popup="MM/dd/yyyy" ng-model="dt" is-open="opened" show-button-bar="false" />', '  <span class="input-group-btn">', '   <button type="button" class="stats-calendar-button" ng-click="open($event)" tooltip="{{ split.label }}"><i class="fa fa-calendar"></i></button>', "  </span>", "</p>"].join(""),
        controller: function($scope) {
            $scope.opened = false;
            $scope.open = function($event) {
                $event.preventDefault();
                $event.stopPropagation();
                $scope.opened = !$scope.opened
            };
            $scope.dateOptions = {
                datepickerAppendToBody: true,
                showWeeks: false,
                showButtonBar: false
            };
            if (!$scope.split) {
                $scope.split = {
                    selected: {}
                }
            }
            $scope.dt = $scope.split.selected.val;
            $scope.$watch("dt", function(dt) {
                $scope.split.selected.val = $filter("date")($scope.dt, "MM/dd/yyyy") || ""
            });
            $scope.$watch("split", function(split) {
                $scope.dt = $scope.split.selected.val
            })
        }
    }
}]); /*global $, angular, console */
/*jshint unused:false, eqnull:true */
/**
 * Directive used to display a team logo, including fallback if no image is returned
 * and PNG fallback if SVG is not supported.
 *
 * @param {string} teamAbbr - The 3-letter team abbrivation.
 * @param {string} season - optional season id for historic logso
 * @param {string} [type] - If type equals `pill` returns small PNG. Anything else returns large SVG.
 */
stats.directive("statsImgTeam", function() {
    "use strict";
    return {
        restrict: "E",
        scope: {
            teamAbbr: "=",
            type: "@",
            season: "="
        },
        link: function postLink(scope, iElement, iAttrs) {
            function createPillLogo() {
                if (!scope.teamAbbr) {
                    return
                }
                var root = "/media/img/teams/pills/";
                var teamurl = [root, scope.teamAbbr, "_68x44.png"].join("");
                var imgElem = angular.element("<img></img>");
                imgElem.addClass("team-img").attr("src", teamurl);
                iElement.html(imgElem)
            }

            function createTeamLogo() {
                if (!scope.teamAbbr) {
                    return
                }
                var hasSeason = !!scope.season;
                var rootURL = "/media/img/teams/logos/";
                var fallbackURL = [rootURL, "NBA-grey_logo.svg"].join("");
                var teamURL = [rootURL, scope.teamAbbr, "_logo.svg"].join("");
                var teamSeasonURL = [rootURL, "season/", scope.season, "/", scope.teamAbbr, "_logo.svg"].join("");
                var imgElem = angular.element("<img></img>");
                imgElem.addClass("team-img").attr("type", "image/svg+xml").attr("src", hasSeason ? teamSeasonURL : teamURL);
                iElement.html(imgElem);
                // Use fallback image if the team logo fails to load
                iElement.find("img").bind("error", function() {
                    if (hasSeason) {
                        hasSeason = false;
                        angular.element(this).attr("src", teamURL)
                    } else {
                        angular.element(this).attr("src", fallbackURL)
                    }
                })
            }
            scope.$watch("season", function(season) {
                if (iAttrs.type === "pill") {
                    createPillLogo()
                } else {
                    createTeamLogo()
                }
            });
            scope.$watch("teamAbbr", function(teamAbbr) {
                if (iAttrs.type === "pill") {
                    createPillLogo()
                } else {
                    createTeamLogo()
                }
            })
        }
    }
});
stats.directive("statsWith", function() {
    return {
        scope: true,
        link: function(scope, el, attr) {
            var expression = attr.statsWith;
            var parts = expression.split(" as ");
            if (parts.length != 2) {
                return
            }
            scope.$watch(parts[0], function(value) {
                scope[parts[1]] = value
            }, true)
        }
    }
});
(function(undefined) {
    "use strict";
    stats.directive("statsTransactionPanel", statsTransactionPanel);
    statsTransactionPanel.$inject = ["$filter"];

    function statsTransactionPanel($filter) {
        return {
            restrict: "E",
            replace: false,
            scope: {
                transaction: "=",
                filterBy: "="
            },
            templateUrl: "/templates/transactions/transactions-panel.html",
            link: function statsTransactionPanelLink(scope, elem, attr, ctrl) {
                scope.group = scope.transaction;
                scope.currentIndex = 0;
                scope.changePanel = changePanelFn;
                scope.$watch("filterBy", function() {
                    if (scope.filterBy) {
                        scope.group = $filter("filter")(scope.transaction, {
                            TRANSACTION_DESCRIPTION: scope.filterBy
                        })
                    } else {
                        scope.group = scope.transaction
                    }
                    scope.isHidden = scope.group.length === 0 ? true : false
                });
                /**
                 * changePanelFn()
                 * update scope.currentIndex based on page state
                 *
                 * @param {number} num - '1', '-1'
                 */
                function changePanelFn(num) {
                    var index = scope.currentIndex;
                    // The total number of entries per transaction
                    var TOTAL = scope.transaction.length;
                    // http://javascript.about.com/od/problemsolving/a/modulobug.htm
                    scope.currentIndex = ((index + num) % TOTAL + TOTAL) % TOTAL
                }
            }
        }
    }
})();
/**
 *
 */
stats.filter("byLetter", function() {
    return function(arr, field) {
        var obj = {};
        var letters = [];
        for (var i in arr) {
            var val = field ? arr[i][field] : arr[i];
            var li = val.charAt(0).toUpperCase();
            if (!obj[li]) {
                obj[li] = []
            }
            obj[li].push(arr[i])
        }
        for (var l in obj) {
            letters.push({
                initial: l,
                items: obj[l]
            })
        }
        return letters
    }
});
/*
 * svg arc path
 *
 * @param x (number)
 * @param y (number)
 * @param radius (number)
 * @param startAngle (number)
 * @param endAngle (number)
 *
 * returns svg arc path
 */
(function() {
    stats.filter("arcPath", arcPath);

    function arcPath() {
        return function(x, y, radius, startAngle, endAngle) {
            return describeArc(x, y, radius, startAngle, endAngle)
        }
    }

    function polarToCartesian(centerX, centerY, radius, angleInDegrees) {
        var angleInRadians = (angleInDegrees - 90) * Math.PI / 180;
        return {
            x: centerX + radius * Math.cos(angleInRadians),
            y: centerY + radius * Math.sin(angleInRadians)
        }
    }

    function describeArc(x, y, radius, startAngle, endAngle) {
        var start = polarToCartesian(x, y, radius, endAngle);
        var end = polarToCartesian(x, y, radius, startAngle);
        var arcSweep = endAngle - startAngle <= 180 ? "0" : "1";
        var d = ["M", x, y, "L", start.x, start.y, "A", radius, radius, 0, arcSweep, 0, end.x, end.y, "Z"].join(" ");
        return d
    }
})(); /* converts area in 10ths of a foot to square feet */
stats.filter("area", function() {
    return function(area) {
        if (!area) {
            return 0
        } else {
            return (area / 100).toFixed(1) + " ft ²"
        }
    }
}); /* formats decimal gametime in seconds to Q - MM:SS */
stats.filter("countdownClock", function() {
    return function(time) {
        var q1max = 7200;
        var q2max = 14400;
        var q3max = 21600;
        var q4max = 28800;
        var OTperiod = 0;
        var overtime = 0;
        var prefix = "";
        var remaining = 0;
        if (time <= q1max) {
            prefix = "Q1";
            remaining = q1max - time
        }
        if (time > q1max && time <= q2max) {
            prefix = "Q2";
            remaining = q1max - time + q1max
        }
        if (time > q2max && time <= q3max) {
            prefix = "Q3";
            remaining = q1max - time + q2max
        }
        if (time > q3max && time <= q4max) {
            prefix = "Q4";
            remaining = q1max - time + q3max
        }
        if (time > q4max) {
            // Grab total overtime...
            overtime = time - q4max;
            // Divide into 5-min periods
            OTperiod = Math.ceil(overtime / 3e3);
            // Set the remaining time for the period
            remaining = 3e3 * OTperiod - time + q4max;
            // Add the OT period to the prefix
            prefix = "OT" + OTperiod
        }
        var totalSecs = remaining / 10;
        var displayMins = ("0" + Math.floor(totalSecs / 60)).substr(-2);
        var displaySecs = ("0" + Math.floor(totalSecs % 60)).substr(-2);
        var displayTime = [displayMins, displaySecs].join(":");
        return [prefix, displayTime].join(" - ")
    }
});
/*
 * Used for custom table filters. expect a filter string in the format of
 * NAME*FIELD*COMPARATOR*VALUE
 *
 * ex: FGA*GE*9
 *
 */
stats.filter("customStatFilter", function() {
    return function(items, filter) {
        var types = {
            E: function(e) {
                if (typeof e[field] === "string") {
                    return e[field].toLowerCase().indexOf(val.toLowerCase()) > -1
                } else {
                    return e[field] == val
                }
            },
            NE: function(e) {
                if (typeof e[field] === "string") {
                    return e[field].toLowerCase().indexOf(val.toLowerCase()) == -1
                } else {
                    return e[field] != val
                }
            },
            G: function(e) {
                return e[field] > val
            },
            GE: function(e) {
                return e[field] >= val
            },
            L: function(e) {
                return e[field] < val
            },
            LE: function(e) {
                return e[field] <= val
            }
        };
        var s = filter.split("*");
        var field = s[0];
        var func = types[s[1]];
        var val = s[2];
        if (!field || !func || !val) {
            return items
        }
        if (field.indexOf("PCT") > -1) {
            val = val / 100
        }
        var filtered = items.filter(func);
        return items.filter(func)
    }
}); /* converts Quarter, MM:SS to decimal game time (total length of game in seconds) */
/* or, if no timestring is provided, return the game length in decimal time */
stats.filter("decimalTime", function() {
    return function(period, timestring) {
        var time = 0;
        var rts = Math.min(period, 4);
        var ots = Math.max(period - 4, 0);
        if (timestring) {
            var ts = timeString.split(":");
            var min = parseInt(ts[0], 10);
            var sec = parseInt(ts[1], 10);
            var maxReg = 28800;
            if (period <= 4) {
                time = (period - 1) * 7200 + (7200 - (min * 600 + sec * 10))
            } else {
                time = (ots - 1) * 3e3 + (3e3 - (min * 600 + sec * 10));
                time += maxReg
            }
        } else {
            time = rts * 7200 + ots * 3e3
        }
        return time
    }
});
stats.filter("first", function() {
    return function(items) {
        return items[0]
    }
});
stats.filter("format", ["$filter", function($filter) {
    return function(value, filterName, filterParam) {
        return $filter(filterName)(value, filterParam)
    }
}]); /* formats gametime in seconds to MM:SS */
stats.filter("gametime", function() {
    return function(time) {
        var minutes = Math.floor(time / 60);
        var seconds = time % 60;
        if (minutes > 0) {
            return minutes + ":" + ("00" + seconds.toFixed(0)).slice(-2)
        } else {
            return "00:" + ("00" + seconds.toFixed(0)).slice(-2)
        }
    }
}); /* formats league rankings on player profile */
/**
 * Formatter for league rankings table columns on player profile
 */
stats.filter("leagueRanking", function() {
    return function(val, row) {
        return val && val != "NR" ? "#" + val : "NR"
    }
});
/**
 * returns a more compactly formatted lineup string
 *
 * ex: "Garnett,Kevin - Johnson,Joe - Livingston,Shaun - Pierce,Paul - Williams,Deron"
 * => "K.Garnett, J.Johnson, S.Livingston, P.Pierce, D.Williams"
 */
stats.filter("lineup", function() {
    return function(lineup) {
        var out = lineup.split(" - ").map(function(n) {
            var name = n.split(",");
            var first = name[1] || "";
            var last = name[0];
            return first.charAt(0) + "." + last
        }).join(", ");
        return out
    }
});
/**
 * Used by Player list page to generate even columns
 */
stats.filter("listColumn", function() {
    return function(arr, col, cols) {
        var ipc = Math.ceil(arr.length / cols);
        var offset = (col - 1) * ipc;
        var items = arr.slice(offset, ipc + offset);
        return items
    }
});
stats.filter("notFirst", function() {
    return function(items) {
        items.shift();
        return items
    }
});
/**
 * Given a number, returns ordinal [th, nd, rd]
 */
stats.filter("ordinal", [function() {
    return function(n) {
        if (!n) {
            return "-"
        }
        var s = ["th", "st", "nd", "rd"];
        var v = n % 100;
        var ordinal = s[(v - 20) % 10] || s[v] || s[0];
        return n + ordinal
    }
}]);
/**
 * Given a object, returns as query string
 */
stats.filter("param", function() {
    return function(obj) {
        var arr = [];
        for (var i in obj) {
            arr.push(i + "=" + obj[i])
        }
        return arr.join("&")
    }
});
/**
 * Takes a decimal percentage (eg. 0.0029 or 0.001) and returns a percent formatted string (eg. 2.9% or 1.0%)
 *
 * useSign : boolean
 *  true : .456 -> 45.6%
 *  false : .456 -> 45.6
 */
stats.filter("percent", function() {
    return function(n, useSign) {
        if (n == 1) {
            return useSign ? "100%" : 100
        } else if (n === null || typeof n == "undefined") {
            return "-"
        } else {
            var val = (n * 100).toFixed(1);
            return useSign ? val + "%" : val
        }
    }
}); /*global $, angular, console */
/**
 * Given a number, returns a year in season format
 * ex: 2012 => '2012-13'
 */
stats.filter("permode", [function() {
    return function(n, mode, col) {
        if (n === null) {
            return "-"
        }
        if (n === "") {
            return ""
        }
        if (!n && n !== 0) {
            return n
        }
        if (col == "MIN") {
            switch (mode) {
                case "PerGame":
                    return n.toFixed(1);
                case "Per100Possessions":
                    return n.toFixed(1);
                case "Per100Plays":
                    return n.toFixed(1);
                case "PerPossession":
                    return n.toFixed(3);
                case "PerPlay":
                    return n.toFixed(3);
                default:
                    return n.toFixed(0)
            }
        } else {
            switch (mode) {
                case "Totals":
                    return n.toFixed(0);
                case "PerPlay":
                    return n.toFixed(3);
                case "PerPossession":
                    return n.toFixed(3);
                default:
                    return n.toFixed(1)
            }
        }
    }
}]);
/**
 * returns a player name as an object with first and last name properties
 * this is just a best guess
 */
(function() {
    stats.filter("playerFirstLast", playerFirstLast);

    function playerFirstLast() {
        return function(playername, part) {
            var obj = {
                fn: "",
                ln: ""
            };
            if (playername && typeof playername == "string") {
                obj.fn = playername.match(/([a-zA-Z\-\.]+)(.*)/)[1];
                obj.ln = playername.match(/([a-zA-Z\-\.]+)(.*)/)[2]
            }
            if (part) {
                return obj[part]
            } else {
                return obj
            }
        }
    }
})();
/*
 * NO 11/7 - not sur ewhy this needs to exist
 */
stats.filter("reverse", function() {
    return function(items) {
        if (items) {
            return items.slice().reverse()
        }
    }
});
/**
 * Dislpays seasons (eg. 2013-14) as a single year (2014)
 *
 * @param {array} seasonArray = An array of objects containing seasons.
 *
 */
stats.filter("seasonToSeasonYear", function() {
    return function(season) {
        if (season) {
            var val = parseInt(season.substr(0, 4), 10) + 1;
            return isNaN(val) ? season : val
        }
    }
});
/**
 * Given a gameid, returns season id text
 * ex: "0021301223" => '2013-14'
 */
stats.filter("seasonid", function() {
    return function(gameid) {
        var yp = parseInt(gameid.substr(3, 2), 10);
        var yearFrom = yp + (yp < 40 ? 2e3 : 1900);
        var yearTo = yearFrom + 1;
        var SeasonID = yearFrom + "-" + yearTo.toString().substr(2, 2);
        return SeasonID
    }
});
/**
 * Given a gameid, returns season type text
 * ex: "0021301223" => 'Regular Season'
 */
stats.filter("seasontype", function() {
    return function(gameid) {
        switch (gameid.substr(2, 1)) {
            case "1":
                return "Preseason";
            case "2":
                return "Regular Season";
            case "3":
                return "All Star";
            case "4":
                return "Playoffs";
            default:
                return "Regular Season"
        }
    }
});
/**
 * Given a number, returns a year in season format
 * ex: 2012 => '2012-13'
 */
stats.filter("seasonyear", function() {
    return function(year) {
        var next = (+year + 1).toString().slice(-2);
        var season = year + "-" + next;
        return season
    }
});
/**
 * Basic stat to text filter
 */
(function() {
    stats.filter("statFieldFormatter", statFieldFormatter);
    statFieldFormatter.$inject = ["$filter"];

    function statFieldFormatter($filter) {
        return function(val, field) {
            // cast to string
            field += "";
            if (val === null) {
                return "-"
            }
            var numExtract = /_fmtD(\d+)$/;
            if (field.indexOf("_fmtPCT") > -1) {
                return (val * 100).toFixed(1)
            } else if (field.indexOf("_PG") > -1) {
                return val.toFixed(1)
            } else if (field.indexOf("_RATING") > -1) {
                return val.toFixed(1)
            } else if (numExtract.exec(field) != null) {
                var myArray = numExtract.exec(field);
                var num = myArray[1];
                return val.toFixed(num)
            } else if (field.indexOf("PCT") > -1) {
                return (val * 100).toFixed(1)
            } else if (field.indexOf("JERSEY") > -1) {
                return "#" + val
            } else if (field.indexOf("_fmtINT") > -1) {
                return $filter("number")(val, 0)
            }
            return val
        }
    }
})();
/**
 * Basic stat to text filter
 */
(function() {
    stats.filter("statFieldToText", statFieldToText);

    function statFieldToText() {
        return function(field) {
            // cast to string
            field += "";
            var numExtract = /_fmtD(\d+)$/;
            // replace _PCT with "%"
            // replace all other "_" with space
            field = field.replace(/_fmt.*$/, " ").replace("PCT", "%").replace("_NUM", " ").replace(/\_/g, " ").replace("Regular_Season", " Regular Season");
            return field
        }
    }
})();
/**
 * Decorator for angular "number" filter
 * except returns "-" for NaN values
 */
(function() {
    angular.module("stats").filter("statNumber", statNumber);
    statNumber.$inject = ["$filter"];

    function statNumber($filter) {
        return function(n, precision) {
            var val = $filter("number")(n, precision);
            return val === "" ? "-" : val
        }
    }
})();
/**
 * compares two sets of colors
 * and returns a pair with a set visual difference
 *
 * @param HTM array of hex color values
 * @param VTM arrray of hex color values
 *
 */
(function() {
    stats.filter("TeamColorChooser", TeamColorChooser);

    function TeamColorChooser() {
        return function(HTM, VTM) {
            var hasPassed = false;
            var minHue = 130;
            var minBrightness = 30;
            var minDiff = 150;
            for (var i in VTM.colors) {
                var vRGB = hexToRGB(VTM.colors[i]);
                var hRGB = hexToRGB(HTM.colors[0]);
                var brightness = brightnessDiff(hRGB, vRGB);
                var hue = hueDiff(hRGB, vRGB);
                var total = brightness + hue * 2;
                var passed = hue >= minHue;
                if (passed) {
                    return {
                        htm: HTM.colors[0],
                        vtm: VTM.colors[i]
                    }
                }
            }
            return {
                htm: HTM.colors[0],
                vtm: VTM.colors[0]
            }
        }
    }

    function hexToRGB(hex) {
        return {
            r: parseInt(hex.substr(0, 2), 16),
            g: parseInt(hex.substr(2, 2), 16),
            b: parseInt(hex.substr(4, 2), 16)
        }
    }

    function brightnessDiff(vtm, htm) {
        var v = (299 * vtm.r + 587 * vtm.g + 141 * vtm.b) / 1e3;
        var h = (299 * htm.r + 587 * htm.g + 141 * htm.b) / 1e3;
        return Math.abs(v - h)
    }

    function hueDiff(vtm, htm) {
        var r = Math.abs(vtm.r - htm.r);
        var g = Math.abs(vtm.g - htm.g);
        var b = Math.abs(vtm.b - htm.b);
        return r + g + b
    }
})();
/**
 * toUpperCase
 * Converts a lowercase string into Upper Case.
 *
 * @param {string} text - The string to convert.
 *
 * @returns {string} _newString - The newly converted string.
 */
stats.filter("toUpperCase", function() {
    return function(text) {
        if (!text) {
            return text
        }
        return text.toString().toUpperCase()
    }
});
/**
 * toArray
 * Turns an object into an array. Key order in the object is preserved.
 * Hat Tip: http://stackoverflow.com/questions/18124665/angularjs-sort-object-in-ngrepeat
 *
 * @param {Object} obj - The object to convert.
 *
 * @returns {Array} array - The newly converted object.
 */
stats.filter("toArray", function() {
    return function(obj) {
        var array = [];
        angular.forEach(obj, function(value, key, object) {
            array.push({
                key: key,
                value: value
            })
        });
        return array
    }
});
/**
 * toFeetAndInches
 * Converts total inches into feet and inches.
 *
 * @param {number} inches - The number to convert.
 *
 * @returns {string} _feetInches - The newly converted number.
 */
stats.filter("toFeetAndInches", function() {
    return function(measure) {
        // measure must be a number
        var _measure = parseInt(measure, 10);
        var _feet = Math.floor(_measure / 12);
        var _inches = _measure % 12;
        return [_feet, _inches].join("-")
    }
});
/**
 * toInches
 * Converts feet and inches into total inches.
 *
 * @param {string} size - The number to convert.
 *
 * @returns {string} totalInches - The newly converted number.
 */
stats.filter("toInches", function() {
    return function(size) {
        var _sizeArray = filterArray(toArray(size));
        var _feet = parseInt(_sizeArray[0], 10) * 12;
        var _inches = _sizeArray[1] ? parseInt(_sizeArray[1], 10) : 0;
        var totalInches = (_feet + _inches).toString();
        // return null if totoalInches is not a number
        return isNaN(totalInches) ? null : totalInches;
        /**
         * toArray()
         *
         * Converts a string to an array using non-digit characters as seperators
         *
         * @params {string} string - The string to split
         * @returns {Array} - The array
         */
        function toArray(string) {
            return string.split(/\D/)
        }
        /**
         * filterArray()
         *
         * Removes empty, null, and undefined indexes from an array.
         *
         * @params {Array} oldArray - The array to filter
         * @returns {Array} - The filtered array
         */
        function filterArray(oldArray) {
            return oldArray.filter(function(value, index, array) {
                if (value !== "" || value !== null || value !== undefined) {
                    return value
                }
            })
        }
    }
});
/**
 * toObject
 * Turns an array into an object.
 *
 * @param {Array} array - The array to convert. Must be in '[<key>, <value>]' format
 *
 * @returns {Object} object - The newly converted array.
 */
stats.filter("toObject", function() {
    return function(array) {
        var object = {};
        object[array[0]] = array[1];
        return object
    }
});
/**
 * toSlug
 * Transform a string into a URL slug for deep links and query strings.
 * The slug is lowercase, separated by dashes, without punctuation.
 *
 * @param {string} text - The string to convert.
 *
 * @returns {string} - The new URL slug.
 *
 * @examples:
 *   'LeBron James'              => 'lebron-james'
 *   'L. James'                  => 'l-james'
 *   'LeBron James, 23, Forward' => 'lebron-james-23-forward'
 *   'LeBron's first game'       => 'lebrons-first-game'
 */
stats.filter("toSlug", function() {
    return function(text) {
        // if text is undefined...
        if (!text) {
            // do nothing and return.
            return text
        }
        text = text.toString();
        // if the text is a string...
        if (isString(text)) {
            /**
             * 1. /['‘’]/g replaces ' or ‘ or ’ with no character
             * 2. /[\W\s]+/g replaces all non-words and whitespace with a dash
             * 3. converts the string to lower case
             * 4. returns the text
             */
            return text.replace(/['‘’]/g, "").replace(/[\W\s]+/g, "-").toLowerCase()
        } else {
            // Remind me to use a string as the text parameter
            console.error("The 'text' parameter must be a string.")
        }
    };
    /**
     * isString()
     * Tests if a variable is a string.
     * toddmotto.com/understanding-javascript-types-and-reliable-type-checking
     *
     * @param {*} item - the variable to test.
     *
     * @return {Boolean} - True if item is a string.
     */
    function isString(item) {
        return Object.prototype.toString.call(item).slice(8, -1) === "String"
    }
});
/**
 * toTitleCase
 * Converts a lowercase string into Title Case.
 *
 * @param {string} text - The string to convert.
 *
 * @returns {string} _newString - The newly converted string.
 */
stats.filter("toTitleCase", function() {
    return function(text) {
        var _oldString = text || "";
        var _oldTextArray = _oldString.split(" ");
        var _newTextArray = [];
        var _newString = "";
        if (_oldString === "N/A") {
            // If the text is 'N/A', return the text...
            _newString = _oldString
        } else {
            // Otherwise, convert the text to title case.
            _oldTextArray.forEach(function(value, index, array) {
                var _word = [value.charAt(0).toUpperCase(), value.substr(1).toLowerCase()].join("");
                _newTextArray.push(_word)
            });
            _newString = _newTextArray.join(" ")
        }
        return _newString
    }
}); /* formats decimal gametime in seconds to Q - MM:SS */
stats.filter("wallclock", function() {
    return function(time) {
        var pre;
        var qtr;
        var sec;
        var min;
        var mod;
        var ott;
        if (time >= 7200) {
            time -= 10
        }
        if (time <= 28800) {
            pre = "Q";
            qtr = Math.ceil(time / 7200);
            mod = time % 7200
        } else {
            ott = time - 28800;
            pre = "OT";
            qtr = Math.ceil(ott / 3e3);
            mod = ott % 3e3
        }
        min = Math.floor(mod / 600);
        sec = (60 * (mod / 600 - min)).toFixed(0);
        if (min == 0 && sec == "0") {
            qtr += 1
        }
        /*
            if (qtr==5 && pre !="OT") {
              return "Final";
            }
        */
        return pre + qtr + " - " + ("0" + min).substr(-2) + ":" + ("0" + sec).substr(-2)
    }
});
//# sourceMappingURL=custom.min.js.map